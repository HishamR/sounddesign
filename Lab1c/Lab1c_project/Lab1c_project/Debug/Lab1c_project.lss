
Lab1c_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034f8  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000834f8  000834f8  0000b4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000848  20070000  00083500  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000000c8  20070848  00083d48  00010848  2**2
                  ALLOC
  4 .stack        00002000  20070910  00083e10  00010848  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010848  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  00010871  2**0
                  CONTENTS, READONLY
  7 .debug_info   00014bab  00000000  00000000  000108e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003c0b  00000000  00000000  0002548d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008d54  00000000  00000000  00029098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000aa0  00000000  00000000  00031df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009d8  00000000  00000000  00032890  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001521e  00000000  00000000  00033268  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000e2d2  00000000  00000000  00048486  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005fcbf  00000000  00000000  00056758  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001418  00000000  00000000  000b6418  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072910 	.word	0x20072910
   80004:	00080d39 	.word	0x00080d39
   80008:	00080d35 	.word	0x00080d35
   8000c:	00080d35 	.word	0x00080d35
   80010:	00080d35 	.word	0x00080d35
   80014:	00080d35 	.word	0x00080d35
   80018:	00080d35 	.word	0x00080d35
	...
   8002c:	00080d35 	.word	0x00080d35
   80030:	00080d35 	.word	0x00080d35
   80034:	00000000 	.word	0x00000000
   80038:	00080d35 	.word	0x00080d35
   8003c:	00080d35 	.word	0x00080d35
   80040:	00080d35 	.word	0x00080d35
   80044:	00080d35 	.word	0x00080d35
   80048:	00080d35 	.word	0x00080d35
   8004c:	00080d35 	.word	0x00080d35
   80050:	00080d35 	.word	0x00080d35
   80054:	00080d35 	.word	0x00080d35
   80058:	00080d35 	.word	0x00080d35
   8005c:	00080d35 	.word	0x00080d35
   80060:	00080d35 	.word	0x00080d35
   80064:	00080d35 	.word	0x00080d35
   80068:	00000000 	.word	0x00000000
   8006c:	00080b01 	.word	0x00080b01
   80070:	00080b1d 	.word	0x00080b1d
   80074:	00080b39 	.word	0x00080b39
   80078:	00080b55 	.word	0x00080b55
	...
   80084:	00080d35 	.word	0x00080d35
   80088:	00080d35 	.word	0x00080d35
   8008c:	00080d35 	.word	0x00080d35
   80090:	00080d35 	.word	0x00080d35
   80094:	00080d35 	.word	0x00080d35
   80098:	00080d35 	.word	0x00080d35
   8009c:	00080d35 	.word	0x00080d35
   800a0:	00080d35 	.word	0x00080d35
   800a4:	00000000 	.word	0x00000000
   800a8:	00080d35 	.word	0x00080d35
   800ac:	00080d35 	.word	0x00080d35
   800b0:	00080d35 	.word	0x00080d35
   800b4:	00080d35 	.word	0x00080d35
   800b8:	00080d35 	.word	0x00080d35
   800bc:	00080d35 	.word	0x00080d35
   800c0:	00080d35 	.word	0x00080d35
   800c4:	00080d35 	.word	0x00080d35
   800c8:	00080d35 	.word	0x00080d35
   800cc:	00080d35 	.word	0x00080d35
   800d0:	00080d35 	.word	0x00080d35
   800d4:	00080d35 	.word	0x00080d35
   800d8:	00080d35 	.word	0x00080d35
   800dc:	00080d35 	.word	0x00080d35
   800e0:	00080d35 	.word	0x00080d35
   800e4:	00080d35 	.word	0x00080d35
   800e8:	00080d35 	.word	0x00080d35
   800ec:	00080d35 	.word	0x00080d35
   800f0:	00080d35 	.word	0x00080d35

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a19      	subs	r1, r3, r0
   800fc:	2906      	cmp	r1, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4a04      	ldr	r2, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2a00      	cmp	r2, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4790      	blx	r2
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	00083500 	.word	0x00083500
   80110:	00083503 	.word	0x00083503
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a19      	subs	r1, r3, r0
   80120:	108a      	asrs	r2, r1, #2
   80122:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	00083500 	.word	0x00083500
   8013c:	00083500 	.word	0x00083500
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4804      	ldr	r0, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b110      	cbz	r0, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2101      	movs	r1, #1
   8015c:	7021      	strb	r1, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	20070848 	.word	0x20070848
   80164:	00000000 	.word	0x00000000
   80168:	00083500 	.word	0x00083500

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6801      	ldr	r1, [r0, #0]
   8017e:	b111      	cbz	r1, 80186 <frame_dummy+0x1a>
   80180:	4a07      	ldr	r2, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b102      	cbz	r2, 80186 <frame_dummy+0x1a>
   80184:	4790      	blx	r2
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	00083500 	.word	0x00083500
   80198:	2007084c 	.word	0x2007084c
   8019c:	00083500 	.word	0x00083500
   801a0:	00000000 	.word	0x00000000

000801a4 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   801a4:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   801a6:	f04f 0401 	mov.w	r4, #1
   801aa:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   801ac:	f04f 0400 	mov.w	r4, #0
   801b0:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   801b2:	f240 2502 	movw	r5, #514	; 0x202
   801b6:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   801ba:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   801be:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   801c2:	6845      	ldr	r5, [r0, #4]
   801c4:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   801c6:	ea4f 0242 	mov.w	r2, r2, lsl #1
   801ca:	fbb1 f1f2 	udiv	r1, r1, r2
   801ce:	f101 32ff 	add.w	r2, r1, #4294967295
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   801d2:	ea4f 6102 	mov.w	r1, r2, lsl #24
   801d6:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
   801da:	6043      	str	r3, [r0, #4]
	return 0;
}
   801dc:	4620      	mov	r0, r4
   801de:	bc30      	pop	{r4, r5}
   801e0:	4770      	bx	lr
   801e2:	bf00      	nop

000801e4 <adc_set_resolution>:
 * \param resolution ADC resolution.
 *
 */
void adc_set_resolution(Adc *p_adc,const enum adc_resolution_t resolution)
{
	p_adc->ADC_MR |= (resolution << 4) & ADC_MR_LOWRES;
   801e4:	6843      	ldr	r3, [r0, #4]
   801e6:	ea4f 1101 	mov.w	r1, r1, lsl #4
   801ea:	f001 0210 	and.w	r2, r1, #16
   801ee:	4313      	orrs	r3, r2
   801f0:	6043      	str	r3, [r0, #4]
   801f2:	4770      	bx	lr

000801f4 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   801f4:	6843      	ldr	r3, [r0, #4]
   801f6:	4319      	orrs	r1, r3
   801f8:	ea4f 12c2 	mov.w	r2, r2, lsl #7
   801fc:	b2d3      	uxtb	r3, r2
   801fe:	4319      	orrs	r1, r3
   80200:	6041      	str	r1, [r0, #4]
   80202:	4770      	bx	lr

00080204 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   80204:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80206:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   80208:	4322      	orrs	r2, r4
   8020a:	ea4f 6101 	mov.w	r1, r1, lsl #24
   8020e:	f001 6470 	and.w	r4, r1, #251658240	; 0xf000000
   80212:	4322      	orrs	r2, r4
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80214:	ea4f 7303 	mov.w	r3, r3, lsl #28
   80218:	f003 5140 	and.w	r1, r3, #805306368	; 0x30000000
   8021c:	430a      	orrs	r2, r1
   8021e:	6042      	str	r2, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   80220:	bc10      	pop	{r4}
   80222:	4770      	bx	lr

00080224 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   80224:	f04f 0302 	mov.w	r3, #2
   80228:	6003      	str	r3, [r0, #0]
   8022a:	4770      	bx	lr

0008022c <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   8022c:	f04f 0301 	mov.w	r3, #1
   80230:	fa03 f101 	lsl.w	r1, r3, r1
   80234:	6101      	str	r1, [r0, #16]
   80236:	4770      	bx	lr

00080238 <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
   80238:	6a00      	ldr	r0, [r0, #32]
}
   8023a:	4770      	bx	lr

0008023c <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
   8023c:	b410      	push	{r4}
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8023e:	ea4f 1181 	mov.w	r1, r1, lsl #6
   80242:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   80244:	f04f 0402 	mov.w	r4, #2
   80248:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   8024a:	f04f 30ff 	mov.w	r0, #4294967295
   8024e:	6298      	str	r0, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80250:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   80252:	605a      	str	r2, [r3, #4]
}
   80254:	bc10      	pop	{r4}
   80256:	4770      	bx	lr

00080258 <tc_set_block_mode>:
 * \param ul_blockmode Block mode register value to set.
 *
 */
void tc_set_block_mode(Tc *p_tc, uint32_t ul_blockmode)
{
	p_tc->TC_BMR = ul_blockmode;
   80258:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   8025c:	4770      	bx	lr
   8025e:	bf00      	nop

00080260 <tc_start>:
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   80260:	ea4f 1181 	mov.w	r1, r1, lsl #6
   80264:	f04f 0305 	mov.w	r3, #5
   80268:	5043      	str	r3, [r0, r1]
   8026a:	4770      	bx	lr

0008026c <tc_stop>:
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   8026c:	ea4f 1181 	mov.w	r1, r1, lsl #6
   80270:	f04f 0302 	mov.w	r3, #2
   80274:	5043      	str	r3, [r0, r1]
   80276:	4770      	bx	lr

00080278 <tc_read_cv>:
uint32_t tc_read_cv(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
   80278:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   8027c:	6908      	ldr	r0, [r1, #16]
}
   8027e:	4770      	bx	lr

00080280 <delay_init>:
#include <string.h>
#include "asf.h"
#include "LCDShield.h"

void delay_init(void)		/* Initializes the timer used for delays */
{
   80280:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC0);
   80282:	f04f 001b 	mov.w	r0, #27
   80286:	f640 43b1 	movw	r3, #3249	; 0xcb1
   8028a:	f2c0 0308 	movt	r3, #8
   8028e:	4798      	blx	r3
	tc_init(TC0,0,0);		 /* TC0, channel 0, TCLK1 och capturemode */
   80290:	f04f 0400 	mov.w	r4, #0
   80294:	f2c4 0408 	movt	r4, #16392	; 0x4008
   80298:	4620      	mov	r0, r4
   8029a:	f04f 0100 	mov.w	r1, #0
   8029e:	460a      	mov	r2, r1
   802a0:	f240 233d 	movw	r3, #573	; 0x23d
   802a4:	f2c0 0308 	movt	r3, #8
   802a8:	4798      	blx	r3
	tc_set_block_mode(TC0,0);
   802aa:	4620      	mov	r0, r4
   802ac:	f04f 0100 	mov.w	r1, #0
   802b0:	f240 2259 	movw	r2, #601	; 0x259
   802b4:	f2c0 0208 	movt	r2, #8
   802b8:	4790      	blx	r2
	tc_stop(TC0,0);			/* making sure the timer does not run  */
   802ba:	4620      	mov	r0, r4
   802bc:	f04f 0100 	mov.w	r1, #0
   802c0:	f240 236d 	movw	r3, #621	; 0x26d
   802c4:	f2c0 0308 	movt	r3, #8
   802c8:	4798      	blx	r3
   802ca:	bd10      	pop	{r4, pc}

000802cc <delay>:
}


void delay(uint32_t us)		/* A simple implementation for a delay in us (not calibrated) */
{
   802cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   802ce:	4604      	mov	r4, r0
	tc_start(TC0,0);
   802d0:	f04f 0000 	mov.w	r0, #0
   802d4:	f2c4 0008 	movt	r0, #16392	; 0x4008
   802d8:	f04f 0100 	mov.w	r1, #0
   802dc:	f240 2361 	movw	r3, #609	; 0x261
   802e0:	f2c0 0308 	movt	r3, #8
   802e4:	4798      	blx	r3
	while (tc_read_cv(TC0,0) < us*42);
   802e6:	f04f 072a 	mov.w	r7, #42	; 0x2a
   802ea:	fb07 f704 	mul.w	r7, r7, r4
   802ee:	f04f 0400 	mov.w	r4, #0
   802f2:	f2c4 0408 	movt	r4, #16392	; 0x4008
   802f6:	f04f 0600 	mov.w	r6, #0
   802fa:	f240 2579 	movw	r5, #633	; 0x279
   802fe:	f2c0 0508 	movt	r5, #8
   80302:	4620      	mov	r0, r4
   80304:	4631      	mov	r1, r6
   80306:	47a8      	blx	r5
   80308:	42b8      	cmp	r0, r7
   8030a:	d3fa      	bcc.n	80302 <delay+0x36>
	tc_stop(TC0,0);
   8030c:	f04f 0000 	mov.w	r0, #0
   80310:	f2c4 0008 	movt	r0, #16392	; 0x4008
   80314:	f04f 0100 	mov.w	r1, #0
   80318:	f240 226d 	movw	r2, #621	; 0x26d
   8031c:	f2c0 0208 	movt	r2, #8
   80320:	4790      	blx	r2
   80322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00080324 <LCDwrite>:
*	type = 0 controls the display
*	type = 1 writes the content of the byte (usually interpreted as ASCII-code) to the display
*
*	LCDwrite returns the actual pinout value on PIOC 26-23, which is the reverse order compared to the Due pin order of D4-D7
*/
{
   80324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80328:	b084      	sub	sp, #16
   8032a:	4607      	mov	r7, r0
   8032c:	460d      	mov	r5, r1
	/* In it's infinite wisdom the shield has the data pins in mirrored order compared to the Due board */
	uint8_t mirror_pin[16]={0b0000,0b1000,0b0100,0b1100,0b0010,0b1010,0b0110,0b1110,0b0001,0b1001,0b0101,0b1101,0b0011,0b1011,0b0111,0b1111};
   8032e:	f243 33e4 	movw	r3, #13284	; 0x33e4
   80332:	f2c0 0308 	movt	r3, #8
   80336:	466c      	mov	r4, sp
   80338:	6818      	ldr	r0, [r3, #0]
   8033a:	6859      	ldr	r1, [r3, #4]
   8033c:	689a      	ldr	r2, [r3, #8]
   8033e:	68db      	ldr	r3, [r3, #12]
   80340:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	byte_orig = byte;

	/* write the first 4 bits to the shield. */
	byte = byte>>4;
	byte = mirror_pin[byte];
   80342:	eb04 1017 	add.w	r0, r4, r7, lsr #4
   80346:	f810 1c10 	ldrb.w	r1, [r0, #-16]
	byte32 = (uint32_t)byte << 23;
   8034a:	ea4f 56c1 	mov.w	r6, r1, lsl #23
	mirrored_output = byte<<4;
   8034e:	ea4f 1301 	mov.w	r3, r1, lsl #4
   80352:	fa5f f883 	uxtb.w	r8, r3
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
   80356:	b13d      	cbz	r5, 80368 <LCDwrite+0x44>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80358:	f44f 5290 	mov.w	r2, #4608	; 0x1200
   8035c:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80360:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80364:	6310      	str	r0, [r2, #48]	; 0x30
   80366:	e006      	b.n	80376 <LCDwrite+0x52>
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80368:	f44f 5590 	mov.w	r5, #4608	; 0x1200
   8036c:	f2c4 050e 	movt	r5, #16398	; 0x400e
   80370:	f44f 0480 	mov.w	r4, #4194304	; 0x400000
   80374:	636c      	str	r4, [r5, #52]	; 0x34
__always_inline static void arch_ioport_set_port_level(ioport_port_t port,
		ioport_port_mask_t mask, ioport_port_mask_t level)
{
	Pio *base = arch_ioport_port_to_base(port);

	base->PIO_SODR = mask & level;
   80376:	f006 61f0 	and.w	r1, r6, #125829120	; 0x7800000
   8037a:	f44f 5490 	mov.w	r4, #4608	; 0x1200
   8037e:	f2c4 040e 	movt	r4, #16398	; 0x400e
   80382:	6321      	str	r1, [r4, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
   80384:	ea6f 0606 	mvn.w	r6, r6
   80388:	f006 63f0 	and.w	r3, r6, #125829120	; 0x7800000
   8038c:	6363      	str	r3, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8038e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
   80392:	6326      	str	r6, [r4, #48]	; 0x30
	
	ioport_set_pin_level(LCD_RS, type);
	ioport_set_port_level(IOPORT_PIOC, LCD_mask_D4_D7, byte32);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delay(1);
   80394:	f04f 0001 	mov.w	r0, #1
   80398:	f240 25cd 	movw	r5, #717	; 0x2cd
   8039c:	f2c0 0508 	movt	r5, #8
   803a0:	47a8      	blx	r5
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   803a2:	6366      	str	r6, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	
	delay(100);
   803a4:	f04f 0064 	mov.w	r0, #100	; 0x64
   803a8:	47a8      	blx	r5
	
	/* write the second 4 bits to the shield. */
	byte = byte_orig;
	byte = byte & 0x0f;
	byte = mirror_pin[byte];
   803aa:	f007 070f 	and.w	r7, r7, #15
   803ae:	aa04      	add	r2, sp, #16
   803b0:	19d0      	adds	r0, r2, r7
   803b2:	f810 1c10 	ldrb.w	r1, [r0, #-16]
	byte32 = (uint32_t)byte<<23;
   803b6:	ea4f 53c1 	mov.w	r3, r1, lsl #23
	mirrored_output = mirrored_output + byte;
   803ba:	eb08 0701 	add.w	r7, r8, r1
   803be:	b2ff      	uxtb	r7, r7
__always_inline static void arch_ioport_set_port_level(ioport_port_t port,
		ioport_port_mask_t mask, ioport_port_mask_t level)
{
	Pio *base = arch_ioport_port_to_base(port);

	base->PIO_SODR = mask & level;
   803c0:	f003 62f0 	and.w	r2, r3, #125829120	; 0x7800000
   803c4:	6322      	str	r2, [r4, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
   803c6:	ea6f 0003 	mvn.w	r0, r3
   803ca:	f000 61f0 	and.w	r1, r0, #125829120	; 0x7800000
   803ce:	6361      	str	r1, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   803d0:	6326      	str	r6, [r4, #48]	; 0x30

	ioport_set_port_level(IOPORT_PIOC, LCD_mask_D4_D7, byte32);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delay(1);
   803d2:	f04f 0001 	mov.w	r0, #1
   803d6:	47a8      	blx	r5
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   803d8:	6366      	str	r6, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	delay(100);
   803da:	f04f 0064 	mov.w	r0, #100	; 0x64
   803de:	47a8      	blx	r5
	
	return mirrored_output;
}
   803e0:	4638      	mov	r0, r7
   803e2:	b004      	add	sp, #16
   803e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000803e8 <LCDInit>:
	tc_stop(TC0,0);
}


int LCDInit(void)		/* Initializes the display on the LCD shield, returns 1 if everything is ok */
{
   803e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   803ec:	f44f 5490 	mov.w	r4, #4608	; 0x1200
   803f0:	f2c4 040e 	movt	r4, #16398	; 0x400e
   803f4:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
   803f8:	6127      	str	r7, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   803fa:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   803fe:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
   80402:	6125      	str	r5, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80404:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, enum ioport_direction group_direction)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (group_direction == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = mask;
   80408:	f04f 63f0 	mov.w	r3, #125829120	; 0x7800000
   8040c:	6123      	str	r3, [r4, #16]
	} else if (group_direction == IOPORT_DIR_INPUT) {
		base->PIO_ODR = mask;
	}

	base->PIO_OWER = mask;
   8040e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80412:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_dir(LCD_Enable, IOPORT_DIR_OUTPUT);
	ioport_set_port_dir(IOPORT_PIOC, LCD_mask_D4_D7, IOPORT_DIR_OUTPUT);
	
	ioport_set_pin_level(LCD_Enable, LOW);
	
	delay(30000);		/* wait > 15 ms */
   80414:	f247 5030 	movw	r0, #30000	; 0x7530
   80418:	f240 26cd 	movw	r6, #717	; 0x2cd
   8041c:	f2c0 0608 	movt	r6, #8
   80420:	47b0      	blx	r6
   80422:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80424:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
   80428:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   8042c:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
   80430:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80434:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
   80438:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   8043c:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
   80440:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80442:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, HIGH);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delay(1);		/* delay 1 us */
   80444:	f04f 0001 	mov.w	r0, #1
   80448:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8044a:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	
	delay(4100);	/* wait for more than 4,1 ms */
   8044c:	f241 0004 	movw	r0, #4100	; 0x1004
   80450:	47b0      	blx	r6
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80452:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   80456:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8045a:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   8045e:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80460:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, HIGH);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delay(1);		/* delay 1 us */
   80462:	f04f 0001 	mov.w	r0, #1
   80466:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80468:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);

	delay(100);	/* wait 100 us */
   8046a:	f04f 0064 	mov.w	r0, #100	; 0x64
   8046e:	47b0      	blx	r6
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80470:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   80474:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80478:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   8047c:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8047e:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, HIGH);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delay(1);		/* delay 1 us */
   80480:	f04f 0001 	mov.w	r0, #1
   80484:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80486:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	
	delay(100);	/* wait 100 us */
   80488:	f04f 0064 	mov.w	r0, #100	; 0x64
   8048c:	47b0      	blx	r6
   8048e:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80492:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80496:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   8049a:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8049c:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, LOW);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delay(1);
   8049e:	f04f 0001 	mov.w	r0, #1
   804a2:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   804a4:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	
	delay(100);
   804a6:	f04f 0064 	mov.w	r0, #100	; 0x64
   804aa:	47b0      	blx	r6

	LCDwrite(0b00101000, LOW);		/* Two rows, small font */
   804ac:	f04f 0028 	mov.w	r0, #40	; 0x28
   804b0:	f04f 0100 	mov.w	r1, #0
   804b4:	f240 3425 	movw	r4, #805	; 0x325
   804b8:	f2c0 0408 	movt	r4, #8
   804bc:	47a0      	blx	r4
	LCDwrite(0b00001000, LOW);		/* Display off */
   804be:	f04f 0008 	mov.w	r0, #8
   804c2:	f04f 0100 	mov.w	r1, #0
   804c6:	47a0      	blx	r4
	LCDwrite(0b00000001, LOW);		/* Display clear */
   804c8:	f04f 0001 	mov.w	r0, #1
   804cc:	f04f 0100 	mov.w	r1, #0
   804d0:	47a0      	blx	r4
	
	delay(3000);
   804d2:	f640 30b8 	movw	r0, #3000	; 0xbb8
   804d6:	47b0      	blx	r6
	
	LCDwrite(0b00000110, LOW);		/* Entry mode set: move cursor right, no display shift */
   804d8:	f04f 0006 	mov.w	r0, #6
   804dc:	f04f 0100 	mov.w	r1, #0
   804e0:	47a0      	blx	r4
	LCDwrite(0b00001111 ,LOW);		/* Display on, cursor on, blinking on */
   804e2:	f04f 000f 	mov.w	r0, #15
   804e6:	f04f 0100 	mov.w	r1, #0
   804ea:	47a0      	blx	r4

	all_ok = 1;					/* simple return statement showing that the initialization of the LCD has completed */
	return all_ok;
}
   804ec:	f04f 0001 	mov.w	r0, #1
   804f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000804f4 <LCDClear>:
	
	return mirrored_output;
}

int LCDClear(void)
{
   804f4:	b508      	push	{r3, lr}
	int all_Ok = 0;
	LCDwrite(0b00000001, LOW);
   804f6:	f04f 0001 	mov.w	r0, #1
   804fa:	f04f 0100 	mov.w	r1, #0
   804fe:	f240 3325 	movw	r3, #805	; 0x325
   80502:	f2c0 0308 	movt	r3, #8
   80506:	4798      	blx	r3
	delay(1600);
   80508:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   8050c:	f240 21cd 	movw	r1, #717	; 0x2cd
   80510:	f2c0 0108 	movt	r1, #8
   80514:	4788      	blx	r1
	all_Ok = 1;
	return all_Ok;
}
   80516:	f04f 0001 	mov.w	r0, #1
   8051a:	bd08      	pop	{r3, pc}

0008051c <LCDwriteString>:

/*  
 * Displays strings on the Arduino Shield Display
 */
int LCDwriteString(const char* str)
{
   8051c:	b570      	push	{r4, r5, r6, lr}
   8051e:	4604      	mov	r4, r0
	int all_ok = 0;
	
	/*  
	 * Loops until break
	 */
	while (*str != '\0')
   80520:	7800      	ldrb	r0, [r0, #0]
   80522:	b158      	cbz	r0, 8053c <LCDwriteString+0x20>
	{
		LCDwrite(*str, HIGH);
   80524:	f04f 0601 	mov.w	r6, #1
   80528:	f240 3525 	movw	r5, #805	; 0x325
   8052c:	f2c0 0508 	movt	r5, #8
   80530:	4631      	mov	r1, r6
   80532:	47a8      	blx	r5
	int all_ok = 0;
	
	/*  
	 * Loops until break
	 */
	while (*str != '\0')
   80534:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   80538:	2800      	cmp	r0, #0
   8053a:	d1f9      	bne.n	80530 <LCDwriteString+0x14>
		str++;
	}
	
	all_ok = 1;
	return all_ok;
   8053c:	f04f 0001 	mov.w	r0, #1
   80540:	bd70      	pop	{r4, r5, r6, pc}
   80542:	bf00      	nop

00080544 <LCDwriteInteger>:
	all_Ok = 1;
	return all_Ok;
}

int LCDwriteInteger(int number)
{
   80544:	b500      	push	{lr}
   80546:	b085      	sub	sp, #20
   80548:	4602      	mov	r2, r0
	char output[10];
	sprintf(output, "%d", number);
   8054a:	a801      	add	r0, sp, #4
   8054c:	f243 31f4 	movw	r1, #13300	; 0x33f4
   80550:	f2c0 0108 	movt	r1, #8
   80554:	f241 3339 	movw	r3, #4921	; 0x1339
   80558:	f2c0 0308 	movt	r3, #8
   8055c:	4798      	blx	r3
	LCDwriteString(output);
   8055e:	a801      	add	r0, sp, #4
   80560:	f240 511d 	movw	r1, #1309	; 0x51d
   80564:	f2c0 0108 	movt	r1, #8
   80568:	4788      	blx	r1
	return 1;

}
   8056a:	f04f 0001 	mov.w	r0, #1
   8056e:	b005      	add	sp, #20
   80570:	bd00      	pop	{pc}
   80572:	bf00      	nop

00080574 <main>:
#include "asf.h"
#include "myADC.h"
#include "LCDShield.h"

int main (void)
{
   80574:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	/* Initialize the Arduino Due system */
	sysclk_init();
   80578:	f240 63e5 	movw	r3, #1765	; 0x6e5
   8057c:	f2c0 0308 	movt	r3, #8
   80580:	4798      	blx	r3
	board_init();
   80582:	f240 705d 	movw	r0, #1885	; 0x75d
   80586:	f2c0 0008 	movt	r0, #8
   8058a:	4780      	blx	r0
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8058c:	f04f 000b 	mov.w	r0, #11
   80590:	f640 44b1 	movw	r4, #3249	; 0xcb1
   80594:	f2c0 0408 	movt	r4, #8
   80598:	47a0      	blx	r4
   8059a:	f04f 000c 	mov.w	r0, #12
   8059e:	47a0      	blx	r4
   805a0:	f04f 000d 	mov.w	r0, #13
   805a4:	47a0      	blx	r4
   805a6:	f04f 000e 	mov.w	r0, #14
   805aa:	47a0      	blx	r4
	/* initialize the I/O-port used for transmitting data to the LCD-shield */
	ioport_init();
	/* Initialize the timer used for delays */
	delay_init();
   805ac:	f240 2181 	movw	r1, #641	; 0x281
   805b0:	f2c0 0108 	movt	r1, #8
   805b4:	4788      	blx	r1
	LCDInit();
   805b6:	f240 32e9 	movw	r2, #1001	; 0x3e9
   805ba:	f2c0 0208 	movt	r2, #8
   805be:	4790      	blx	r2
	


	/* Initialize the console UART used from within Atmel Studio*/
	
	if (ADCSetup(0) == 0) {
   805c0:	f04f 0000 	mov.w	r0, #0
   805c4:	f241 152d 	movw	r5, #4397	; 0x112d
   805c8:	f2c0 0508 	movt	r5, #8
   805cc:	47a8      	blx	r5
   805ce:	b948      	cbnz	r0, 805e4 <main+0x70>
		LCDwriteString("ERROR");
   805d0:	f243 30f8 	movw	r0, #13304	; 0x33f8
   805d4:	f2c0 0008 	movt	r0, #8
   805d8:	f240 561d 	movw	r6, #1309	; 0x51d
   805dc:	f2c0 0608 	movt	r6, #8
   805e0:	47b0      	blx	r6
   805e2:	e7fe      	b.n	805e2 <main+0x6e>
		while (1);
	}
	else{
		LCDwriteString("OK");
   805e4:	f243 4000 	movw	r0, #13312	; 0x3400
   805e8:	f2c0 0008 	movt	r0, #8
   805ec:	f240 561d 	movw	r6, #1309	; 0x51d
   805f0:	f2c0 0608 	movt	r6, #8
   805f4:	47b0      	blx	r6
	uint32_t result;
	
	while(1)
	{
		
		adc_start(ADC);
   805f6:	f04f 0600 	mov.w	r6, #0
   805fa:	f2c4 060c 	movt	r6, #16396	; 0x400c
   805fe:	f240 2b25 	movw	fp, #549	; 0x225
   80602:	f2c0 0b08 	movt	fp, #8
		delay(500000);
   80606:	f24a 1720 	movw	r7, #41248	; 0xa120
   8060a:	f2c0 0707 	movt	r7, #7
   8060e:	f240 2acd 	movw	sl, #717	; 0x2cd
   80612:	f2c0 0a08 	movt	sl, #8
		LCDClear();
   80616:	f240 49f5 	movw	r9, #1269	; 0x4f5
   8061a:	f2c0 0908 	movt	r9, #8
		result = adc_get_latest_value(ADC);
   8061e:	f240 2839 	movw	r8, #569	; 0x239
   80622:	f2c0 0808 	movt	r8, #8
	uint32_t result;
	
	while(1)
	{
		
		adc_start(ADC);
   80626:	4630      	mov	r0, r6
   80628:	47d8      	blx	fp
		delay(500000);
   8062a:	4638      	mov	r0, r7
   8062c:	47d0      	blx	sl
		LCDClear();
   8062e:	47c8      	blx	r9
		result = adc_get_latest_value(ADC);
   80630:	4630      	mov	r0, r6
   80632:	47c0      	blx	r8
   80634:	4604      	mov	r4, r0
		
		
		LCDwriteInteger(result);
   80636:	f240 5345 	movw	r3, #1349	; 0x545
   8063a:	f2c0 0308 	movt	r3, #8
   8063e:	4798      	blx	r3
		LCDwriteString("mV");
   80640:	f243 4004 	movw	r0, #13316	; 0x3404
   80644:	f2c0 0008 	movt	r0, #8
   80648:	f240 551d 	movw	r5, #1309	; 0x51d
   8064c:	f2c0 0508 	movt	r5, #8
   80650:	47a8      	blx	r5
		LCDwriteString(" Btn: ");
   80652:	f243 4008 	movw	r0, #13320	; 0x3408
   80656:	f2c0 0008 	movt	r0, #8
   8065a:	47a8      	blx	r5
		
		
		/* The values aren't exactly like calculated
		but given a buffert to avoid errors */
		
		if (result < 50 ){
   8065c:	2c31      	cmp	r4, #49	; 0x31
   8065e:	d805      	bhi.n	8066c <main+0xf8>
			LCDwriteString("right");
   80660:	f243 4010 	movw	r0, #13328	; 0x3410
   80664:	f2c0 0008 	movt	r0, #8
   80668:	47a8      	blx	r5
   8066a:	e7dc      	b.n	80626 <main+0xb2>
		}
		else if (result < 700 ){
   8066c:	f5b4 7f2f 	cmp.w	r4, #700	; 0x2bc
   80670:	d209      	bcs.n	80686 <main+0x112>
			LCDwriteString("up");
   80672:	f243 4018 	movw	r0, #13336	; 0x3418
   80676:	f2c0 0008 	movt	r0, #8
   8067a:	f240 521d 	movw	r2, #1309	; 0x51d
   8067e:	f2c0 0208 	movt	r2, #8
   80682:	4790      	blx	r2
   80684:	e7cf      	b.n	80626 <main+0xb2>
		}
		else if (result < 1500 ){
   80686:	f240 51db 	movw	r1, #1499	; 0x5db
   8068a:	428c      	cmp	r4, r1
   8068c:	d809      	bhi.n	806a2 <main+0x12e>
			LCDwriteString("down");
   8068e:	f243 401c 	movw	r0, #13340	; 0x341c
   80692:	f2c0 0008 	movt	r0, #8
   80696:	f240 511d 	movw	r1, #1309	; 0x51d
   8069a:	f2c0 0108 	movt	r1, #8
   8069e:	4788      	blx	r1
   806a0:	e7c1      	b.n	80626 <main+0xb2>
		}
		else if (result < 1900 ){
   806a2:	f240 726b 	movw	r2, #1899	; 0x76b
   806a6:	4294      	cmp	r4, r2
   806a8:	d809      	bhi.n	806be <main+0x14a>
			LCDwriteString("left");
   806aa:	f243 4024 	movw	r0, #13348	; 0x3424
   806ae:	f2c0 0008 	movt	r0, #8
   806b2:	f240 551d 	movw	r5, #1309	; 0x51d
   806b6:	f2c0 0508 	movt	r5, #8
   806ba:	47a8      	blx	r5
   806bc:	e7b3      	b.n	80626 <main+0xb2>
		}
		else if (result < 2500 ){
   806be:	f640 13c3 	movw	r3, #2499	; 0x9c3
   806c2:	429c      	cmp	r4, r3
			LCDwriteString("select");
   806c4:	bf99      	ittee	ls
   806c6:	f243 402c 	movwls	r0, #13356	; 0x342c
   806ca:	f2c0 0008 	movtls	r0, #8
		}
		else {
			LCDwriteString("none");
   806ce:	f243 4034 	movwhi	r0, #13364	; 0x3434
   806d2:	f2c0 0008 	movthi	r0, #8
   806d6:	f240 541d 	movw	r4, #1309	; 0x51d
   806da:	f2c0 0408 	movt	r4, #8
   806de:	47a0      	blx	r4
   806e0:	e7a1      	b.n	80626 <main+0xb2>
   806e2:	bf00      	nop

000806e4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   806e4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   806e6:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   806ea:	f2c0 5001 	movt	r0, #1281	; 0x501
   806ee:	f241 0339 	movw	r3, #4153	; 0x1039
   806f2:	f2c0 0308 	movt	r3, #8
   806f6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   806f8:	f04f 0000 	mov.w	r0, #0
   806fc:	f04f 013e 	mov.w	r1, #62	; 0x3e
   80700:	f640 4211 	movw	r2, #3089	; 0xc11
   80704:	f2c0 0208 	movt	r2, #8
   80708:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8070a:	f640 4481 	movw	r4, #3201	; 0xc81
   8070e:	f2c0 0408 	movt	r4, #8
   80712:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80714:	2800      	cmp	r0, #0
   80716:	d0fc      	beq.n	80712 <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80718:	f640 4091 	movw	r0, #3217	; 0xc91
   8071c:	f2c0 0008 	movt	r0, #8
   80720:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80722:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80726:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8072a:	f643 7301 	movw	r3, #16129	; 0x3f01
   8072e:	f2c2 030d 	movt	r3, #8205	; 0x200d
   80732:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80734:	f640 44a1 	movw	r4, #3233	; 0xca1
   80738:	f2c0 0408 	movt	r4, #8
   8073c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8073e:	2800      	cmp	r0, #0
   80740:	d0fc      	beq.n	8073c <sysclk_init+0x58>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80742:	f04f 0010 	mov.w	r0, #16
   80746:	f640 3271 	movw	r2, #2929	; 0xb71
   8074a:	f2c0 0208 	movt	r2, #8
   8074e:	4790      	blx	r2
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80750:	f640 6071 	movw	r0, #3697	; 0xe71
   80754:	f2c0 0008 	movt	r0, #8
   80758:	4780      	blx	r0
   8075a:	bd10      	pop	{r4, pc}

0008075c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   8075c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8075e:	f641 2350 	movw	r3, #6736	; 0x1a50
   80762:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80766:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8076a:	605a      	str	r2, [r3, #4]
   8076c:	f04f 000b 	mov.w	r0, #11
   80770:	f640 44b1 	movw	r4, #3249	; 0xcb1
   80774:	f2c0 0408 	movt	r4, #8
   80778:	47a0      	blx	r4
   8077a:	f04f 000c 	mov.w	r0, #12
   8077e:	47a0      	blx	r4
   80780:	f04f 000d 	mov.w	r0, #13
   80784:	47a0      	blx	r4
   80786:	f04f 000e 	mov.w	r0, #14
   8078a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8078c:	f04f 003b 	mov.w	r0, #59	; 0x3b
   80790:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80794:	f640 04e5 	movw	r4, #2277	; 0x8e5
   80798:	f2c0 0408 	movt	r4, #8
   8079c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8079e:	f04f 0055 	mov.w	r0, #85	; 0x55
   807a2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   807a6:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   807a8:	f04f 0056 	mov.w	r0, #86	; 0x56
   807ac:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   807b0:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   807b2:	f04f 0068 	mov.w	r0, #104	; 0x68
   807b6:	f04f 0179 	mov.w	r1, #121	; 0x79
   807ba:	f6c2 0100 	movt	r1, #10240	; 0x2800
   807be:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   807c0:	f04f 005c 	mov.w	r0, #92	; 0x5c
   807c4:	f04f 0101 	mov.w	r1, #1
   807c8:	f6c2 0100 	movt	r1, #10240	; 0x2800
   807cc:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   807ce:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   807d2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   807d6:	f44f 7140 	mov.w	r1, #768	; 0x300
   807da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   807de:	f640 13e5 	movw	r3, #2533	; 0x9e5
   807e2:	f2c0 0308 	movt	r3, #8
   807e6:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   807e8:	f04f 002b 	mov.w	r0, #43	; 0x2b
   807ec:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807f0:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   807f2:	f04f 002a 	mov.w	r0, #42	; 0x2a
   807f6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807fa:	47a0      	blx	r4
   807fc:	bd10      	pop	{r4, pc}
   807fe:	bf00      	nop

00080800 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80800:	b10a      	cbz	r2, 80806 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   80802:	6641      	str	r1, [r0, #100]	; 0x64
   80804:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80806:	6601      	str	r1, [r0, #96]	; 0x60
   80808:	4770      	bx	lr
   8080a:	bf00      	nop

0008080c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8080c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8080e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80812:	d016      	beq.n	80842 <pio_set_peripheral+0x36>
   80814:	d804      	bhi.n	80820 <pio_set_peripheral+0x14>
   80816:	b1c9      	cbz	r1, 8084c <pio_set_peripheral+0x40>
   80818:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   8081c:	d115      	bne.n	8084a <pio_set_peripheral+0x3e>
   8081e:	e009      	b.n	80834 <pio_set_peripheral+0x28>
   80820:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80824:	d012      	beq.n	8084c <pio_set_peripheral+0x40>
   80826:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8082a:	d00f      	beq.n	8084c <pio_set_peripheral+0x40>
   8082c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80830:	d10b      	bne.n	8084a <pio_set_peripheral+0x3e>
   80832:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80834:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80836:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80838:	400b      	ands	r3, r1
   8083a:	ea23 0302 	bic.w	r3, r3, r2
   8083e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80840:	e003      	b.n	8084a <pio_set_peripheral+0x3e>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80842:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80844:	ea42 0103 	orr.w	r1, r2, r3
   80848:	6701      	str	r1, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8084a:	6042      	str	r2, [r0, #4]
   8084c:	4770      	bx	lr
   8084e:	bf00      	nop

00080850 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80850:	6441      	str	r1, [r0, #68]	; 0x44
   80852:	4770      	bx	lr

00080854 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80856:	4604      	mov	r4, r0
   80858:	460d      	mov	r5, r1
   8085a:	4616      	mov	r6, r2
   8085c:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   8085e:	f640 0351 	movw	r3, #2129	; 0x851
   80862:	f2c0 0308 	movt	r3, #8
   80866:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   80868:	4620      	mov	r0, r4
   8086a:	4629      	mov	r1, r5
   8086c:	9a06      	ldr	r2, [sp, #24]
   8086e:	f640 0301 	movw	r3, #2049	; 0x801
   80872:	f2c0 0308 	movt	r3, #8
   80876:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80878:	b10f      	cbz	r7, 8087e <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
   8087a:	6525      	str	r5, [r4, #80]	; 0x50
   8087c:	e000      	b.n	80880 <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8087e:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80880:	b10e      	cbz	r6, 80886 <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
   80882:	6325      	str	r5, [r4, #48]	; 0x30
   80884:	e000      	b.n	80888 <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80886:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80888:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   8088a:	6025      	str	r5, [r4, #0]
   8088c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8088e:	bf00      	nop

00080890 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   80890:	b570      	push	{r4, r5, r6, lr}
   80892:	4604      	mov	r4, r0
   80894:	460d      	mov	r5, r1
   80896:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   80898:	f640 0351 	movw	r3, #2129	; 0x851
   8089c:	f2c0 0308 	movt	r3, #8
   808a0:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   808a2:	4620      	mov	r0, r4
   808a4:	4629      	mov	r1, r5
   808a6:	f006 0201 	and.w	r2, r6, #1
   808aa:	f640 0301 	movw	r3, #2049	; 0x801
   808ae:	f2c0 0308 	movt	r3, #8
   808b2:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   808b4:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
   808b8:	bf14      	ite	ne
   808ba:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   808bc:	6265      	streq	r5, [r4, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   808be:	f016 0f02 	tst.w	r6, #2
   808c2:	d002      	beq.n	808ca <pio_set_input+0x3a>
		p_pio->PIO_SCIFSR = ul_mask;
   808c4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   808c8:	e004      	b.n	808d4 <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   808ca:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_SCIFSR = ul_mask;
   808ce:	bf18      	it	ne
   808d0:	f8c4 5080 	strne.w	r5, [r4, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   808d4:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   808d6:	6025      	str	r5, [r4, #0]
   808d8:	bd70      	pop	{r4, r5, r6, pc}
   808da:	bf00      	nop

000808dc <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   808dc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   808de:	4770      	bx	lr

000808e0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   808e0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   808e2:	4770      	bx	lr

000808e4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   808e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   808e6:	b083      	sub	sp, #12
   808e8:	460d      	mov	r5, r1
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   808ea:	ea4f 1650 	mov.w	r6, r0, lsr #5
   808ee:	f506 1100 	add.w	r1, r6, #2097152	; 0x200000
   808f2:	f201 7207 	addw	r2, r1, #1799	; 0x707
   808f6:	ea4f 2642 	mov.w	r6, r2, lsl #9

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   808fa:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
   808fe:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80902:	d042      	beq.n	8098a <pio_configure_pin+0xa6>
   80904:	d806      	bhi.n	80914 <pio_configure_pin+0x30>
   80906:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8090a:	d00a      	beq.n	80922 <pio_configure_pin+0x3e>
   8090c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80910:	d164      	bne.n	809dc <pio_configure_pin+0xf8>
   80912:	e020      	b.n	80956 <pio_configure_pin+0x72>
   80914:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80918:	d046      	beq.n	809a8 <pio_configure_pin+0xc4>
   8091a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8091e:	d15d      	bne.n	809dc <pio_configure_pin+0xf8>
   80920:	e042      	b.n	809a8 <pio_configure_pin+0xc4>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80922:	f000 071f 	and.w	r7, r0, #31
   80926:	f04f 0401 	mov.w	r4, #1
   8092a:	fa04 f707 	lsl.w	r7, r4, r7
   8092e:	4630      	mov	r0, r6
   80930:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80934:	463a      	mov	r2, r7
   80936:	f640 030d 	movw	r3, #2061	; 0x80d
   8093a:	f2c0 0308 	movt	r3, #8
   8093e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80940:	4630      	mov	r0, r6
   80942:	4639      	mov	r1, r7
   80944:	ea05 0204 	and.w	r2, r5, r4
   80948:	f640 0301 	movw	r3, #2049	; 0x801
   8094c:	f2c0 0308 	movt	r3, #8
   80950:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80952:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   80954:	e044      	b.n	809e0 <pio_configure_pin+0xfc>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80956:	f000 001f 	and.w	r0, r0, #31
   8095a:	f04f 0401 	mov.w	r4, #1
   8095e:	fa04 f700 	lsl.w	r7, r4, r0
   80962:	4630      	mov	r0, r6
   80964:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80968:	463a      	mov	r2, r7
   8096a:	f640 030d 	movw	r3, #2061	; 0x80d
   8096e:	f2c0 0308 	movt	r3, #8
   80972:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80974:	4630      	mov	r0, r6
   80976:	4639      	mov	r1, r7
   80978:	ea05 0204 	and.w	r2, r5, r4
   8097c:	f640 0301 	movw	r3, #2049	; 0x801
   80980:	f2c0 0308 	movt	r3, #8
   80984:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80986:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   80988:	e02a      	b.n	809e0 <pio_configure_pin+0xfc>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8098a:	f000 021f 	and.w	r2, r0, #31
   8098e:	f04f 0401 	mov.w	r4, #1
   80992:	4630      	mov	r0, r6
   80994:	fa04 f102 	lsl.w	r1, r4, r2
   80998:	462a      	mov	r2, r5
   8099a:	f640 0391 	movw	r3, #2193	; 0x891
   8099e:	f2c0 0308 	movt	r3, #8
   809a2:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   809a4:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   809a6:	e01b      	b.n	809e0 <pio_configure_pin+0xfc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   809a8:	f000 021f 	and.w	r2, r0, #31
   809ac:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   809b0:	f005 5360 	and.w	r3, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   809b4:	ea05 0104 	and.w	r1, r5, r4
   809b8:	9100      	str	r1, [sp, #0]
   809ba:	4630      	mov	r0, r6
   809bc:	fa04 f102 	lsl.w	r1, r4, r2
   809c0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   809c4:	bf14      	ite	ne
   809c6:	2200      	movne	r2, #0
   809c8:	2201      	moveq	r2, #1
   809ca:	f3c5 0380 	ubfx	r3, r5, #2, #1
   809ce:	f640 0555 	movw	r5, #2133	; 0x855
   809d2:	f2c0 0508 	movt	r5, #8
   809d6:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   809d8:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   809da:	e001      	b.n	809e0 <pio_configure_pin+0xfc>

	default:
		return 0;
   809dc:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   809e0:	b003      	add	sp, #12
   809e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000809e4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   809e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   809e6:	b083      	sub	sp, #12
   809e8:	4607      	mov	r7, r0
   809ea:	460e      	mov	r6, r1
   809ec:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   809ee:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   809f2:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   809f6:	d036      	beq.n	80a66 <pio_configure_pin_group+0x82>
   809f8:	d806      	bhi.n	80a08 <pio_configure_pin_group+0x24>
   809fa:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   809fe:	d00a      	beq.n	80a16 <pio_configure_pin_group+0x32>
   80a00:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80a04:	d14d      	bne.n	80aa2 <pio_configure_pin_group+0xbe>
   80a06:	e01a      	b.n	80a3e <pio_configure_pin_group+0x5a>
   80a08:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80a0c:	d033      	beq.n	80a76 <pio_configure_pin_group+0x92>
   80a0e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80a12:	d146      	bne.n	80aa2 <pio_configure_pin_group+0xbe>
   80a14:	e02f      	b.n	80a76 <pio_configure_pin_group+0x92>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80a16:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a1a:	4632      	mov	r2, r6
   80a1c:	f640 030d 	movw	r3, #2061	; 0x80d
   80a20:	f2c0 0308 	movt	r3, #8
   80a24:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   80a26:	4638      	mov	r0, r7
   80a28:	4631      	mov	r1, r6
   80a2a:	f005 0201 	and.w	r2, r5, #1
   80a2e:	f640 0301 	movw	r3, #2049	; 0x801
   80a32:	f2c0 0308 	movt	r3, #8
   80a36:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80a38:	f04f 0001 	mov.w	r0, #1
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   80a3c:	e033      	b.n	80aa6 <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80a3e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80a42:	4632      	mov	r2, r6
   80a44:	f640 030d 	movw	r3, #2061	; 0x80d
   80a48:	f2c0 0308 	movt	r3, #8
   80a4c:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   80a4e:	4638      	mov	r0, r7
   80a50:	4631      	mov	r1, r6
   80a52:	f005 0201 	and.w	r2, r5, #1
   80a56:	f640 0301 	movw	r3, #2049	; 0x801
   80a5a:	f2c0 0308 	movt	r3, #8
   80a5e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80a60:	f04f 0001 	mov.w	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   80a64:	e01f      	b.n	80aa6 <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80a66:	f640 0391 	movw	r3, #2193	; 0x891
   80a6a:	f2c0 0308 	movt	r3, #8
   80a6e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80a70:	f04f 0001 	mov.w	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80a74:	e017      	b.n	80aa6 <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80a76:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80a7a:	f005 0001 	and.w	r0, r5, #1
   80a7e:	9000      	str	r0, [sp, #0]
   80a80:	4638      	mov	r0, r7
   80a82:	4631      	mov	r1, r6
   80a84:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80a88:	bf14      	ite	ne
   80a8a:	2200      	movne	r2, #0
   80a8c:	2201      	moveq	r2, #1
   80a8e:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80a92:	f640 0455 	movw	r4, #2133	; 0x855
   80a96:	f2c0 0408 	movt	r4, #8
   80a9a:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80a9c:	f04f 0001 	mov.w	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80aa0:	e001      	b.n	80aa6 <pio_configure_pin_group+0xc2>

	default:
		return 0;
   80aa2:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   80aa6:	b003      	add	sp, #12
   80aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80aaa:	bf00      	nop

00080aac <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80aae:	4604      	mov	r4, r0
   80ab0:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80ab2:	f640 03dd 	movw	r3, #2269	; 0x8dd
   80ab6:	f2c0 0308 	movt	r3, #8
   80aba:	4798      	blx	r3
   80abc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80abe:	4620      	mov	r0, r4
   80ac0:	f640 01e1 	movw	r1, #2273	; 0x8e1
   80ac4:	f2c0 0108 	movt	r1, #8
   80ac8:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
   80aca:	4005      	ands	r5, r0
   80acc:	d014      	beq.n	80af8 <pio_handler_process+0x4c>
   80ace:	4c0b      	ldr	r4, [pc, #44]	; (80afc <pio_handler_process+0x50>)
 * \brief Process an interrupt request on the given PIO controller.
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
   80ad0:	4627      	mov	r7, r4
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80ad2:	f854 0c0c 	ldr.w	r0, [r4, #-12]
   80ad6:	42b0      	cmp	r0, r6
   80ad8:	d10a      	bne.n	80af0 <pio_handler_process+0x44>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80ada:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80ade:	4229      	tst	r1, r5
   80ae0:	d006      	beq.n	80af0 <pio_handler_process+0x44>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80ae2:	6822      	ldr	r2, [r4, #0]
   80ae4:	4630      	mov	r0, r6
   80ae6:	4790      	blx	r2
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80ae8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80aec:	ea25 0503 	bic.w	r5, r5, r3
   80af0:	f104 0410 	add.w	r4, r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80af4:	2d00      	cmp	r5, #0
   80af6:	d1eb      	bne.n	80ad0 <pio_handler_process+0x24>
   80af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80afa:	bf00      	nop
   80afc:	20070870 	.word	0x20070870

00080b00 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80b00:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80b02:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   80b06:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80b0a:	f04f 010b 	mov.w	r1, #11
   80b0e:	f640 23ad 	movw	r3, #2733	; 0xaad
   80b12:	f2c0 0308 	movt	r3, #8
   80b16:	4798      	blx	r3
   80b18:	bd08      	pop	{r3, pc}
   80b1a:	bf00      	nop

00080b1c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80b1c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80b1e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   80b22:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80b26:	f04f 010c 	mov.w	r1, #12
   80b2a:	f640 23ad 	movw	r3, #2733	; 0xaad
   80b2e:	f2c0 0308 	movt	r3, #8
   80b32:	4798      	blx	r3
   80b34:	bd08      	pop	{r3, pc}
   80b36:	bf00      	nop

00080b38 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80b38:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80b3a:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   80b3e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80b42:	f04f 010d 	mov.w	r1, #13
   80b46:	f640 23ad 	movw	r3, #2733	; 0xaad
   80b4a:	f2c0 0308 	movt	r3, #8
   80b4e:	4798      	blx	r3
   80b50:	bd08      	pop	{r3, pc}
   80b52:	bf00      	nop

00080b54 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80b54:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80b56:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
   80b5a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80b5e:	f04f 010e 	mov.w	r1, #14
   80b62:	f640 23ad 	movw	r3, #2733	; 0xaad
   80b66:	f2c0 0308 	movt	r3, #8
   80b6a:	4798      	blx	r3
   80b6c:	bd08      	pop	{r3, pc}
   80b6e:	bf00      	nop

00080b70 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80b70:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80b74:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80b7a:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   80b7e:	4308      	orrs	r0, r1
   80b80:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b82:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80b84:	f010 0f08 	tst.w	r0, #8
   80b88:	d007      	beq.n	80b9a <pmc_switch_mck_to_pllack+0x2a>
   80b8a:	e010      	b.n	80bae <pmc_switch_mck_to_pllack+0x3e>
   80b8c:	f100 33ff 	add.w	r3, r0, #4294967295
   80b90:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80b92:	f010 0f08 	tst.w	r0, #8
   80b96:	d038      	beq.n	80c0a <pmc_switch_mck_to_pllack+0x9a>
   80b98:	e009      	b.n	80bae <pmc_switch_mck_to_pllack+0x3e>
   80b9a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   80b9e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80ba2:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80ba6:	6e91      	ldr	r1, [r2, #104]	; 0x68
   80ba8:	f011 0f08 	tst.w	r1, #8
   80bac:	d0ee      	beq.n	80b8c <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80bae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80bb2:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80bb6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   80bb8:	f022 0303 	bic.w	r3, r2, #3
   80bbc:	f043 0002 	orr.w	r0, r3, #2
   80bc0:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80bc2:	6e89      	ldr	r1, [r1, #104]	; 0x68
   80bc4:	f011 0f08 	tst.w	r1, #8
   80bc8:	d009      	beq.n	80bde <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80bca:	f04f 0000 	mov.w	r0, #0
   80bce:	4770      	bx	lr
   80bd0:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80bd4:	6e91      	ldr	r1, [r2, #104]	; 0x68
   80bd6:	f011 0f08 	tst.w	r1, #8
   80bda:	d013      	beq.n	80c04 <pmc_switch_mck_to_pllack+0x94>
   80bdc:	e009      	b.n	80bf2 <pmc_switch_mck_to_pllack+0x82>
   80bde:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80be2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80be6:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80bea:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80bec:	f010 0f08 	tst.w	r0, #8
   80bf0:	d0ee      	beq.n	80bd0 <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80bf2:	f04f 0000 	mov.w	r0, #0
   80bf6:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80bf8:	f04f 0001 	mov.w	r0, #1
   80bfc:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80bfe:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
   80c02:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80c04:	3b01      	subs	r3, #1
   80c06:	d1f0      	bne.n	80bea <pmc_switch_mck_to_pllack+0x7a>
   80c08:	e7f9      	b.n	80bfe <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80c0a:	1e58      	subs	r0, r3, #1
   80c0c:	d1cb      	bne.n	80ba6 <pmc_switch_mck_to_pllack+0x36>
   80c0e:	e7f3      	b.n	80bf8 <pmc_switch_mck_to_pllack+0x88>

00080c10 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80c10:	b188      	cbz	r0, 80c36 <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80c12:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80c16:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80c1a:	6a08      	ldr	r0, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   80c1c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   80c20:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
   80c24:	4002      	ands	r2, r0
   80c26:	f04f 0302 	mov.w	r3, #2
   80c2a:	f2c0 1337 	movt	r3, #311	; 0x137
   80c2e:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80c32:	6208      	str	r0, [r1, #32]
   80c34:	4770      	bx	lr
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80c36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80c3a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80c3e:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   80c40:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
   80c44:	f020 0203 	bic.w	r2, r0, #3
   80c48:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
   80c4c:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80c50:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   80c54:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80c58:	6218      	str	r0, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80c5a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80c5e:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80c62:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80c64:	f013 0f01 	tst.w	r3, #1
   80c68:	d0fb      	beq.n	80c62 <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   80c6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80c6e:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80c72:	6a08      	ldr	r0, [r1, #32]
   80c74:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
   80c78:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
   80c7c:	620b      	str	r3, [r1, #32]
   80c7e:	4770      	bx	lr

00080c80 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80c80:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80c84:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80c88:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80c8a:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80c8e:	4770      	bx	lr

00080c90 <pmc_disable_pllack>:
/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80c90:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80c94:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80c98:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80c9c:	629a      	str	r2, [r3, #40]	; 0x28
   80c9e:	4770      	bx	lr

00080ca0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80ca0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80ca4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80ca8:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80caa:	f000 0002 	and.w	r0, r0, #2
   80cae:	4770      	bx	lr

00080cb0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80cb0:	282c      	cmp	r0, #44	; 0x2c
   80cb2:	d835      	bhi.n	80d20 <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
   80cb4:	281f      	cmp	r0, #31
   80cb6:	d817      	bhi.n	80ce8 <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80cb8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80cbc:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80cc0:	698a      	ldr	r2, [r1, #24]
   80cc2:	f04f 0301 	mov.w	r3, #1
   80cc6:	fa03 f300 	lsl.w	r3, r3, r0
   80cca:	401a      	ands	r2, r3
   80ccc:	4293      	cmp	r3, r2
   80cce:	d02a      	beq.n	80d26 <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
   80cd0:	f04f 0101 	mov.w	r1, #1
   80cd4:	fa01 f000 	lsl.w	r0, r1, r0
   80cd8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80cdc:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80ce0:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80ce2:	f04f 0000 	mov.w	r0, #0
   80ce6:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80ce8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80cec:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80cf0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   80cf4:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80cf8:	f04f 0101 	mov.w	r1, #1
   80cfc:	fa01 f100 	lsl.w	r1, r1, r0
   80d00:	400a      	ands	r2, r1
   80d02:	4291      	cmp	r1, r2
   80d04:	d012      	beq.n	80d2c <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
   80d06:	f04f 0301 	mov.w	r3, #1
   80d0a:	fa03 f000 	lsl.w	r0, r3, r0
   80d0e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80d12:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80d16:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   80d1a:	f04f 0000 	mov.w	r0, #0
   80d1e:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80d20:	f04f 0001 	mov.w	r0, #1
   80d24:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80d26:	f04f 0000 	mov.w	r0, #0
   80d2a:	4770      	bx	lr
   80d2c:	f04f 0000 	mov.w	r0, #0
}
   80d30:	4770      	bx	lr
   80d32:	bf00      	nop

00080d34 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80d34:	e7fe      	b.n	80d34 <Dummy_Handler>
   80d36:	bf00      	nop

00080d38 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80d38:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80d3a:	f240 0300 	movw	r3, #0
   80d3e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80d42:	f243 5200 	movw	r2, #13568	; 0x3500
   80d46:	f2c0 0208 	movt	r2, #8
   80d4a:	429a      	cmp	r2, r3
   80d4c:	d003      	beq.n	80d56 <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   80d4e:	4840      	ldr	r0, [pc, #256]	; (80e50 <Reset_Handler+0x118>)
   80d50:	4940      	ldr	r1, [pc, #256]	; (80e54 <Reset_Handler+0x11c>)
   80d52:	4281      	cmp	r1, r0
   80d54:	d304      	bcc.n	80d60 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80d56:	4b40      	ldr	r3, [pc, #256]	; (80e58 <Reset_Handler+0x120>)
   80d58:	4a40      	ldr	r2, [pc, #256]	; (80e5c <Reset_Handler+0x124>)
   80d5a:	429a      	cmp	r2, r3
   80d5c:	d325      	bcc.n	80daa <Reset_Handler+0x72>
   80d5e:	e042      	b.n	80de6 <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   80d60:	4d3f      	ldr	r5, [pc, #252]	; (80e60 <Reset_Handler+0x128>)
   80d62:	4c40      	ldr	r4, [pc, #256]	; (80e64 <Reset_Handler+0x12c>)
   80d64:	1b63      	subs	r3, r4, r5
   80d66:	f023 0503 	bic.w	r5, r3, #3
   80d6a:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   80d6e:	f240 0200 	movw	r2, #0
   80d72:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80d76:	f243 5100 	movw	r1, #13568	; 0x3500
   80d7a:	f2c0 0108 	movt	r1, #8
   80d7e:	f105 0004 	add.w	r0, r5, #4
   80d82:	f3c5 0480 	ubfx	r4, r5, #2, #1
   80d86:	585d      	ldr	r5, [r3, r1]
   80d88:	509d      	str	r5, [r3, r2]
   80d8a:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80d8e:	4283      	cmp	r3, r0
   80d90:	d155      	bne.n	80e3e <Reset_Handler+0x106>
   80d92:	e7e0      	b.n	80d56 <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   80d94:	585d      	ldr	r5, [r3, r1]
   80d96:	509d      	str	r5, [r3, r2]
   80d98:	f103 0304 	add.w	r3, r3, #4
   80d9c:	585c      	ldr	r4, [r3, r1]
   80d9e:	509c      	str	r4, [r3, r2]
   80da0:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80da4:	4283      	cmp	r3, r0
   80da6:	d1f5      	bne.n	80d94 <Reset_Handler+0x5c>
   80da8:	e7d5      	b.n	80d56 <Reset_Handler+0x1e>
   80daa:	4d2f      	ldr	r5, [pc, #188]	; (80e68 <Reset_Handler+0x130>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   80dac:	492f      	ldr	r1, [pc, #188]	; (80e6c <Reset_Handler+0x134>)
   80dae:	1b48      	subs	r0, r1, r5
   80db0:	f020 0403 	bic.w	r4, r0, #3
   80db4:	f640 0348 	movw	r3, #2120	; 0x848
   80db8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80dbc:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80dbe:	f04f 0100 	mov.w	r1, #0
   80dc2:	1b50      	subs	r0, r2, r5
   80dc4:	f1a0 0004 	sub.w	r0, r0, #4
   80dc8:	f3c0 0480 	ubfx	r4, r0, #2, #1
   80dcc:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80dd0:	4295      	cmp	r5, r2
   80dd2:	d12d      	bne.n	80e30 <Reset_Handler+0xf8>
   80dd4:	e007      	b.n	80de6 <Reset_Handler+0xae>
   80dd6:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
   80dda:	6069      	str	r1, [r5, #4]
   80ddc:	f105 0508 	add.w	r5, r5, #8
   80de0:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80de2:	4295      	cmp	r5, r2
   80de4:	d1f7      	bne.n	80dd6 <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80de6:	f240 0500 	movw	r5, #0
   80dea:	f2c0 0508 	movt	r5, #8
   80dee:	f025 4260 	bic.w	r2, r5, #3758096384	; 0xe0000000
   80df2:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   80df6:	f44f 406d 	mov.w	r0, #60672	; 0xed00
   80dfa:	f2ce 0000 	movt	r0, #57344	; 0xe000
   80dfe:	6081      	str	r1, [r0, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80e00:	f105 4460 	add.w	r4, r5, #3758096384	; 0xe0000000
   80e04:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   80e08:	d207      	bcs.n	80e1a <Reset_Handler+0xe2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80e0a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   80e0e:	f2ce 0300 	movt	r3, #57344	; 0xe000
   80e12:	689d      	ldr	r5, [r3, #8]
   80e14:	f045 5200 	orr.w	r2, r5, #536870912	; 0x20000000
   80e18:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80e1a:	f241 21ad 	movw	r1, #4781	; 0x12ad
   80e1e:	f2c0 0108 	movt	r1, #8
   80e22:	4788      	blx	r1

	/* Branch to main function */
	main();
   80e24:	f240 5075 	movw	r0, #1397	; 0x575
   80e28:	f2c0 0008 	movt	r0, #8
   80e2c:	4780      	blx	r0
   80e2e:	e7fe      	b.n	80e2e <Reset_Handler+0xf6>
   80e30:	2c00      	cmp	r4, #0
   80e32:	d0d0      	beq.n	80dd6 <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80e34:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80e38:	4295      	cmp	r5, r2
   80e3a:	d1cc      	bne.n	80dd6 <Reset_Handler+0x9e>
   80e3c:	e7d3      	b.n	80de6 <Reset_Handler+0xae>
   80e3e:	2c00      	cmp	r4, #0
   80e40:	d0a8      	beq.n	80d94 <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   80e42:	585c      	ldr	r4, [r3, r1]
   80e44:	509c      	str	r4, [r3, r2]
   80e46:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80e4a:	4283      	cmp	r3, r0
   80e4c:	d1a2      	bne.n	80d94 <Reset_Handler+0x5c>
   80e4e:	e782      	b.n	80d56 <Reset_Handler+0x1e>
   80e50:	20070848 	.word	0x20070848
   80e54:	20070000 	.word	0x20070000
   80e58:	20070910 	.word	0x20070910
   80e5c:	20070848 	.word	0x20070848
   80e60:	20070004 	.word	0x20070004
   80e64:	2007084b 	.word	0x2007084b
   80e68:	20070844 	.word	0x20070844
   80e6c:	2007090b 	.word	0x2007090b

00080e70 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80e70:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80e74:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80e78:	6b18      	ldr	r0, [r3, #48]	; 0x30
   80e7a:	f000 0103 	and.w	r1, r0, #3
   80e7e:	2903      	cmp	r1, #3
   80e80:	f200 80b1 	bhi.w	80fe6 <SystemCoreClockUpdate+0x176>
   80e84:	e8df f001 	tbb	[pc, r1]
   80e88:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80e8c:	f641 2010 	movw	r0, #6672	; 0x1a10
   80e90:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80e94:	6941      	ldr	r1, [r0, #20]
   80e96:	f011 0f80 	tst.w	r1, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80e9a:	f240 0300 	movw	r3, #0
   80e9e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80ea2:	bf14      	ite	ne
   80ea4:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80ea8:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80eac:	601a      	str	r2, [r3, #0]
   80eae:	e09a      	b.n	80fe6 <SystemCoreClockUpdate+0x176>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80eb0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80eb4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80eb8:	6a18      	ldr	r0, [r3, #32]
   80eba:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   80ebe:	d009      	beq.n	80ed4 <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80ec0:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   80ec4:	f2c0 03b7 	movt	r3, #183	; 0xb7
   80ec8:	f240 0200 	movw	r2, #0
   80ecc:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80ed0:	6013      	str	r3, [r2, #0]
   80ed2:	e088      	b.n	80fe6 <SystemCoreClockUpdate+0x176>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80ed4:	f44f 6110 	mov.w	r1, #2304	; 0x900
   80ed8:	f2c0 013d 	movt	r1, #61	; 0x3d
   80edc:	f240 0200 	movw	r2, #0
   80ee0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80ee4:	6011      	str	r1, [r2, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80ee6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80eea:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80eee:	6a18      	ldr	r0, [r3, #32]
   80ef0:	f000 0170 	and.w	r1, r0, #112	; 0x70
   80ef4:	2910      	cmp	r1, #16
   80ef6:	d002      	beq.n	80efe <SystemCoreClockUpdate+0x8e>
   80ef8:	2920      	cmp	r1, #32
   80efa:	d174      	bne.n	80fe6 <SystemCoreClockUpdate+0x176>
   80efc:	e009      	b.n	80f12 <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80efe:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   80f02:	f2c0 007a 	movt	r0, #122	; 0x7a
   80f06:	f240 0100 	movw	r1, #0
   80f0a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80f0e:	6008      	str	r0, [r1, #0]
				break;
   80f10:	e069      	b.n	80fe6 <SystemCoreClockUpdate+0x176>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80f12:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   80f16:	f2c0 03b7 	movt	r3, #183	; 0xb7
   80f1a:	f240 0200 	movw	r2, #0
   80f1e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80f22:	6013      	str	r3, [r2, #0]
				break;
   80f24:	e05f      	b.n	80fe6 <SystemCoreClockUpdate+0x176>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80f26:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80f2a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80f2e:	6a13      	ldr	r3, [r2, #32]
   80f30:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80f34:	d009      	beq.n	80f4a <SystemCoreClockUpdate+0xda>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80f36:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   80f3a:	f2c0 01b7 	movt	r1, #183	; 0xb7
   80f3e:	f240 0200 	movw	r2, #0
   80f42:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80f46:	6011      	str	r1, [r2, #0]
   80f48:	e027      	b.n	80f9a <SystemCoreClockUpdate+0x12a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80f4a:	f44f 6010 	mov.w	r0, #2304	; 0x900
   80f4e:	f2c0 003d 	movt	r0, #61	; 0x3d
   80f52:	f240 0100 	movw	r1, #0
   80f56:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80f5a:	6008      	str	r0, [r1, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80f5c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80f60:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80f64:	6a13      	ldr	r3, [r2, #32]
   80f66:	f003 0070 	and.w	r0, r3, #112	; 0x70
   80f6a:	2810      	cmp	r0, #16
   80f6c:	d002      	beq.n	80f74 <SystemCoreClockUpdate+0x104>
   80f6e:	2820      	cmp	r0, #32
   80f70:	d113      	bne.n	80f9a <SystemCoreClockUpdate+0x12a>
   80f72:	e009      	b.n	80f88 <SystemCoreClockUpdate+0x118>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80f74:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   80f78:	f2c0 037a 	movt	r3, #122	; 0x7a
   80f7c:	f240 0000 	movw	r0, #0
   80f80:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80f84:	6003      	str	r3, [r0, #0]
				break;
   80f86:	e008      	b.n	80f9a <SystemCoreClockUpdate+0x12a>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80f88:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   80f8c:	f2c0 01b7 	movt	r1, #183	; 0xb7
   80f90:	f240 0200 	movw	r2, #0
   80f94:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80f98:	6011      	str	r1, [r2, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80f9a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80f9e:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80fa2:	6b18      	ldr	r0, [r3, #48]	; 0x30
   80fa4:	f000 0103 	and.w	r1, r0, #3
   80fa8:	2902      	cmp	r1, #2
   80faa:	d113      	bne.n	80fd4 <SystemCoreClockUpdate+0x164>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80fac:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80fb0:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80fb4:	6a88      	ldr	r0, [r1, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80fb6:	6a89      	ldr	r1, [r1, #40]	; 0x28
   80fb8:	f240 0300 	movw	r3, #0
   80fbc:	f2c2 0307 	movt	r3, #8199	; 0x2007
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80fc0:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80fc4:	681a      	ldr	r2, [r3, #0]
   80fc6:	fb00 2002 	mla	r0, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80fca:	b2c9      	uxtb	r1, r1
   80fcc:	fbb0 f2f1 	udiv	r2, r0, r1
   80fd0:	601a      	str	r2, [r3, #0]
   80fd2:	e008      	b.n	80fe6 <SystemCoreClockUpdate+0x176>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80fd4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
   80fd8:	f6c0 634e 	movt	r3, #3662	; 0xe4e
   80fdc:	f240 0200 	movw	r2, #0
   80fe0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80fe4:	6013      	str	r3, [r2, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80fe6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80fea:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80fee:	6b10      	ldr	r0, [r2, #48]	; 0x30
   80ff0:	f000 0170 	and.w	r1, r0, #112	; 0x70
   80ff4:	2970      	cmp	r1, #112	; 0x70
   80ff6:	d10e      	bne.n	81016 <SystemCoreClockUpdate+0x1a6>
		SystemCoreClock /= 3U;
   80ff8:	f240 0300 	movw	r3, #0
   80ffc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81000:	6818      	ldr	r0, [r3, #0]
   81002:	f64a 22ab 	movw	r2, #43691	; 0xaaab
   81006:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
   8100a:	fba2 0100 	umull	r0, r1, r2, r0
   8100e:	ea4f 0051 	mov.w	r0, r1, lsr #1
   81012:	6018      	str	r0, [r3, #0]
   81014:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81016:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8101a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8101e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81020:	f240 0000 	movw	r0, #0
   81024:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81028:	f3c2 1102 	ubfx	r1, r2, #4, #3
   8102c:	6803      	ldr	r3, [r0, #0]
   8102e:	fa23 f301 	lsr.w	r3, r3, r1
   81032:	6003      	str	r3, [r0, #0]
   81034:	4770      	bx	lr
   81036:	bf00      	nop

00081038 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   81038:	f64e 23bf 	movw	r3, #60095	; 0xeabf
   8103c:	f2c0 1321 	movt	r3, #289	; 0x121
   81040:	4298      	cmp	r0, r3
   81042:	d80c      	bhi.n	8105e <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   81044:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   81048:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8104c:	f04f 0000 	mov.w	r0, #0
   81050:	6018      	str	r0, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   81052:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   81056:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8105a:	6008      	str	r0, [r1, #0]
   8105c:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   8105e:	f24f 017f 	movw	r1, #61567	; 0xf07f
   81062:	f2c0 21fa 	movt	r1, #762	; 0x2fa
   81066:	4288      	cmp	r0, r1
   81068:	d80c      	bhi.n	81084 <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   8106a:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   8106e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81072:	f44f 7180 	mov.w	r1, #256	; 0x100
   81076:	6001      	str	r1, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   81078:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   8107c:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81080:	6011      	str	r1, [r2, #0]
   81082:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   81084:	f648 73ff 	movw	r3, #36863	; 0x8fff
   81088:	f2c0 33d0 	movt	r3, #976	; 0x3d0
   8108c:	4298      	cmp	r0, r3
   8108e:	d80c      	bhi.n	810aa <system_init_flash+0x72>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   81090:	f44f 6120 	mov.w	r1, #2560	; 0xa00
   81094:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81098:	f44f 7200 	mov.w	r2, #512	; 0x200
   8109c:	600a      	str	r2, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   8109e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   810a2:	f2c4 030e 	movt	r3, #16398	; 0x400e
   810a6:	601a      	str	r2, [r3, #0]
   810a8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   810aa:	f24b 31ff 	movw	r1, #46079	; 0xb3ff
   810ae:	f2c0 41c4 	movt	r1, #1220	; 0x4c4
   810b2:	4288      	cmp	r0, r1
   810b4:	d80c      	bhi.n	810d0 <system_init_flash+0x98>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   810b6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   810ba:	f2c4 030e 	movt	r3, #16398	; 0x400e
   810be:	f44f 7240 	mov.w	r2, #768	; 0x300
   810c2:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   810c4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   810c8:	f2c4 000e 	movt	r0, #16398	; 0x400e
   810cc:	6002      	str	r2, [r0, #0]
   810ce:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   810d0:	f644 237f 	movw	r3, #19071	; 0x4a7f
   810d4:	f2c0 535d 	movt	r3, #1373	; 0x55d
   810d8:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   810da:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   810de:	f2c4 000e 	movt	r0, #16398	; 0x400e
   810e2:	bf94      	ite	ls
   810e4:	f44f 6280 	movls.w	r2, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   810e8:	f44f 62a0 	movhi.w	r2, #1280	; 0x500
   810ec:	6002      	str	r2, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   810ee:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   810f2:	f2c4 010e 	movt	r1, #16398	; 0x400e
   810f6:	600a      	str	r2, [r1, #0]
   810f8:	4770      	bx	lr
   810fa:	bf00      	nop

000810fc <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   810fc:	f640 03d4 	movw	r3, #2260	; 0x8d4
   81100:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81104:	6819      	ldr	r1, [r3, #0]
   81106:	b941      	cbnz	r1, 8111a <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
   81108:	f640 03d4 	movw	r3, #2260	; 0x8d4
   8110c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81110:	f642 1210 	movw	r2, #10512	; 0x2910
   81114:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81118:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8111a:	f640 01d4 	movw	r1, #2260	; 0x8d4
   8111e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81122:	680b      	ldr	r3, [r1, #0]

	heap += incr;
   81124:	1818      	adds	r0, r3, r0
   81126:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap;
}
   81128:	4618      	mov	r0, r3
   8112a:	4770      	bx	lr

0008112c <ADCSetup>:


/*
*	Sets all available A/D channels to an array
*/
{
   8112c:	b570      	push	{r4, r5, r6, lr}
   8112e:	b08c      	sub	sp, #48	; 0x30
   81130:	4606      	mov	r6, r0
	int ADC_Channels[] = {ADC_CHANNEL_7,ADC_CHANNEL_6,ADC_CHANNEL_5,ADC_CHANNEL_4,
   81132:	466c      	mov	r4, sp
   81134:	f243 453c 	movw	r5, #13372	; 0x343c
   81138:	f2c0 0508 	movt	r5, #8
   8113c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8113e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81144:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   81148:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ADC_CHANNEL_3,ADC_CHANNEL_2,ADC_CHANNEL_1,ADC_CHANNEL_0,ADC_CHANNEL_10,
	ADC_CHANNEL_11,ADC_CHANNEL_12,ADC_CHANNEL_13};


	/* Enable the specified peripheral clock (ADC clock) */
	if (pmc_enable_periph_clk(ID_ADC) == 0) {
   8114c:	f04f 0025 	mov.w	r0, #37	; 0x25
   81150:	f640 43b1 	movw	r3, #3249	; 0xcb1
   81154:	f2c0 0308 	movt	r3, #8
   81158:	4798      	blx	r3
   8115a:	2800      	cmp	r0, #0
   8115c:	d13e      	bne.n	811dc <ADCSetup+0xb0>
		adc_init(ADC, sysclk_get_main_hz(), 14000000, 8 );
   8115e:	f04f 0400 	mov.w	r4, #0
   81162:	f2c4 040c 	movt	r4, #16396	; 0x400c
   81166:	4620      	mov	r0, r4
   81168:	f44f 41f4 	mov.w	r1, #31232	; 0x7a00
   8116c:	f6c0 2103 	movt	r1, #2563	; 0xa03
   81170:	f649 7280 	movw	r2, #40832	; 0x9f80
   81174:	f2c0 02d5 	movt	r2, #213	; 0xd5
   81178:	f04f 0308 	mov.w	r3, #8
   8117c:	f240 15a5 	movw	r5, #421	; 0x1a5
   81180:	f2c0 0508 	movt	r5, #8
   81184:	47a8      	blx	r5
		adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1);
   81186:	4620      	mov	r0, r4
   81188:	f04f 0100 	mov.w	r1, #0
   8118c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   81190:	f04f 0301 	mov.w	r3, #1
   81194:	f240 2505 	movw	r5, #517	; 0x205
   81198:	f2c0 0508 	movt	r5, #8
   8119c:	47a8      	blx	r5
		adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);
   8119e:	4620      	mov	r0, r4
   811a0:	f04f 0100 	mov.w	r1, #0
   811a4:	f240 12e5 	movw	r2, #485	; 0x1e5
   811a8:	f2c0 0208 	movt	r2, #8
   811ac:	4790      	blx	r2
		adc_enable_channel(ADC, ADC_Channels[DuePinNr]);
   811ae:	a80c      	add	r0, sp, #48	; 0x30
   811b0:	eb00 0686 	add.w	r6, r0, r6, lsl #2
   811b4:	4620      	mov	r0, r4
   811b6:	f816 1c30 	ldrb.w	r1, [r6, #-48]
   811ba:	f240 232d 	movw	r3, #557	; 0x22d
   811be:	f2c0 0308 	movt	r3, #8
   811c2:	4798      	blx	r3
		adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
   811c4:	4620      	mov	r0, r4
   811c6:	f04f 0100 	mov.w	r1, #0
   811ca:	460a      	mov	r2, r1
   811cc:	f240 13f5 	movw	r3, #501	; 0x1f5
   811d0:	f2c0 0308 	movt	r3, #8
   811d4:	4798      	blx	r3
		return 1;
   811d6:	f04f 0001 	mov.w	r0, #1
   811da:	e001      	b.n	811e0 <ADCSetup+0xb4>
	}
	return 0;
   811dc:	f04f 0000 	mov.w	r0, #0
}
   811e0:	b00c      	add	sp, #48	; 0x30
   811e2:	bd70      	pop	{r4, r5, r6, pc}

000811e4 <__register_exitproc>:
   811e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   811e8:	4698      	mov	r8, r3
   811ea:	4b23      	ldr	r3, [pc, #140]	; (81278 <__register_exitproc+0x94>)
   811ec:	4606      	mov	r6, r0
   811ee:	681c      	ldr	r4, [r3, #0]
   811f0:	460f      	mov	r7, r1
   811f2:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   811f6:	4691      	mov	r9, r2
   811f8:	b918      	cbnz	r0, 81202 <__register_exitproc+0x1e>
   811fa:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   811fe:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   81202:	6841      	ldr	r1, [r0, #4]
   81204:	291f      	cmp	r1, #31
   81206:	dd16      	ble.n	81236 <__register_exitproc+0x52>
   81208:	481c      	ldr	r0, [pc, #112]	; (8127c <__register_exitproc+0x98>)
   8120a:	b918      	cbnz	r0, 81214 <__register_exitproc+0x30>
   8120c:	f04f 30ff 	mov.w	r0, #4294967295
   81210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81214:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81218:	f3af 8000 	nop.w
   8121c:	2800      	cmp	r0, #0
   8121e:	d0f5      	beq.n	8120c <__register_exitproc+0x28>
   81220:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   81224:	2500      	movs	r5, #0
   81226:	6045      	str	r5, [r0, #4]
   81228:	6002      	str	r2, [r0, #0]
   8122a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   8122e:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   81232:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   81236:	b1b6      	cbz	r6, 81266 <__register_exitproc+0x82>
   81238:	6844      	ldr	r4, [r0, #4]
   8123a:	2201      	movs	r2, #1
   8123c:	fa02 f204 	lsl.w	r2, r2, r4
   81240:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   81244:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   81248:	4311      	orrs	r1, r2
   8124a:	2e02      	cmp	r6, #2
   8124c:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
   81250:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   81254:	461c      	mov	r4, r3
   81256:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
   8125a:	d104      	bne.n	81266 <__register_exitproc+0x82>
   8125c:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   81260:	431a      	orrs	r2, r3
   81262:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   81266:	6841      	ldr	r1, [r0, #4]
   81268:	1c8b      	adds	r3, r1, #2
   8126a:	1c4a      	adds	r2, r1, #1
   8126c:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
   81270:	6042      	str	r2, [r0, #4]
   81272:	2000      	movs	r0, #0
   81274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81278:	0008346c 	.word	0x0008346c
   8127c:	00000000 	.word	0x00000000

00081280 <__libc_fini_array>:
   81280:	b570      	push	{r4, r5, r6, lr}
   81282:	4b08      	ldr	r3, [pc, #32]	; (812a4 <__libc_fini_array+0x24>)
   81284:	4c08      	ldr	r4, [pc, #32]	; (812a8 <__libc_fini_array+0x28>)
   81286:	2500      	movs	r5, #0
   81288:	1ae0      	subs	r0, r4, r3
   8128a:	1084      	asrs	r4, r0, #2
   8128c:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   81290:	3d04      	subs	r5, #4
   81292:	b11c      	cbz	r4, 8129c <__libc_fini_array+0x1c>
   81294:	5972      	ldr	r2, [r6, r5]
   81296:	4790      	blx	r2
   81298:	3c01      	subs	r4, #1
   8129a:	e7f9      	b.n	81290 <__libc_fini_array+0x10>
   8129c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   812a0:	f002 b922 	b.w	834e8 <_fini>
   812a4:	000834f4 	.word	0x000834f4
   812a8:	000834f8 	.word	0x000834f8

000812ac <__libc_init_array>:
   812ac:	b538      	push	{r3, r4, r5, lr}
   812ae:	4d0e      	ldr	r5, [pc, #56]	; (812e8 <__libc_init_array+0x3c>)
   812b0:	4b0e      	ldr	r3, [pc, #56]	; (812ec <__libc_init_array+0x40>)
   812b2:	2400      	movs	r4, #0
   812b4:	1ae8      	subs	r0, r5, r3
   812b6:	1085      	asrs	r5, r0, #2
   812b8:	42ac      	cmp	r4, r5
   812ba:	d005      	beq.n	812c8 <__libc_init_array+0x1c>
   812bc:	490b      	ldr	r1, [pc, #44]	; (812ec <__libc_init_array+0x40>)
   812be:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   812c2:	4790      	blx	r2
   812c4:	3401      	adds	r4, #1
   812c6:	e7f7      	b.n	812b8 <__libc_init_array+0xc>
   812c8:	f002 f904 	bl	834d4 <_init>
   812cc:	4908      	ldr	r1, [pc, #32]	; (812f0 <__libc_init_array+0x44>)
   812ce:	4a09      	ldr	r2, [pc, #36]	; (812f4 <__libc_init_array+0x48>)
   812d0:	1a54      	subs	r4, r2, r1
   812d2:	10a5      	asrs	r5, r4, #2
   812d4:	2400      	movs	r4, #0
   812d6:	42ac      	cmp	r4, r5
   812d8:	d005      	beq.n	812e6 <__libc_init_array+0x3a>
   812da:	4b05      	ldr	r3, [pc, #20]	; (812f0 <__libc_init_array+0x44>)
   812dc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   812e0:	4780      	blx	r0
   812e2:	3401      	adds	r4, #1
   812e4:	e7f7      	b.n	812d6 <__libc_init_array+0x2a>
   812e6:	bd38      	pop	{r3, r4, r5, pc}
   812e8:	000834e0 	.word	0x000834e0
   812ec:	000834e0 	.word	0x000834e0
   812f0:	000834e0 	.word	0x000834e0
   812f4:	000834e8 	.word	0x000834e8

000812f8 <_sprintf_r>:
   812f8:	b40c      	push	{r2, r3}
   812fa:	b510      	push	{r4, lr}
   812fc:	b09c      	sub	sp, #112	; 0x70
   812fe:	ab1e      	add	r3, sp, #120	; 0x78
   81300:	9102      	str	r1, [sp, #8]
   81302:	9106      	str	r1, [sp, #24]
   81304:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   81308:	f853 2b04 	ldr.w	r2, [r3], #4
   8130c:	9104      	str	r1, [sp, #16]
   8130e:	9107      	str	r1, [sp, #28]
   81310:	f64f 71ff 	movw	r1, #65535	; 0xffff
   81314:	f8ad 1016 	strh.w	r1, [sp, #22]
   81318:	f44f 7402 	mov.w	r4, #520	; 0x208
   8131c:	a902      	add	r1, sp, #8
   8131e:	9301      	str	r3, [sp, #4]
   81320:	f8ad 4014 	strh.w	r4, [sp, #20]
   81324:	f000 f834 	bl	81390 <_svfprintf_r>
   81328:	9b02      	ldr	r3, [sp, #8]
   8132a:	2200      	movs	r2, #0
   8132c:	701a      	strb	r2, [r3, #0]
   8132e:	b01c      	add	sp, #112	; 0x70
   81330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81334:	b002      	add	sp, #8
   81336:	4770      	bx	lr

00081338 <sprintf>:
   81338:	b40e      	push	{r1, r2, r3}
   8133a:	b500      	push	{lr}
   8133c:	b09c      	sub	sp, #112	; 0x70
   8133e:	9002      	str	r0, [sp, #8]
   81340:	9006      	str	r0, [sp, #24]
   81342:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   81346:	ab1d      	add	r3, sp, #116	; 0x74
   81348:	9004      	str	r0, [sp, #16]
   8134a:	9007      	str	r0, [sp, #28]
   8134c:	f44f 7102 	mov.w	r1, #520	; 0x208
   81350:	480a      	ldr	r0, [pc, #40]	; (8137c <sprintf+0x44>)
   81352:	f853 2b04 	ldr.w	r2, [r3], #4
   81356:	f8ad 1014 	strh.w	r1, [sp, #20]
   8135a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8135e:	f8ad 1016 	strh.w	r1, [sp, #22]
   81362:	6800      	ldr	r0, [r0, #0]
   81364:	a902      	add	r1, sp, #8
   81366:	9301      	str	r3, [sp, #4]
   81368:	f000 f812 	bl	81390 <_svfprintf_r>
   8136c:	9b02      	ldr	r3, [sp, #8]
   8136e:	2200      	movs	r2, #0
   81370:	701a      	strb	r2, [r3, #0]
   81372:	b01c      	add	sp, #112	; 0x70
   81374:	f85d eb04 	ldr.w	lr, [sp], #4
   81378:	b003      	add	sp, #12
   8137a:	4770      	bx	lr
   8137c:	20070008 	.word	0x20070008

00081380 <strlen>:
   81380:	4603      	mov	r3, r0
   81382:	f813 2b01 	ldrb.w	r2, [r3], #1
   81386:	2a00      	cmp	r2, #0
   81388:	d1fb      	bne.n	81382 <strlen+0x2>
   8138a:	1a18      	subs	r0, r3, r0
   8138c:	3801      	subs	r0, #1
   8138e:	4770      	bx	lr

00081390 <_svfprintf_r>:
   81390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81394:	461e      	mov	r6, r3
   81396:	898b      	ldrh	r3, [r1, #12]
   81398:	4689      	mov	r9, r1
   8139a:	f003 0180 	and.w	r1, r3, #128	; 0x80
   8139e:	4614      	mov	r4, r2
   813a0:	b20a      	sxth	r2, r1
   813a2:	b0a9      	sub	sp, #164	; 0xa4
   813a4:	4683      	mov	fp, r0
   813a6:	b19a      	cbz	r2, 813d0 <_svfprintf_r+0x40>
   813a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
   813ac:	b983      	cbnz	r3, 813d0 <_svfprintf_r+0x40>
   813ae:	2140      	movs	r1, #64	; 0x40
   813b0:	f000 fcfe 	bl	81db0 <_malloc_r>
   813b4:	f8c9 0000 	str.w	r0, [r9]
   813b8:	f8c9 0010 	str.w	r0, [r9, #16]
   813bc:	b928      	cbnz	r0, 813ca <_svfprintf_r+0x3a>
   813be:	220c      	movs	r2, #12
   813c0:	f8cb 2000 	str.w	r2, [fp]
   813c4:	f04f 30ff 	mov.w	r0, #4294967295
   813c8:	e3da      	b.n	81b80 <_svfprintf_r+0x7f0>
   813ca:	2040      	movs	r0, #64	; 0x40
   813cc:	f8c9 0014 	str.w	r0, [r9, #20]
   813d0:	2100      	movs	r1, #0
   813d2:	ad18      	add	r5, sp, #96	; 0x60
   813d4:	950b      	str	r5, [sp, #44]	; 0x2c
   813d6:	910d      	str	r1, [sp, #52]	; 0x34
   813d8:	910c      	str	r1, [sp, #48]	; 0x30
   813da:	9401      	str	r4, [sp, #4]
   813dc:	9105      	str	r1, [sp, #20]
   813de:	9104      	str	r1, [sp, #16]
   813e0:	46a8      	mov	r8, r5
   813e2:	9b01      	ldr	r3, [sp, #4]
   813e4:	461c      	mov	r4, r3
   813e6:	f813 2b01 	ldrb.w	r2, [r3], #1
   813ea:	b91a      	cbnz	r2, 813f4 <_svfprintf_r+0x64>
   813ec:	9801      	ldr	r0, [sp, #4]
   813ee:	1a25      	subs	r5, r4, r0
   813f0:	d103      	bne.n	813fa <_svfprintf_r+0x6a>
   813f2:	e01d      	b.n	81430 <_svfprintf_r+0xa0>
   813f4:	2a25      	cmp	r2, #37	; 0x25
   813f6:	d1f5      	bne.n	813e4 <_svfprintf_r+0x54>
   813f8:	e7f8      	b.n	813ec <_svfprintf_r+0x5c>
   813fa:	9a01      	ldr	r2, [sp, #4]
   813fc:	990d      	ldr	r1, [sp, #52]	; 0x34
   813fe:	e888 0024 	stmia.w	r8, {r2, r5}
   81402:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   81404:	194b      	adds	r3, r1, r5
   81406:	1c50      	adds	r0, r2, #1
   81408:	2807      	cmp	r0, #7
   8140a:	930d      	str	r3, [sp, #52]	; 0x34
   8140c:	900c      	str	r0, [sp, #48]	; 0x30
   8140e:	dc02      	bgt.n	81416 <_svfprintf_r+0x86>
   81410:	f108 0808 	add.w	r8, r8, #8
   81414:	e009      	b.n	8142a <_svfprintf_r+0x9a>
   81416:	4658      	mov	r0, fp
   81418:	4649      	mov	r1, r9
   8141a:	aa0b      	add	r2, sp, #44	; 0x2c
   8141c:	f001 f87c 	bl	82518 <__ssprint_r>
   81420:	2800      	cmp	r0, #0
   81422:	f040 83a2 	bne.w	81b6a <_svfprintf_r+0x7da>
   81426:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8142a:	9904      	ldr	r1, [sp, #16]
   8142c:	194b      	adds	r3, r1, r5
   8142e:	9304      	str	r3, [sp, #16]
   81430:	7822      	ldrb	r2, [r4, #0]
   81432:	2a00      	cmp	r2, #0
   81434:	f000 8392 	beq.w	81b5c <_svfprintf_r+0x7cc>
   81438:	2200      	movs	r2, #0
   8143a:	3401      	adds	r4, #1
   8143c:	9401      	str	r4, [sp, #4]
   8143e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   81442:	f04f 3cff 	mov.w	ip, #4294967295
   81446:	9203      	str	r2, [sp, #12]
   81448:	4617      	mov	r7, r2
   8144a:	9801      	ldr	r0, [sp, #4]
   8144c:	f810 3b01 	ldrb.w	r3, [r0], #1
   81450:	9001      	str	r0, [sp, #4]
   81452:	2b63      	cmp	r3, #99	; 0x63
   81454:	f000 80b3 	beq.w	815be <_svfprintf_r+0x22e>
   81458:	dc33      	bgt.n	814c2 <_svfprintf_r+0x132>
   8145a:	2b39      	cmp	r3, #57	; 0x39
   8145c:	dc1a      	bgt.n	81494 <_svfprintf_r+0x104>
   8145e:	2b31      	cmp	r3, #49	; 0x31
   81460:	f280 8091 	bge.w	81586 <_svfprintf_r+0x1f6>
   81464:	2b2b      	cmp	r3, #43	; 0x2b
   81466:	d101      	bne.n	8146c <_svfprintf_r+0xdc>
   81468:	461a      	mov	r2, r3
   8146a:	e7ee      	b.n	8144a <_svfprintf_r+0xba>
   8146c:	dc0a      	bgt.n	81484 <_svfprintf_r+0xf4>
   8146e:	2b23      	cmp	r3, #35	; 0x23
   81470:	d055      	beq.n	8151e <_svfprintf_r+0x18e>
   81472:	2b2a      	cmp	r3, #42	; 0x2a
   81474:	d056      	beq.n	81524 <_svfprintf_r+0x194>
   81476:	2b20      	cmp	r3, #32
   81478:	f040 81f5 	bne.w	81866 <_svfprintf_r+0x4d6>
   8147c:	2a00      	cmp	r2, #0
   8147e:	bf08      	it	eq
   81480:	2220      	moveq	r2, #32
   81482:	e7e2      	b.n	8144a <_svfprintf_r+0xba>
   81484:	2b2e      	cmp	r3, #46	; 0x2e
   81486:	d058      	beq.n	8153a <_svfprintf_r+0x1aa>
   81488:	2b30      	cmp	r3, #48	; 0x30
   8148a:	d079      	beq.n	81580 <_svfprintf_r+0x1f0>
   8148c:	2b2d      	cmp	r3, #45	; 0x2d
   8148e:	f040 81ea 	bne.w	81866 <_svfprintf_r+0x4d6>
   81492:	e04f      	b.n	81534 <_svfprintf_r+0x1a4>
   81494:	2b4f      	cmp	r3, #79	; 0x4f
   81496:	f000 80de 	beq.w	81656 <_svfprintf_r+0x2c6>
   8149a:	dc07      	bgt.n	814ac <_svfprintf_r+0x11c>
   8149c:	2b44      	cmp	r3, #68	; 0x44
   8149e:	f040 81e2 	bne.w	81866 <_svfprintf_r+0x4d6>
   814a2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   814a6:	f047 0710 	orr.w	r7, r7, #16
   814aa:	e090      	b.n	815ce <_svfprintf_r+0x23e>
   814ac:	2b55      	cmp	r3, #85	; 0x55
   814ae:	f000 811f 	beq.w	816f0 <_svfprintf_r+0x360>
   814b2:	2b58      	cmp	r3, #88	; 0x58
   814b4:	f040 81d7 	bne.w	81866 <_svfprintf_r+0x4d6>
   814b8:	4dae      	ldr	r5, [pc, #696]	; (81774 <_svfprintf_r+0x3e4>)
   814ba:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   814be:	9505      	str	r5, [sp, #20]
   814c0:	e130      	b.n	81724 <_svfprintf_r+0x394>
   814c2:	2b6f      	cmp	r3, #111	; 0x6f
   814c4:	f000 80c9 	beq.w	8165a <_svfprintf_r+0x2ca>
   814c8:	dc10      	bgt.n	814ec <_svfprintf_r+0x15c>
   814ca:	2b69      	cmp	r3, #105	; 0x69
   814cc:	d024      	beq.n	81518 <_svfprintf_r+0x188>
   814ce:	dc07      	bgt.n	814e0 <_svfprintf_r+0x150>
   814d0:	2b64      	cmp	r3, #100	; 0x64
   814d2:	d021      	beq.n	81518 <_svfprintf_r+0x188>
   814d4:	2b68      	cmp	r3, #104	; 0x68
   814d6:	f040 81c6 	bne.w	81866 <_svfprintf_r+0x4d6>
   814da:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   814de:	e7b4      	b.n	8144a <_svfprintf_r+0xba>
   814e0:	2b6c      	cmp	r3, #108	; 0x6c
   814e2:	d05f      	beq.n	815a4 <_svfprintf_r+0x214>
   814e4:	2b6e      	cmp	r3, #110	; 0x6e
   814e6:	f040 81be 	bne.w	81866 <_svfprintf_r+0x4d6>
   814ea:	e096      	b.n	8161a <_svfprintf_r+0x28a>
   814ec:	2b73      	cmp	r3, #115	; 0x73
   814ee:	f000 80df 	beq.w	816b0 <_svfprintf_r+0x320>
   814f2:	dc06      	bgt.n	81502 <_svfprintf_r+0x172>
   814f4:	2b70      	cmp	r3, #112	; 0x70
   814f6:	f000 80cd 	beq.w	81694 <_svfprintf_r+0x304>
   814fa:	2b71      	cmp	r3, #113	; 0x71
   814fc:	f040 81b3 	bne.w	81866 <_svfprintf_r+0x4d6>
   81500:	e05a      	b.n	815b8 <_svfprintf_r+0x228>
   81502:	2b75      	cmp	r3, #117	; 0x75
   81504:	f000 80f6 	beq.w	816f4 <_svfprintf_r+0x364>
   81508:	2b78      	cmp	r3, #120	; 0x78
   8150a:	f040 81ac 	bne.w	81866 <_svfprintf_r+0x4d6>
   8150e:	4d9a      	ldr	r5, [pc, #616]	; (81778 <_svfprintf_r+0x3e8>)
   81510:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   81514:	9505      	str	r5, [sp, #20]
   81516:	e105      	b.n	81724 <_svfprintf_r+0x394>
   81518:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8151c:	e057      	b.n	815ce <_svfprintf_r+0x23e>
   8151e:	f047 0701 	orr.w	r7, r7, #1
   81522:	e792      	b.n	8144a <_svfprintf_r+0xba>
   81524:	1d33      	adds	r3, r6, #4
   81526:	6836      	ldr	r6, [r6, #0]
   81528:	2e00      	cmp	r6, #0
   8152a:	9603      	str	r6, [sp, #12]
   8152c:	da15      	bge.n	8155a <_svfprintf_r+0x1ca>
   8152e:	4270      	negs	r0, r6
   81530:	9003      	str	r0, [sp, #12]
   81532:	461e      	mov	r6, r3
   81534:	f047 0704 	orr.w	r7, r7, #4
   81538:	e787      	b.n	8144a <_svfprintf_r+0xba>
   8153a:	9901      	ldr	r1, [sp, #4]
   8153c:	f811 3b01 	ldrb.w	r3, [r1], #1
   81540:	2b2a      	cmp	r3, #42	; 0x2a
   81542:	9101      	str	r1, [sp, #4]
   81544:	d10b      	bne.n	8155e <_svfprintf_r+0x1ce>
   81546:	f8d6 c000 	ldr.w	ip, [r6]
   8154a:	1d33      	adds	r3, r6, #4
   8154c:	f1bc 0f00 	cmp.w	ip, #0
   81550:	da03      	bge.n	8155a <_svfprintf_r+0x1ca>
   81552:	461e      	mov	r6, r3
   81554:	f04f 3cff 	mov.w	ip, #4294967295
   81558:	e777      	b.n	8144a <_svfprintf_r+0xba>
   8155a:	461e      	mov	r6, r3
   8155c:	e775      	b.n	8144a <_svfprintf_r+0xba>
   8155e:	f04f 0c00 	mov.w	ip, #0
   81562:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   81566:	2809      	cmp	r0, #9
   81568:	d807      	bhi.n	8157a <_svfprintf_r+0x1ea>
   8156a:	9901      	ldr	r1, [sp, #4]
   8156c:	230a      	movs	r3, #10
   8156e:	fb03 0c0c 	mla	ip, r3, ip, r0
   81572:	f811 3b01 	ldrb.w	r3, [r1], #1
   81576:	9101      	str	r1, [sp, #4]
   81578:	e7f3      	b.n	81562 <_svfprintf_r+0x1d2>
   8157a:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   8157e:	e768      	b.n	81452 <_svfprintf_r+0xc2>
   81580:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   81584:	e761      	b.n	8144a <_svfprintf_r+0xba>
   81586:	9801      	ldr	r0, [sp, #4]
   81588:	2100      	movs	r1, #0
   8158a:	3b30      	subs	r3, #48	; 0x30
   8158c:	240a      	movs	r4, #10
   8158e:	fb04 3101 	mla	r1, r4, r1, r3
   81592:	f810 3b01 	ldrb.w	r3, [r0], #1
   81596:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   8159a:	2c09      	cmp	r4, #9
   8159c:	9001      	str	r0, [sp, #4]
   8159e:	d9f4      	bls.n	8158a <_svfprintf_r+0x1fa>
   815a0:	9103      	str	r1, [sp, #12]
   815a2:	e756      	b.n	81452 <_svfprintf_r+0xc2>
   815a4:	9901      	ldr	r1, [sp, #4]
   815a6:	780b      	ldrb	r3, [r1, #0]
   815a8:	2b6c      	cmp	r3, #108	; 0x6c
   815aa:	d102      	bne.n	815b2 <_svfprintf_r+0x222>
   815ac:	1c48      	adds	r0, r1, #1
   815ae:	9001      	str	r0, [sp, #4]
   815b0:	e002      	b.n	815b8 <_svfprintf_r+0x228>
   815b2:	f047 0710 	orr.w	r7, r7, #16
   815b6:	e748      	b.n	8144a <_svfprintf_r+0xba>
   815b8:	f047 0720 	orr.w	r7, r7, #32
   815bc:	e745      	b.n	8144a <_svfprintf_r+0xba>
   815be:	6832      	ldr	r2, [r6, #0]
   815c0:	2500      	movs	r5, #0
   815c2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   815c6:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   815ca:	3604      	adds	r6, #4
   815cc:	e155      	b.n	8187a <_svfprintf_r+0x4ea>
   815ce:	06ba      	lsls	r2, r7, #26
   815d0:	d507      	bpl.n	815e2 <_svfprintf_r+0x252>
   815d2:	3607      	adds	r6, #7
   815d4:	f026 0507 	bic.w	r5, r6, #7
   815d8:	f105 0608 	add.w	r6, r5, #8
   815dc:	e9d5 4500 	ldrd	r4, r5, [r5]
   815e0:	e00f      	b.n	81602 <_svfprintf_r+0x272>
   815e2:	f017 0f10 	tst.w	r7, #16
   815e6:	f106 0104 	add.w	r1, r6, #4
   815ea:	d001      	beq.n	815f0 <_svfprintf_r+0x260>
   815ec:	6832      	ldr	r2, [r6, #0]
   815ee:	e005      	b.n	815fc <_svfprintf_r+0x26c>
   815f0:	f017 0f40 	tst.w	r7, #64	; 0x40
   815f4:	6832      	ldr	r2, [r6, #0]
   815f6:	d001      	beq.n	815fc <_svfprintf_r+0x26c>
   815f8:	b214      	sxth	r4, r2
   815fa:	e000      	b.n	815fe <_svfprintf_r+0x26e>
   815fc:	4614      	mov	r4, r2
   815fe:	17e5      	asrs	r5, r4, #31
   81600:	460e      	mov	r6, r1
   81602:	2c00      	cmp	r4, #0
   81604:	f175 0200 	sbcs.w	r2, r5, #0
   81608:	f280 80b8 	bge.w	8177c <_svfprintf_r+0x3ec>
   8160c:	232d      	movs	r3, #45	; 0x2d
   8160e:	4264      	negs	r4, r4
   81610:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   81614:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   81618:	e0b0      	b.n	8177c <_svfprintf_r+0x3ec>
   8161a:	f017 0f20 	tst.w	r7, #32
   8161e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   81622:	f106 0204 	add.w	r2, r6, #4
   81626:	d005      	beq.n	81634 <_svfprintf_r+0x2a4>
   81628:	9c04      	ldr	r4, [sp, #16]
   8162a:	6835      	ldr	r5, [r6, #0]
   8162c:	17e0      	asrs	r0, r4, #31
   8162e:	602c      	str	r4, [r5, #0]
   81630:	6068      	str	r0, [r5, #4]
   81632:	e004      	b.n	8163e <_svfprintf_r+0x2ae>
   81634:	06fb      	lsls	r3, r7, #27
   81636:	d504      	bpl.n	81642 <_svfprintf_r+0x2b2>
   81638:	6833      	ldr	r3, [r6, #0]
   8163a:	9904      	ldr	r1, [sp, #16]
   8163c:	6019      	str	r1, [r3, #0]
   8163e:	4616      	mov	r6, r2
   81640:	e6cf      	b.n	813e2 <_svfprintf_r+0x52>
   81642:	6830      	ldr	r0, [r6, #0]
   81644:	9c04      	ldr	r4, [sp, #16]
   81646:	f017 0f40 	tst.w	r7, #64	; 0x40
   8164a:	f106 0604 	add.w	r6, r6, #4
   8164e:	bf14      	ite	ne
   81650:	8004      	strhne	r4, [r0, #0]
   81652:	6004      	streq	r4, [r0, #0]
   81654:	e6c5      	b.n	813e2 <_svfprintf_r+0x52>
   81656:	f047 0710 	orr.w	r7, r7, #16
   8165a:	f017 0020 	ands.w	r0, r7, #32
   8165e:	d008      	beq.n	81672 <_svfprintf_r+0x2e2>
   81660:	1df3      	adds	r3, r6, #7
   81662:	f023 0507 	bic.w	r5, r3, #7
   81666:	f105 0608 	add.w	r6, r5, #8
   8166a:	e9d5 4500 	ldrd	r4, r5, [r5]
   8166e:	2000      	movs	r0, #0
   81670:	e07c      	b.n	8176c <_svfprintf_r+0x3dc>
   81672:	f017 0110 	ands.w	r1, r7, #16
   81676:	f106 0204 	add.w	r2, r6, #4
   8167a:	d106      	bne.n	8168a <_svfprintf_r+0x2fa>
   8167c:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   81680:	d003      	beq.n	8168a <_svfprintf_r+0x2fa>
   81682:	8834      	ldrh	r4, [r6, #0]
   81684:	2500      	movs	r5, #0
   81686:	4616      	mov	r6, r2
   81688:	e7f1      	b.n	8166e <_svfprintf_r+0x2de>
   8168a:	6836      	ldr	r6, [r6, #0]
   8168c:	2500      	movs	r5, #0
   8168e:	4634      	mov	r4, r6
   81690:	4616      	mov	r6, r2
   81692:	e06b      	b.n	8176c <_svfprintf_r+0x3dc>
   81694:	4b38      	ldr	r3, [pc, #224]	; (81778 <_svfprintf_r+0x3e8>)
   81696:	2130      	movs	r1, #48	; 0x30
   81698:	2278      	movs	r2, #120	; 0x78
   8169a:	6834      	ldr	r4, [r6, #0]
   8169c:	2500      	movs	r5, #0
   8169e:	f047 0702 	orr.w	r7, r7, #2
   816a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   816a6:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   816aa:	3604      	adds	r6, #4
   816ac:	9305      	str	r3, [sp, #20]
   816ae:	e05c      	b.n	8176a <_svfprintf_r+0x3da>
   816b0:	4631      	mov	r1, r6
   816b2:	2500      	movs	r5, #0
   816b4:	f8d1 a000 	ldr.w	sl, [r1]
   816b8:	3604      	adds	r6, #4
   816ba:	45ac      	cmp	ip, r5
   816bc:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   816c0:	4650      	mov	r0, sl
   816c2:	db11      	blt.n	816e8 <_svfprintf_r+0x358>
   816c4:	4662      	mov	r2, ip
   816c6:	4629      	mov	r1, r5
   816c8:	f8cd c000 	str.w	ip, [sp]
   816cc:	f000 fd72 	bl	821b4 <memchr>
   816d0:	f8dd c000 	ldr.w	ip, [sp]
   816d4:	2800      	cmp	r0, #0
   816d6:	f000 80d4 	beq.w	81882 <_svfprintf_r+0x4f2>
   816da:	ebca 0400 	rsb	r4, sl, r0
   816de:	4564      	cmp	r4, ip
   816e0:	f340 80d1 	ble.w	81886 <_svfprintf_r+0x4f6>
   816e4:	4664      	mov	r4, ip
   816e6:	e0ce      	b.n	81886 <_svfprintf_r+0x4f6>
   816e8:	f7ff fe4a 	bl	81380 <strlen>
   816ec:	4604      	mov	r4, r0
   816ee:	e0ca      	b.n	81886 <_svfprintf_r+0x4f6>
   816f0:	f047 0710 	orr.w	r7, r7, #16
   816f4:	06bd      	lsls	r5, r7, #26
   816f6:	d506      	bpl.n	81706 <_svfprintf_r+0x376>
   816f8:	1df0      	adds	r0, r6, #7
   816fa:	f020 0407 	bic.w	r4, r0, #7
   816fe:	f104 0608 	add.w	r6, r4, #8
   81702:	cc30      	ldmia	r4, {r4, r5}
   81704:	e00c      	b.n	81720 <_svfprintf_r+0x390>
   81706:	f017 0f10 	tst.w	r7, #16
   8170a:	f106 0304 	add.w	r3, r6, #4
   8170e:	d103      	bne.n	81718 <_svfprintf_r+0x388>
   81710:	067c      	lsls	r4, r7, #25
   81712:	d501      	bpl.n	81718 <_svfprintf_r+0x388>
   81714:	8834      	ldrh	r4, [r6, #0]
   81716:	e001      	b.n	8171c <_svfprintf_r+0x38c>
   81718:	6835      	ldr	r5, [r6, #0]
   8171a:	462c      	mov	r4, r5
   8171c:	2500      	movs	r5, #0
   8171e:	461e      	mov	r6, r3
   81720:	2001      	movs	r0, #1
   81722:	e023      	b.n	8176c <_svfprintf_r+0x3dc>
   81724:	06b8      	lsls	r0, r7, #26
   81726:	d507      	bpl.n	81738 <_svfprintf_r+0x3a8>
   81728:	1df4      	adds	r4, r6, #7
   8172a:	f024 0107 	bic.w	r1, r4, #7
   8172e:	f101 0608 	add.w	r6, r1, #8
   81732:	e9d1 4500 	ldrd	r4, r5, [r1]
   81736:	e00c      	b.n	81752 <_svfprintf_r+0x3c2>
   81738:	f017 0f10 	tst.w	r7, #16
   8173c:	f106 0004 	add.w	r0, r6, #4
   81740:	d103      	bne.n	8174a <_svfprintf_r+0x3ba>
   81742:	0679      	lsls	r1, r7, #25
   81744:	d501      	bpl.n	8174a <_svfprintf_r+0x3ba>
   81746:	8834      	ldrh	r4, [r6, #0]
   81748:	e001      	b.n	8174e <_svfprintf_r+0x3be>
   8174a:	6836      	ldr	r6, [r6, #0]
   8174c:	4634      	mov	r4, r6
   8174e:	2500      	movs	r5, #0
   81750:	4606      	mov	r6, r0
   81752:	07fa      	lsls	r2, r7, #31
   81754:	d509      	bpl.n	8176a <_svfprintf_r+0x3da>
   81756:	ea54 0205 	orrs.w	r2, r4, r5
   8175a:	d006      	beq.n	8176a <_svfprintf_r+0x3da>
   8175c:	2230      	movs	r2, #48	; 0x30
   8175e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   81762:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   81766:	f047 0702 	orr.w	r7, r7, #2
   8176a:	2002      	movs	r0, #2
   8176c:	2100      	movs	r1, #0
   8176e:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   81772:	e004      	b.n	8177e <_svfprintf_r+0x3ee>
   81774:	00083492 	.word	0x00083492
   81778:	000834a3 	.word	0x000834a3
   8177c:	2001      	movs	r0, #1
   8177e:	f1bc 0f00 	cmp.w	ip, #0
   81782:	bfa8      	it	ge
   81784:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   81788:	ea54 0105 	orrs.w	r1, r4, r5
   8178c:	d102      	bne.n	81794 <_svfprintf_r+0x404>
   8178e:	f1bc 0f00 	cmp.w	ip, #0
   81792:	d058      	beq.n	81846 <_svfprintf_r+0x4b6>
   81794:	2801      	cmp	r0, #1
   81796:	d01d      	beq.n	817d4 <_svfprintf_r+0x444>
   81798:	2802      	cmp	r0, #2
   8179a:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8179e:	d041      	beq.n	81824 <_svfprintf_r+0x494>
   817a0:	f004 0207 	and.w	r2, r4, #7
   817a4:	08e4      	lsrs	r4, r4, #3
   817a6:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   817aa:	08e9      	lsrs	r1, r5, #3
   817ac:	4604      	mov	r4, r0
   817ae:	460d      	mov	r5, r1
   817b0:	3230      	adds	r2, #48	; 0x30
   817b2:	ea54 0105 	orrs.w	r1, r4, r5
   817b6:	469a      	mov	sl, r3
   817b8:	701a      	strb	r2, [r3, #0]
   817ba:	f103 33ff 	add.w	r3, r3, #4294967295
   817be:	d1ef      	bne.n	817a0 <_svfprintf_r+0x410>
   817c0:	07f8      	lsls	r0, r7, #31
   817c2:	4655      	mov	r5, sl
   817c4:	d54a      	bpl.n	8185c <_svfprintf_r+0x4cc>
   817c6:	2a30      	cmp	r2, #48	; 0x30
   817c8:	d048      	beq.n	8185c <_svfprintf_r+0x4cc>
   817ca:	2230      	movs	r2, #48	; 0x30
   817cc:	469a      	mov	sl, r3
   817ce:	f805 2c01 	strb.w	r2, [r5, #-1]
   817d2:	e043      	b.n	8185c <_svfprintf_r+0x4cc>
   817d4:	2d00      	cmp	r5, #0
   817d6:	bf08      	it	eq
   817d8:	2c0a      	cmpeq	r4, #10
   817da:	d203      	bcs.n	817e4 <_svfprintf_r+0x454>
   817dc:	3430      	adds	r4, #48	; 0x30
   817de:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   817e2:	e036      	b.n	81852 <_svfprintf_r+0x4c2>
   817e4:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   817e8:	9302      	str	r3, [sp, #8]
   817ea:	4620      	mov	r0, r4
   817ec:	4629      	mov	r1, r5
   817ee:	220a      	movs	r2, #10
   817f0:	2300      	movs	r3, #0
   817f2:	f8cd c000 	str.w	ip, [sp]
   817f6:	f001 fb09 	bl	82e0c <__aeabi_uldivmod>
   817fa:	9802      	ldr	r0, [sp, #8]
   817fc:	3230      	adds	r2, #48	; 0x30
   817fe:	f800 2901 	strb.w	r2, [r0], #-1
   81802:	4629      	mov	r1, r5
   81804:	220a      	movs	r2, #10
   81806:	2300      	movs	r3, #0
   81808:	f8dd a008 	ldr.w	sl, [sp, #8]
   8180c:	9002      	str	r0, [sp, #8]
   8180e:	4620      	mov	r0, r4
   81810:	f001 fafc 	bl	82e0c <__aeabi_uldivmod>
   81814:	4604      	mov	r4, r0
   81816:	460d      	mov	r5, r1
   81818:	ea54 0105 	orrs.w	r1, r4, r5
   8181c:	f8dd c000 	ldr.w	ip, [sp]
   81820:	d1e3      	bne.n	817ea <_svfprintf_r+0x45a>
   81822:	e01b      	b.n	8185c <_svfprintf_r+0x4cc>
   81824:	9905      	ldr	r1, [sp, #20]
   81826:	f004 000f 	and.w	r0, r4, #15
   8182a:	0924      	lsrs	r4, r4, #4
   8182c:	5c0a      	ldrb	r2, [r1, r0]
   8182e:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   81832:	0929      	lsrs	r1, r5, #4
   81834:	4604      	mov	r4, r0
   81836:	460d      	mov	r5, r1
   81838:	469a      	mov	sl, r3
   8183a:	f803 2901 	strb.w	r2, [r3], #-1
   8183e:	ea54 0205 	orrs.w	r2, r4, r5
   81842:	d1ef      	bne.n	81824 <_svfprintf_r+0x494>
   81844:	e00a      	b.n	8185c <_svfprintf_r+0x4cc>
   81846:	b938      	cbnz	r0, 81858 <_svfprintf_r+0x4c8>
   81848:	07f9      	lsls	r1, r7, #31
   8184a:	d505      	bpl.n	81858 <_svfprintf_r+0x4c8>
   8184c:	2030      	movs	r0, #48	; 0x30
   8184e:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   81852:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
   81856:	e001      	b.n	8185c <_svfprintf_r+0x4cc>
   81858:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   8185c:	ad18      	add	r5, sp, #96	; 0x60
   8185e:	ebca 0405 	rsb	r4, sl, r5
   81862:	4665      	mov	r5, ip
   81864:	e00f      	b.n	81886 <_svfprintf_r+0x4f6>
   81866:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8186a:	2b00      	cmp	r3, #0
   8186c:	f000 8176 	beq.w	81b5c <_svfprintf_r+0x7cc>
   81870:	2500      	movs	r5, #0
   81872:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   81876:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8187a:	2401      	movs	r4, #1
   8187c:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   81880:	e001      	b.n	81886 <_svfprintf_r+0x4f6>
   81882:	4664      	mov	r4, ip
   81884:	4605      	mov	r5, r0
   81886:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   8188a:	42ac      	cmp	r4, r5
   8188c:	bfac      	ite	ge
   8188e:	4621      	movge	r1, r4
   81890:	4629      	movlt	r1, r5
   81892:	9102      	str	r1, [sp, #8]
   81894:	b113      	cbz	r3, 8189c <_svfprintf_r+0x50c>
   81896:	9802      	ldr	r0, [sp, #8]
   81898:	1c42      	adds	r2, r0, #1
   8189a:	9202      	str	r2, [sp, #8]
   8189c:	f017 0102 	ands.w	r1, r7, #2
   818a0:	9106      	str	r1, [sp, #24]
   818a2:	d002      	beq.n	818aa <_svfprintf_r+0x51a>
   818a4:	9b02      	ldr	r3, [sp, #8]
   818a6:	1c98      	adds	r0, r3, #2
   818a8:	9002      	str	r0, [sp, #8]
   818aa:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   818ae:	9207      	str	r2, [sp, #28]
   818b0:	d13c      	bne.n	8192c <_svfprintf_r+0x59c>
   818b2:	9903      	ldr	r1, [sp, #12]
   818b4:	9b02      	ldr	r3, [sp, #8]
   818b6:	1acb      	subs	r3, r1, r3
   818b8:	2b00      	cmp	r3, #0
   818ba:	dd37      	ble.n	8192c <_svfprintf_r+0x59c>
   818bc:	48a5      	ldr	r0, [pc, #660]	; (81b54 <_svfprintf_r+0x7c4>)
   818be:	2b10      	cmp	r3, #16
   818c0:	f8c8 0000 	str.w	r0, [r8]
   818c4:	dd1b      	ble.n	818fe <_svfprintf_r+0x56e>
   818c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   818c8:	2110      	movs	r1, #16
   818ca:	980d      	ldr	r0, [sp, #52]	; 0x34
   818cc:	f8c8 1004 	str.w	r1, [r8, #4]
   818d0:	1c51      	adds	r1, r2, #1
   818d2:	3010      	adds	r0, #16
   818d4:	2907      	cmp	r1, #7
   818d6:	900d      	str	r0, [sp, #52]	; 0x34
   818d8:	910c      	str	r1, [sp, #48]	; 0x30
   818da:	dc02      	bgt.n	818e2 <_svfprintf_r+0x552>
   818dc:	f108 0808 	add.w	r8, r8, #8
   818e0:	e00b      	b.n	818fa <_svfprintf_r+0x56a>
   818e2:	4658      	mov	r0, fp
   818e4:	4649      	mov	r1, r9
   818e6:	aa0b      	add	r2, sp, #44	; 0x2c
   818e8:	9300      	str	r3, [sp, #0]
   818ea:	f000 fe15 	bl	82518 <__ssprint_r>
   818ee:	9b00      	ldr	r3, [sp, #0]
   818f0:	2800      	cmp	r0, #0
   818f2:	f040 813a 	bne.w	81b6a <_svfprintf_r+0x7da>
   818f6:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   818fa:	3b10      	subs	r3, #16
   818fc:	e7de      	b.n	818bc <_svfprintf_r+0x52c>
   818fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   81900:	f8c8 3004 	str.w	r3, [r8, #4]
   81904:	18d1      	adds	r1, r2, r3
   81906:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   81908:	910d      	str	r1, [sp, #52]	; 0x34
   8190a:	1c58      	adds	r0, r3, #1
   8190c:	2807      	cmp	r0, #7
   8190e:	900c      	str	r0, [sp, #48]	; 0x30
   81910:	dc02      	bgt.n	81918 <_svfprintf_r+0x588>
   81912:	f108 0808 	add.w	r8, r8, #8
   81916:	e009      	b.n	8192c <_svfprintf_r+0x59c>
   81918:	4658      	mov	r0, fp
   8191a:	4649      	mov	r1, r9
   8191c:	aa0b      	add	r2, sp, #44	; 0x2c
   8191e:	f000 fdfb 	bl	82518 <__ssprint_r>
   81922:	2800      	cmp	r0, #0
   81924:	f040 8121 	bne.w	81b6a <_svfprintf_r+0x7da>
   81928:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8192c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   81930:	b1da      	cbz	r2, 8196a <_svfprintf_r+0x5da>
   81932:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   81936:	f8c8 1000 	str.w	r1, [r8]
   8193a:	990c      	ldr	r1, [sp, #48]	; 0x30
   8193c:	2301      	movs	r3, #1
   8193e:	980d      	ldr	r0, [sp, #52]	; 0x34
   81940:	f8c8 3004 	str.w	r3, [r8, #4]
   81944:	1c4b      	adds	r3, r1, #1
   81946:	1c42      	adds	r2, r0, #1
   81948:	2b07      	cmp	r3, #7
   8194a:	920d      	str	r2, [sp, #52]	; 0x34
   8194c:	930c      	str	r3, [sp, #48]	; 0x30
   8194e:	dc02      	bgt.n	81956 <_svfprintf_r+0x5c6>
   81950:	f108 0808 	add.w	r8, r8, #8
   81954:	e009      	b.n	8196a <_svfprintf_r+0x5da>
   81956:	4658      	mov	r0, fp
   81958:	4649      	mov	r1, r9
   8195a:	aa0b      	add	r2, sp, #44	; 0x2c
   8195c:	f000 fddc 	bl	82518 <__ssprint_r>
   81960:	2800      	cmp	r0, #0
   81962:	f040 8102 	bne.w	81b6a <_svfprintf_r+0x7da>
   81966:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8196a:	9806      	ldr	r0, [sp, #24]
   8196c:	b1d0      	cbz	r0, 819a4 <_svfprintf_r+0x614>
   8196e:	aa0a      	add	r2, sp, #40	; 0x28
   81970:	f8c8 2000 	str.w	r2, [r8]
   81974:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   81976:	2102      	movs	r1, #2
   81978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8197a:	f8c8 1004 	str.w	r1, [r8, #4]
   8197e:	1c51      	adds	r1, r2, #1
   81980:	1c98      	adds	r0, r3, #2
   81982:	2907      	cmp	r1, #7
   81984:	900d      	str	r0, [sp, #52]	; 0x34
   81986:	910c      	str	r1, [sp, #48]	; 0x30
   81988:	dc02      	bgt.n	81990 <_svfprintf_r+0x600>
   8198a:	f108 0808 	add.w	r8, r8, #8
   8198e:	e009      	b.n	819a4 <_svfprintf_r+0x614>
   81990:	4658      	mov	r0, fp
   81992:	4649      	mov	r1, r9
   81994:	aa0b      	add	r2, sp, #44	; 0x2c
   81996:	f000 fdbf 	bl	82518 <__ssprint_r>
   8199a:	2800      	cmp	r0, #0
   8199c:	f040 80e5 	bne.w	81b6a <_svfprintf_r+0x7da>
   819a0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   819a4:	9b07      	ldr	r3, [sp, #28]
   819a6:	2b80      	cmp	r3, #128	; 0x80
   819a8:	d13c      	bne.n	81a24 <_svfprintf_r+0x694>
   819aa:	9803      	ldr	r0, [sp, #12]
   819ac:	9a02      	ldr	r2, [sp, #8]
   819ae:	1a83      	subs	r3, r0, r2
   819b0:	2b00      	cmp	r3, #0
   819b2:	dd37      	ble.n	81a24 <_svfprintf_r+0x694>
   819b4:	4968      	ldr	r1, [pc, #416]	; (81b58 <_svfprintf_r+0x7c8>)
   819b6:	2b10      	cmp	r3, #16
   819b8:	f8c8 1000 	str.w	r1, [r8]
   819bc:	dd1b      	ble.n	819f6 <_svfprintf_r+0x666>
   819be:	980c      	ldr	r0, [sp, #48]	; 0x30
   819c0:	2210      	movs	r2, #16
   819c2:	990d      	ldr	r1, [sp, #52]	; 0x34
   819c4:	f8c8 2004 	str.w	r2, [r8, #4]
   819c8:	1c42      	adds	r2, r0, #1
   819ca:	3110      	adds	r1, #16
   819cc:	2a07      	cmp	r2, #7
   819ce:	910d      	str	r1, [sp, #52]	; 0x34
   819d0:	920c      	str	r2, [sp, #48]	; 0x30
   819d2:	dc02      	bgt.n	819da <_svfprintf_r+0x64a>
   819d4:	f108 0808 	add.w	r8, r8, #8
   819d8:	e00b      	b.n	819f2 <_svfprintf_r+0x662>
   819da:	4658      	mov	r0, fp
   819dc:	4649      	mov	r1, r9
   819de:	aa0b      	add	r2, sp, #44	; 0x2c
   819e0:	9300      	str	r3, [sp, #0]
   819e2:	f000 fd99 	bl	82518 <__ssprint_r>
   819e6:	9b00      	ldr	r3, [sp, #0]
   819e8:	2800      	cmp	r0, #0
   819ea:	f040 80be 	bne.w	81b6a <_svfprintf_r+0x7da>
   819ee:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   819f2:	3b10      	subs	r3, #16
   819f4:	e7de      	b.n	819b4 <_svfprintf_r+0x624>
   819f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   819f8:	980d      	ldr	r0, [sp, #52]	; 0x34
   819fa:	1c51      	adds	r1, r2, #1
   819fc:	f8c8 3004 	str.w	r3, [r8, #4]
   81a00:	2907      	cmp	r1, #7
   81a02:	4403      	add	r3, r0
   81a04:	930d      	str	r3, [sp, #52]	; 0x34
   81a06:	910c      	str	r1, [sp, #48]	; 0x30
   81a08:	dc02      	bgt.n	81a10 <_svfprintf_r+0x680>
   81a0a:	f108 0808 	add.w	r8, r8, #8
   81a0e:	e009      	b.n	81a24 <_svfprintf_r+0x694>
   81a10:	4658      	mov	r0, fp
   81a12:	4649      	mov	r1, r9
   81a14:	aa0b      	add	r2, sp, #44	; 0x2c
   81a16:	f000 fd7f 	bl	82518 <__ssprint_r>
   81a1a:	2800      	cmp	r0, #0
   81a1c:	f040 80a5 	bne.w	81b6a <_svfprintf_r+0x7da>
   81a20:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   81a24:	1b2d      	subs	r5, r5, r4
   81a26:	2d00      	cmp	r5, #0
   81a28:	dd34      	ble.n	81a94 <_svfprintf_r+0x704>
   81a2a:	484b      	ldr	r0, [pc, #300]	; (81b58 <_svfprintf_r+0x7c8>)
   81a2c:	2d10      	cmp	r5, #16
   81a2e:	f8c8 0000 	str.w	r0, [r8]
   81a32:	dd19      	ble.n	81a68 <_svfprintf_r+0x6d8>
   81a34:	980c      	ldr	r0, [sp, #48]	; 0x30
   81a36:	990d      	ldr	r1, [sp, #52]	; 0x34
   81a38:	1c43      	adds	r3, r0, #1
   81a3a:	2210      	movs	r2, #16
   81a3c:	3110      	adds	r1, #16
   81a3e:	2b07      	cmp	r3, #7
   81a40:	f8c8 2004 	str.w	r2, [r8, #4]
   81a44:	910d      	str	r1, [sp, #52]	; 0x34
   81a46:	930c      	str	r3, [sp, #48]	; 0x30
   81a48:	dc02      	bgt.n	81a50 <_svfprintf_r+0x6c0>
   81a4a:	f108 0808 	add.w	r8, r8, #8
   81a4e:	e009      	b.n	81a64 <_svfprintf_r+0x6d4>
   81a50:	4658      	mov	r0, fp
   81a52:	4649      	mov	r1, r9
   81a54:	aa0b      	add	r2, sp, #44	; 0x2c
   81a56:	f000 fd5f 	bl	82518 <__ssprint_r>
   81a5a:	2800      	cmp	r0, #0
   81a5c:	f040 8085 	bne.w	81b6a <_svfprintf_r+0x7da>
   81a60:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   81a64:	3d10      	subs	r5, #16
   81a66:	e7e0      	b.n	81a2a <_svfprintf_r+0x69a>
   81a68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   81a6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   81a6c:	1c51      	adds	r1, r2, #1
   81a6e:	f8c8 5004 	str.w	r5, [r8, #4]
   81a72:	2907      	cmp	r1, #7
   81a74:	441d      	add	r5, r3
   81a76:	950d      	str	r5, [sp, #52]	; 0x34
   81a78:	910c      	str	r1, [sp, #48]	; 0x30
   81a7a:	dc02      	bgt.n	81a82 <_svfprintf_r+0x6f2>
   81a7c:	f108 0808 	add.w	r8, r8, #8
   81a80:	e008      	b.n	81a94 <_svfprintf_r+0x704>
   81a82:	4658      	mov	r0, fp
   81a84:	4649      	mov	r1, r9
   81a86:	aa0b      	add	r2, sp, #44	; 0x2c
   81a88:	f000 fd46 	bl	82518 <__ssprint_r>
   81a8c:	2800      	cmp	r0, #0
   81a8e:	d16c      	bne.n	81b6a <_svfprintf_r+0x7da>
   81a90:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   81a94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   81a96:	980d      	ldr	r0, [sp, #52]	; 0x34
   81a98:	1c5a      	adds	r2, r3, #1
   81a9a:	f8c8 4004 	str.w	r4, [r8, #4]
   81a9e:	2a07      	cmp	r2, #7
   81aa0:	4404      	add	r4, r0
   81aa2:	f8c8 a000 	str.w	sl, [r8]
   81aa6:	940d      	str	r4, [sp, #52]	; 0x34
   81aa8:	920c      	str	r2, [sp, #48]	; 0x30
   81aaa:	dc02      	bgt.n	81ab2 <_svfprintf_r+0x722>
   81aac:	f108 0308 	add.w	r3, r8, #8
   81ab0:	e007      	b.n	81ac2 <_svfprintf_r+0x732>
   81ab2:	4658      	mov	r0, fp
   81ab4:	4649      	mov	r1, r9
   81ab6:	aa0b      	add	r2, sp, #44	; 0x2c
   81ab8:	f000 fd2e 	bl	82518 <__ssprint_r>
   81abc:	2800      	cmp	r0, #0
   81abe:	d154      	bne.n	81b6a <_svfprintf_r+0x7da>
   81ac0:	ab18      	add	r3, sp, #96	; 0x60
   81ac2:	077a      	lsls	r2, r7, #29
   81ac4:	d40b      	bmi.n	81ade <_svfprintf_r+0x74e>
   81ac6:	9804      	ldr	r0, [sp, #16]
   81ac8:	9b02      	ldr	r3, [sp, #8]
   81aca:	9a03      	ldr	r2, [sp, #12]
   81acc:	990d      	ldr	r1, [sp, #52]	; 0x34
   81ace:	4293      	cmp	r3, r2
   81ad0:	bfac      	ite	ge
   81ad2:	18c0      	addge	r0, r0, r3
   81ad4:	1880      	addlt	r0, r0, r2
   81ad6:	9004      	str	r0, [sp, #16]
   81ad8:	2900      	cmp	r1, #0
   81ada:	d036      	beq.n	81b4a <_svfprintf_r+0x7ba>
   81adc:	e02f      	b.n	81b3e <_svfprintf_r+0x7ae>
   81ade:	9c03      	ldr	r4, [sp, #12]
   81ae0:	9902      	ldr	r1, [sp, #8]
   81ae2:	1a64      	subs	r4, r4, r1
   81ae4:	2c00      	cmp	r4, #0
   81ae6:	ddee      	ble.n	81ac6 <_svfprintf_r+0x736>
   81ae8:	481a      	ldr	r0, [pc, #104]	; (81b54 <_svfprintf_r+0x7c4>)
   81aea:	2c10      	cmp	r4, #16
   81aec:	6018      	str	r0, [r3, #0]
   81aee:	dd15      	ble.n	81b1c <_svfprintf_r+0x78c>
   81af0:	990c      	ldr	r1, [sp, #48]	; 0x30
   81af2:	2010      	movs	r0, #16
   81af4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   81af6:	6058      	str	r0, [r3, #4]
   81af8:	1c48      	adds	r0, r1, #1
   81afa:	3210      	adds	r2, #16
   81afc:	2807      	cmp	r0, #7
   81afe:	920d      	str	r2, [sp, #52]	; 0x34
   81b00:	900c      	str	r0, [sp, #48]	; 0x30
   81b02:	dc01      	bgt.n	81b08 <_svfprintf_r+0x778>
   81b04:	3308      	adds	r3, #8
   81b06:	e007      	b.n	81b18 <_svfprintf_r+0x788>
   81b08:	4658      	mov	r0, fp
   81b0a:	4649      	mov	r1, r9
   81b0c:	aa0b      	add	r2, sp, #44	; 0x2c
   81b0e:	f000 fd03 	bl	82518 <__ssprint_r>
   81b12:	2800      	cmp	r0, #0
   81b14:	d129      	bne.n	81b6a <_svfprintf_r+0x7da>
   81b16:	ab18      	add	r3, sp, #96	; 0x60
   81b18:	3c10      	subs	r4, #16
   81b1a:	e7e5      	b.n	81ae8 <_svfprintf_r+0x758>
   81b1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   81b1e:	605c      	str	r4, [r3, #4]
   81b20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   81b22:	1c51      	adds	r1, r2, #1
   81b24:	191c      	adds	r4, r3, r4
   81b26:	2907      	cmp	r1, #7
   81b28:	940d      	str	r4, [sp, #52]	; 0x34
   81b2a:	910c      	str	r1, [sp, #48]	; 0x30
   81b2c:	ddcb      	ble.n	81ac6 <_svfprintf_r+0x736>
   81b2e:	4658      	mov	r0, fp
   81b30:	4649      	mov	r1, r9
   81b32:	aa0b      	add	r2, sp, #44	; 0x2c
   81b34:	f000 fcf0 	bl	82518 <__ssprint_r>
   81b38:	2800      	cmp	r0, #0
   81b3a:	d0c4      	beq.n	81ac6 <_svfprintf_r+0x736>
   81b3c:	e015      	b.n	81b6a <_svfprintf_r+0x7da>
   81b3e:	4658      	mov	r0, fp
   81b40:	4649      	mov	r1, r9
   81b42:	aa0b      	add	r2, sp, #44	; 0x2c
   81b44:	f000 fce8 	bl	82518 <__ssprint_r>
   81b48:	b978      	cbnz	r0, 81b6a <_svfprintf_r+0x7da>
   81b4a:	2500      	movs	r5, #0
   81b4c:	950c      	str	r5, [sp, #48]	; 0x30
   81b4e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   81b52:	e446      	b.n	813e2 <_svfprintf_r+0x52>
   81b54:	00083472 	.word	0x00083472
   81b58:	00083482 	.word	0x00083482
   81b5c:	980d      	ldr	r0, [sp, #52]	; 0x34
   81b5e:	b120      	cbz	r0, 81b6a <_svfprintf_r+0x7da>
   81b60:	4658      	mov	r0, fp
   81b62:	4649      	mov	r1, r9
   81b64:	aa0b      	add	r2, sp, #44	; 0x2c
   81b66:	f000 fcd7 	bl	82518 <__ssprint_r>
   81b6a:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   81b6e:	9b04      	ldr	r3, [sp, #16]
   81b70:	f002 0140 	and.w	r1, r2, #64	; 0x40
   81b74:	b208      	sxth	r0, r1
   81b76:	2800      	cmp	r0, #0
   81b78:	bf18      	it	ne
   81b7a:	f04f 33ff 	movne.w	r3, #4294967295
   81b7e:	4618      	mov	r0, r3
   81b80:	b029      	add	sp, #164	; 0xa4
   81b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81b86:	bf00      	nop

00081b88 <register_fini>:
   81b88:	4b02      	ldr	r3, [pc, #8]	; (81b94 <register_fini+0xc>)
   81b8a:	b113      	cbz	r3, 81b92 <register_fini+0xa>
   81b8c:	4802      	ldr	r0, [pc, #8]	; (81b98 <register_fini+0x10>)
   81b8e:	f000 b805 	b.w	81b9c <atexit>
   81b92:	4770      	bx	lr
   81b94:	00000000 	.word	0x00000000
   81b98:	00081281 	.word	0x00081281

00081b9c <atexit>:
   81b9c:	4601      	mov	r1, r0
   81b9e:	2000      	movs	r0, #0
   81ba0:	4602      	mov	r2, r0
   81ba2:	4603      	mov	r3, r0
   81ba4:	f7ff bb1e 	b.w	811e4 <__register_exitproc>

00081ba8 <_malloc_trim_r>:
   81ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81baa:	4d23      	ldr	r5, [pc, #140]	; (81c38 <_malloc_trim_r+0x90>)
   81bac:	460e      	mov	r6, r1
   81bae:	4604      	mov	r4, r0
   81bb0:	f000 fb31 	bl	82216 <__malloc_lock>
   81bb4:	68ab      	ldr	r3, [r5, #8]
   81bb6:	685f      	ldr	r7, [r3, #4]
   81bb8:	f027 0703 	bic.w	r7, r7, #3
   81bbc:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
   81bc0:	1b81      	subs	r1, r0, r6
   81bc2:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   81bc6:	f022 060f 	bic.w	r6, r2, #15
   81bca:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   81bce:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   81bd2:	da04      	bge.n	81bde <_malloc_trim_r+0x36>
   81bd4:	4620      	mov	r0, r4
   81bd6:	f000 fb1f 	bl	82218 <__malloc_unlock>
   81bda:	2000      	movs	r0, #0
   81bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81bde:	2100      	movs	r1, #0
   81be0:	4620      	mov	r0, r4
   81be2:	f000 fc89 	bl	824f8 <_sbrk_r>
   81be6:	68ab      	ldr	r3, [r5, #8]
   81be8:	19d9      	adds	r1, r3, r7
   81bea:	4288      	cmp	r0, r1
   81bec:	d1f2      	bne.n	81bd4 <_malloc_trim_r+0x2c>
   81bee:	4271      	negs	r1, r6
   81bf0:	4620      	mov	r0, r4
   81bf2:	f000 fc81 	bl	824f8 <_sbrk_r>
   81bf6:	3001      	adds	r0, #1
   81bf8:	d110      	bne.n	81c1c <_malloc_trim_r+0x74>
   81bfa:	2100      	movs	r1, #0
   81bfc:	4620      	mov	r0, r4
   81bfe:	f000 fc7b 	bl	824f8 <_sbrk_r>
   81c02:	68ab      	ldr	r3, [r5, #8]
   81c04:	1ac2      	subs	r2, r0, r3
   81c06:	2a0f      	cmp	r2, #15
   81c08:	dde4      	ble.n	81bd4 <_malloc_trim_r+0x2c>
   81c0a:	490c      	ldr	r1, [pc, #48]	; (81c3c <_malloc_trim_r+0x94>)
   81c0c:	f042 0201 	orr.w	r2, r2, #1
   81c10:	6809      	ldr	r1, [r1, #0]
   81c12:	605a      	str	r2, [r3, #4]
   81c14:	1a40      	subs	r0, r0, r1
   81c16:	490a      	ldr	r1, [pc, #40]	; (81c40 <_malloc_trim_r+0x98>)
   81c18:	6008      	str	r0, [r1, #0]
   81c1a:	e7db      	b.n	81bd4 <_malloc_trim_r+0x2c>
   81c1c:	4b08      	ldr	r3, [pc, #32]	; (81c40 <_malloc_trim_r+0x98>)
   81c1e:	68a8      	ldr	r0, [r5, #8]
   81c20:	681a      	ldr	r2, [r3, #0]
   81c22:	1bbf      	subs	r7, r7, r6
   81c24:	f047 0701 	orr.w	r7, r7, #1
   81c28:	6047      	str	r7, [r0, #4]
   81c2a:	1b96      	subs	r6, r2, r6
   81c2c:	4620      	mov	r0, r4
   81c2e:	601e      	str	r6, [r3, #0]
   81c30:	f000 faf2 	bl	82218 <__malloc_unlock>
   81c34:	2001      	movs	r0, #1
   81c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81c38:	20070438 	.word	0x20070438
   81c3c:	20070840 	.word	0x20070840
   81c40:	200708dc 	.word	0x200708dc

00081c44 <_free_r>:
   81c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81c46:	4606      	mov	r6, r0
   81c48:	460d      	mov	r5, r1
   81c4a:	2900      	cmp	r1, #0
   81c4c:	f000 80a6 	beq.w	81d9c <_free_r+0x158>
   81c50:	f000 fae1 	bl	82216 <__malloc_lock>
   81c54:	f855 cc04 	ldr.w	ip, [r5, #-4]
   81c58:	4f51      	ldr	r7, [pc, #324]	; (81da0 <_free_r+0x15c>)
   81c5a:	f1a5 0308 	sub.w	r3, r5, #8
   81c5e:	f02c 0201 	bic.w	r2, ip, #1
   81c62:	189c      	adds	r4, r3, r2
   81c64:	68b9      	ldr	r1, [r7, #8]
   81c66:	6860      	ldr	r0, [r4, #4]
   81c68:	428c      	cmp	r4, r1
   81c6a:	f020 0003 	bic.w	r0, r0, #3
   81c6e:	f00c 0101 	and.w	r1, ip, #1
   81c72:	d11c      	bne.n	81cae <_free_r+0x6a>
   81c74:	1882      	adds	r2, r0, r2
   81c76:	b939      	cbnz	r1, 81c88 <_free_r+0x44>
   81c78:	f855 1c08 	ldr.w	r1, [r5, #-8]
   81c7c:	1a5b      	subs	r3, r3, r1
   81c7e:	6898      	ldr	r0, [r3, #8]
   81c80:	1852      	adds	r2, r2, r1
   81c82:	68d9      	ldr	r1, [r3, #12]
   81c84:	60c1      	str	r1, [r0, #12]
   81c86:	6088      	str	r0, [r1, #8]
   81c88:	4845      	ldr	r0, [pc, #276]	; (81da0 <_free_r+0x15c>)
   81c8a:	f042 0101 	orr.w	r1, r2, #1
   81c8e:	6059      	str	r1, [r3, #4]
   81c90:	6083      	str	r3, [r0, #8]
   81c92:	4b44      	ldr	r3, [pc, #272]	; (81da4 <_free_r+0x160>)
   81c94:	6819      	ldr	r1, [r3, #0]
   81c96:	428a      	cmp	r2, r1
   81c98:	d304      	bcc.n	81ca4 <_free_r+0x60>
   81c9a:	4a43      	ldr	r2, [pc, #268]	; (81da8 <_free_r+0x164>)
   81c9c:	4630      	mov	r0, r6
   81c9e:	6811      	ldr	r1, [r2, #0]
   81ca0:	f7ff ff82 	bl	81ba8 <_malloc_trim_r>
   81ca4:	4630      	mov	r0, r6
   81ca6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   81caa:	f000 bab5 	b.w	82218 <__malloc_unlock>
   81cae:	6060      	str	r0, [r4, #4]
   81cb0:	b959      	cbnz	r1, 81cca <_free_r+0x86>
   81cb2:	f855 5c08 	ldr.w	r5, [r5, #-8]
   81cb6:	3708      	adds	r7, #8
   81cb8:	1b5b      	subs	r3, r3, r5
   81cba:	1952      	adds	r2, r2, r5
   81cbc:	689d      	ldr	r5, [r3, #8]
   81cbe:	42bd      	cmp	r5, r7
   81cc0:	d005      	beq.n	81cce <_free_r+0x8a>
   81cc2:	68df      	ldr	r7, [r3, #12]
   81cc4:	60ef      	str	r7, [r5, #12]
   81cc6:	60bd      	str	r5, [r7, #8]
   81cc8:	e002      	b.n	81cd0 <_free_r+0x8c>
   81cca:	2100      	movs	r1, #0
   81ccc:	e000      	b.n	81cd0 <_free_r+0x8c>
   81cce:	2101      	movs	r1, #1
   81cd0:	1825      	adds	r5, r4, r0
   81cd2:	686d      	ldr	r5, [r5, #4]
   81cd4:	f015 0f01 	tst.w	r5, #1
   81cd8:	d10f      	bne.n	81cfa <_free_r+0xb6>
   81cda:	1812      	adds	r2, r2, r0
   81cdc:	b949      	cbnz	r1, 81cf2 <_free_r+0xae>
   81cde:	68a0      	ldr	r0, [r4, #8]
   81ce0:	4d32      	ldr	r5, [pc, #200]	; (81dac <_free_r+0x168>)
   81ce2:	42a8      	cmp	r0, r5
   81ce4:	d105      	bne.n	81cf2 <_free_r+0xae>
   81ce6:	60eb      	str	r3, [r5, #12]
   81ce8:	60ab      	str	r3, [r5, #8]
   81cea:	60d8      	str	r0, [r3, #12]
   81cec:	6098      	str	r0, [r3, #8]
   81cee:	2101      	movs	r1, #1
   81cf0:	e003      	b.n	81cfa <_free_r+0xb6>
   81cf2:	68e0      	ldr	r0, [r4, #12]
   81cf4:	68a4      	ldr	r4, [r4, #8]
   81cf6:	60e0      	str	r0, [r4, #12]
   81cf8:	6084      	str	r4, [r0, #8]
   81cfa:	f042 0001 	orr.w	r0, r2, #1
   81cfe:	6058      	str	r0, [r3, #4]
   81d00:	509a      	str	r2, [r3, r2]
   81d02:	2900      	cmp	r1, #0
   81d04:	d1ce      	bne.n	81ca4 <_free_r+0x60>
   81d06:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   81d0a:	d20c      	bcs.n	81d26 <_free_r+0xe2>
   81d0c:	08d2      	lsrs	r2, r2, #3
   81d0e:	1090      	asrs	r0, r2, #2
   81d10:	2401      	movs	r4, #1
   81d12:	fa04 f400 	lsl.w	r4, r4, r0
   81d16:	4922      	ldr	r1, [pc, #136]	; (81da0 <_free_r+0x15c>)
   81d18:	6848      	ldr	r0, [r1, #4]
   81d1a:	4320      	orrs	r0, r4
   81d1c:	6048      	str	r0, [r1, #4]
   81d1e:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
   81d22:	6881      	ldr	r1, [r0, #8]
   81d24:	e035      	b.n	81d92 <_free_r+0x14e>
   81d26:	0a54      	lsrs	r4, r2, #9
   81d28:	2c04      	cmp	r4, #4
   81d2a:	d802      	bhi.n	81d32 <_free_r+0xee>
   81d2c:	0994      	lsrs	r4, r2, #6
   81d2e:	3438      	adds	r4, #56	; 0x38
   81d30:	e016      	b.n	81d60 <_free_r+0x11c>
   81d32:	2c14      	cmp	r4, #20
   81d34:	d801      	bhi.n	81d3a <_free_r+0xf6>
   81d36:	345b      	adds	r4, #91	; 0x5b
   81d38:	e012      	b.n	81d60 <_free_r+0x11c>
   81d3a:	2c54      	cmp	r4, #84	; 0x54
   81d3c:	d802      	bhi.n	81d44 <_free_r+0x100>
   81d3e:	0b14      	lsrs	r4, r2, #12
   81d40:	346e      	adds	r4, #110	; 0x6e
   81d42:	e00d      	b.n	81d60 <_free_r+0x11c>
   81d44:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
   81d48:	d802      	bhi.n	81d50 <_free_r+0x10c>
   81d4a:	0bd4      	lsrs	r4, r2, #15
   81d4c:	3477      	adds	r4, #119	; 0x77
   81d4e:	e007      	b.n	81d60 <_free_r+0x11c>
   81d50:	f240 5554 	movw	r5, #1364	; 0x554
   81d54:	42ac      	cmp	r4, r5
   81d56:	d802      	bhi.n	81d5e <_free_r+0x11a>
   81d58:	0c94      	lsrs	r4, r2, #18
   81d5a:	347c      	adds	r4, #124	; 0x7c
   81d5c:	e000      	b.n	81d60 <_free_r+0x11c>
   81d5e:	247e      	movs	r4, #126	; 0x7e
   81d60:	4d0f      	ldr	r5, [pc, #60]	; (81da0 <_free_r+0x15c>)
   81d62:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   81d66:	6881      	ldr	r1, [r0, #8]
   81d68:	4281      	cmp	r1, r0
   81d6a:	d10c      	bne.n	81d86 <_free_r+0x142>
   81d6c:	2201      	movs	r2, #1
   81d6e:	10a4      	asrs	r4, r4, #2
   81d70:	fa02 f404 	lsl.w	r4, r2, r4
   81d74:	6868      	ldr	r0, [r5, #4]
   81d76:	ea44 0200 	orr.w	r2, r4, r0
   81d7a:	606a      	str	r2, [r5, #4]
   81d7c:	4608      	mov	r0, r1
   81d7e:	e008      	b.n	81d92 <_free_r+0x14e>
   81d80:	6889      	ldr	r1, [r1, #8]
   81d82:	4281      	cmp	r1, r0
   81d84:	d004      	beq.n	81d90 <_free_r+0x14c>
   81d86:	684c      	ldr	r4, [r1, #4]
   81d88:	f024 0403 	bic.w	r4, r4, #3
   81d8c:	42a2      	cmp	r2, r4
   81d8e:	d3f7      	bcc.n	81d80 <_free_r+0x13c>
   81d90:	68c8      	ldr	r0, [r1, #12]
   81d92:	60d8      	str	r0, [r3, #12]
   81d94:	6099      	str	r1, [r3, #8]
   81d96:	6083      	str	r3, [r0, #8]
   81d98:	60cb      	str	r3, [r1, #12]
   81d9a:	e783      	b.n	81ca4 <_free_r+0x60>
   81d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81d9e:	bf00      	nop
   81da0:	20070438 	.word	0x20070438
   81da4:	20070844 	.word	0x20070844
   81da8:	200708d8 	.word	0x200708d8
   81dac:	20070440 	.word	0x20070440

00081db0 <_malloc_r>:
   81db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81db4:	f101 040b 	add.w	r4, r1, #11
   81db8:	2c16      	cmp	r4, #22
   81dba:	4606      	mov	r6, r0
   81dbc:	d903      	bls.n	81dc6 <_malloc_r+0x16>
   81dbe:	f034 0407 	bics.w	r4, r4, #7
   81dc2:	d501      	bpl.n	81dc8 <_malloc_r+0x18>
   81dc4:	e002      	b.n	81dcc <_malloc_r+0x1c>
   81dc6:	2410      	movs	r4, #16
   81dc8:	428c      	cmp	r4, r1
   81dca:	d202      	bcs.n	81dd2 <_malloc_r+0x22>
   81dcc:	250c      	movs	r5, #12
   81dce:	6035      	str	r5, [r6, #0]
   81dd0:	e1d9      	b.n	82186 <_malloc_r+0x3d6>
   81dd2:	4630      	mov	r0, r6
   81dd4:	f000 fa1f 	bl	82216 <__malloc_lock>
   81dd8:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   81ddc:	d214      	bcs.n	81e08 <_malloc_r+0x58>
   81dde:	4da0      	ldr	r5, [pc, #640]	; (82060 <_malloc_r+0x2b0>)
   81de0:	08e1      	lsrs	r1, r4, #3
   81de2:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
   81de6:	68c5      	ldr	r5, [r0, #12]
   81de8:	4285      	cmp	r5, r0
   81dea:	d105      	bne.n	81df8 <_malloc_r+0x48>
   81dec:	f105 0308 	add.w	r3, r5, #8
   81df0:	696d      	ldr	r5, [r5, #20]
   81df2:	1c8a      	adds	r2, r1, #2
   81df4:	429d      	cmp	r5, r3
   81df6:	d044      	beq.n	81e82 <_malloc_r+0xd2>
   81df8:	68e8      	ldr	r0, [r5, #12]
   81dfa:	68a9      	ldr	r1, [r5, #8]
   81dfc:	686a      	ldr	r2, [r5, #4]
   81dfe:	60c8      	str	r0, [r1, #12]
   81e00:	f022 0303 	bic.w	r3, r2, #3
   81e04:	6081      	str	r1, [r0, #8]
   81e06:	e059      	b.n	81ebc <_malloc_r+0x10c>
   81e08:	0a62      	lsrs	r2, r4, #9
   81e0a:	d101      	bne.n	81e10 <_malloc_r+0x60>
   81e0c:	08e2      	lsrs	r2, r4, #3
   81e0e:	e01b      	b.n	81e48 <_malloc_r+0x98>
   81e10:	2a04      	cmp	r2, #4
   81e12:	d802      	bhi.n	81e1a <_malloc_r+0x6a>
   81e14:	09a2      	lsrs	r2, r4, #6
   81e16:	3238      	adds	r2, #56	; 0x38
   81e18:	e016      	b.n	81e48 <_malloc_r+0x98>
   81e1a:	2a14      	cmp	r2, #20
   81e1c:	d801      	bhi.n	81e22 <_malloc_r+0x72>
   81e1e:	325b      	adds	r2, #91	; 0x5b
   81e20:	e012      	b.n	81e48 <_malloc_r+0x98>
   81e22:	2a54      	cmp	r2, #84	; 0x54
   81e24:	d802      	bhi.n	81e2c <_malloc_r+0x7c>
   81e26:	0b22      	lsrs	r2, r4, #12
   81e28:	326e      	adds	r2, #110	; 0x6e
   81e2a:	e00d      	b.n	81e48 <_malloc_r+0x98>
   81e2c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   81e30:	d802      	bhi.n	81e38 <_malloc_r+0x88>
   81e32:	0be2      	lsrs	r2, r4, #15
   81e34:	3277      	adds	r2, #119	; 0x77
   81e36:	e007      	b.n	81e48 <_malloc_r+0x98>
   81e38:	f240 5354 	movw	r3, #1364	; 0x554
   81e3c:	429a      	cmp	r2, r3
   81e3e:	d802      	bhi.n	81e46 <_malloc_r+0x96>
   81e40:	0ca2      	lsrs	r2, r4, #18
   81e42:	327c      	adds	r2, #124	; 0x7c
   81e44:	e000      	b.n	81e48 <_malloc_r+0x98>
   81e46:	227e      	movs	r2, #126	; 0x7e
   81e48:	4885      	ldr	r0, [pc, #532]	; (82060 <_malloc_r+0x2b0>)
   81e4a:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
   81e4e:	68dd      	ldr	r5, [r3, #12]
   81e50:	429d      	cmp	r5, r3
   81e52:	d015      	beq.n	81e80 <_malloc_r+0xd0>
   81e54:	6869      	ldr	r1, [r5, #4]
   81e56:	f021 0103 	bic.w	r1, r1, #3
   81e5a:	1b08      	subs	r0, r1, r4
   81e5c:	280f      	cmp	r0, #15
   81e5e:	dd01      	ble.n	81e64 <_malloc_r+0xb4>
   81e60:	3a01      	subs	r2, #1
   81e62:	e00d      	b.n	81e80 <_malloc_r+0xd0>
   81e64:	2800      	cmp	r0, #0
   81e66:	db09      	blt.n	81e7c <_malloc_r+0xcc>
   81e68:	68eb      	ldr	r3, [r5, #12]
   81e6a:	68aa      	ldr	r2, [r5, #8]
   81e6c:	60d3      	str	r3, [r2, #12]
   81e6e:	609a      	str	r2, [r3, #8]
   81e70:	186b      	adds	r3, r5, r1
   81e72:	685a      	ldr	r2, [r3, #4]
   81e74:	f042 0001 	orr.w	r0, r2, #1
   81e78:	6058      	str	r0, [r3, #4]
   81e7a:	e190      	b.n	8219e <_malloc_r+0x3ee>
   81e7c:	68ed      	ldr	r5, [r5, #12]
   81e7e:	e7e7      	b.n	81e50 <_malloc_r+0xa0>
   81e80:	3201      	adds	r2, #1
   81e82:	4977      	ldr	r1, [pc, #476]	; (82060 <_malloc_r+0x2b0>)
   81e84:	690d      	ldr	r5, [r1, #16]
   81e86:	f101 0708 	add.w	r7, r1, #8
   81e8a:	42bd      	cmp	r5, r7
   81e8c:	d068      	beq.n	81f60 <_malloc_r+0x1b0>
   81e8e:	6868      	ldr	r0, [r5, #4]
   81e90:	f020 0303 	bic.w	r3, r0, #3
   81e94:	1b18      	subs	r0, r3, r4
   81e96:	280f      	cmp	r0, #15
   81e98:	dd0c      	ble.n	81eb4 <_malloc_r+0x104>
   81e9a:	192b      	adds	r3, r5, r4
   81e9c:	614b      	str	r3, [r1, #20]
   81e9e:	610b      	str	r3, [r1, #16]
   81ea0:	f044 0401 	orr.w	r4, r4, #1
   81ea4:	f040 0101 	orr.w	r1, r0, #1
   81ea8:	606c      	str	r4, [r5, #4]
   81eaa:	60df      	str	r7, [r3, #12]
   81eac:	609f      	str	r7, [r3, #8]
   81eae:	6059      	str	r1, [r3, #4]
   81eb0:	5018      	str	r0, [r3, r0]
   81eb2:	e174      	b.n	8219e <_malloc_r+0x3ee>
   81eb4:	2800      	cmp	r0, #0
   81eb6:	614f      	str	r7, [r1, #20]
   81eb8:	610f      	str	r7, [r1, #16]
   81eba:	db01      	blt.n	81ec0 <_malloc_r+0x110>
   81ebc:	18eb      	adds	r3, r5, r3
   81ebe:	e7d8      	b.n	81e72 <_malloc_r+0xc2>
   81ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   81ec4:	d20f      	bcs.n	81ee6 <_malloc_r+0x136>
   81ec6:	08db      	lsrs	r3, r3, #3
   81ec8:	1098      	asrs	r0, r3, #2
   81eca:	2701      	movs	r7, #1
   81ecc:	fa07 f700 	lsl.w	r7, r7, r0
   81ed0:	6848      	ldr	r0, [r1, #4]
   81ed2:	4307      	orrs	r7, r0
   81ed4:	604f      	str	r7, [r1, #4]
   81ed6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   81eda:	688b      	ldr	r3, [r1, #8]
   81edc:	60e9      	str	r1, [r5, #12]
   81ede:	60ab      	str	r3, [r5, #8]
   81ee0:	60dd      	str	r5, [r3, #12]
   81ee2:	608d      	str	r5, [r1, #8]
   81ee4:	e03c      	b.n	81f60 <_malloc_r+0x1b0>
   81ee6:	0a58      	lsrs	r0, r3, #9
   81ee8:	2804      	cmp	r0, #4
   81eea:	d802      	bhi.n	81ef2 <_malloc_r+0x142>
   81eec:	0998      	lsrs	r0, r3, #6
   81eee:	3038      	adds	r0, #56	; 0x38
   81ef0:	e016      	b.n	81f20 <_malloc_r+0x170>
   81ef2:	2814      	cmp	r0, #20
   81ef4:	d801      	bhi.n	81efa <_malloc_r+0x14a>
   81ef6:	305b      	adds	r0, #91	; 0x5b
   81ef8:	e012      	b.n	81f20 <_malloc_r+0x170>
   81efa:	2854      	cmp	r0, #84	; 0x54
   81efc:	d802      	bhi.n	81f04 <_malloc_r+0x154>
   81efe:	0b18      	lsrs	r0, r3, #12
   81f00:	306e      	adds	r0, #110	; 0x6e
   81f02:	e00d      	b.n	81f20 <_malloc_r+0x170>
   81f04:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   81f08:	d802      	bhi.n	81f10 <_malloc_r+0x160>
   81f0a:	0bd8      	lsrs	r0, r3, #15
   81f0c:	3077      	adds	r0, #119	; 0x77
   81f0e:	e007      	b.n	81f20 <_malloc_r+0x170>
   81f10:	f240 5754 	movw	r7, #1364	; 0x554
   81f14:	42b8      	cmp	r0, r7
   81f16:	d802      	bhi.n	81f1e <_malloc_r+0x16e>
   81f18:	0c98      	lsrs	r0, r3, #18
   81f1a:	307c      	adds	r0, #124	; 0x7c
   81f1c:	e000      	b.n	81f20 <_malloc_r+0x170>
   81f1e:	207e      	movs	r0, #126	; 0x7e
   81f20:	f8df e13c 	ldr.w	lr, [pc, #316]	; 82060 <_malloc_r+0x2b0>
   81f24:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
   81f28:	68b9      	ldr	r1, [r7, #8]
   81f2a:	42b9      	cmp	r1, r7
   81f2c:	d10e      	bne.n	81f4c <_malloc_r+0x19c>
   81f2e:	1087      	asrs	r7, r0, #2
   81f30:	2301      	movs	r3, #1
   81f32:	fa03 f007 	lsl.w	r0, r3, r7
   81f36:	f8de 7004 	ldr.w	r7, [lr, #4]
   81f3a:	ea40 0307 	orr.w	r3, r0, r7
   81f3e:	f8ce 3004 	str.w	r3, [lr, #4]
   81f42:	4608      	mov	r0, r1
   81f44:	e008      	b.n	81f58 <_malloc_r+0x1a8>
   81f46:	6889      	ldr	r1, [r1, #8]
   81f48:	42b9      	cmp	r1, r7
   81f4a:	d004      	beq.n	81f56 <_malloc_r+0x1a6>
   81f4c:	6848      	ldr	r0, [r1, #4]
   81f4e:	f020 0003 	bic.w	r0, r0, #3
   81f52:	4283      	cmp	r3, r0
   81f54:	d3f7      	bcc.n	81f46 <_malloc_r+0x196>
   81f56:	68c8      	ldr	r0, [r1, #12]
   81f58:	60e8      	str	r0, [r5, #12]
   81f5a:	60a9      	str	r1, [r5, #8]
   81f5c:	60cd      	str	r5, [r1, #12]
   81f5e:	6085      	str	r5, [r0, #8]
   81f60:	1095      	asrs	r5, r2, #2
   81f62:	2001      	movs	r0, #1
   81f64:	fa00 f305 	lsl.w	r3, r0, r5
   81f68:	4f3d      	ldr	r7, [pc, #244]	; (82060 <_malloc_r+0x2b0>)
   81f6a:	6879      	ldr	r1, [r7, #4]
   81f6c:	428b      	cmp	r3, r1
   81f6e:	d85d      	bhi.n	8202c <_malloc_r+0x27c>
   81f70:	420b      	tst	r3, r1
   81f72:	d105      	bne.n	81f80 <_malloc_r+0x1d0>
   81f74:	f022 0203 	bic.w	r2, r2, #3
   81f78:	005b      	lsls	r3, r3, #1
   81f7a:	3204      	adds	r2, #4
   81f7c:	420b      	tst	r3, r1
   81f7e:	d0fb      	beq.n	81f78 <_malloc_r+0x1c8>
   81f80:	4d37      	ldr	r5, [pc, #220]	; (82060 <_malloc_r+0x2b0>)
   81f82:	4610      	mov	r0, r2
   81f84:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
   81f88:	4677      	mov	r7, lr
   81f8a:	68fd      	ldr	r5, [r7, #12]
   81f8c:	42bd      	cmp	r5, r7
   81f8e:	d02d      	beq.n	81fec <_malloc_r+0x23c>
   81f90:	6869      	ldr	r1, [r5, #4]
   81f92:	f021 0c03 	bic.w	ip, r1, #3
   81f96:	ebc4 010c 	rsb	r1, r4, ip
   81f9a:	290f      	cmp	r1, #15
   81f9c:	dd13      	ble.n	81fc6 <_malloc_r+0x216>
   81f9e:	192b      	adds	r3, r5, r4
   81fa0:	f044 0401 	orr.w	r4, r4, #1
   81fa4:	68ea      	ldr	r2, [r5, #12]
   81fa6:	606c      	str	r4, [r5, #4]
   81fa8:	f855 0f08 	ldr.w	r0, [r5, #8]!
   81fac:	5059      	str	r1, [r3, r1]
   81fae:	60c2      	str	r2, [r0, #12]
   81fb0:	6090      	str	r0, [r2, #8]
   81fb2:	4a2b      	ldr	r2, [pc, #172]	; (82060 <_malloc_r+0x2b0>)
   81fb4:	f041 0001 	orr.w	r0, r1, #1
   81fb8:	6153      	str	r3, [r2, #20]
   81fba:	6113      	str	r3, [r2, #16]
   81fbc:	3208      	adds	r2, #8
   81fbe:	60da      	str	r2, [r3, #12]
   81fc0:	609a      	str	r2, [r3, #8]
   81fc2:	6058      	str	r0, [r3, #4]
   81fc4:	e00c      	b.n	81fe0 <_malloc_r+0x230>
   81fc6:	2900      	cmp	r1, #0
   81fc8:	db0e      	blt.n	81fe8 <_malloc_r+0x238>
   81fca:	eb05 000c 	add.w	r0, r5, ip
   81fce:	6842      	ldr	r2, [r0, #4]
   81fd0:	68e9      	ldr	r1, [r5, #12]
   81fd2:	f042 0301 	orr.w	r3, r2, #1
   81fd6:	6043      	str	r3, [r0, #4]
   81fd8:	f855 0f08 	ldr.w	r0, [r5, #8]!
   81fdc:	60c1      	str	r1, [r0, #12]
   81fde:	6088      	str	r0, [r1, #8]
   81fe0:	4630      	mov	r0, r6
   81fe2:	f000 f919 	bl	82218 <__malloc_unlock>
   81fe6:	e0de      	b.n	821a6 <_malloc_r+0x3f6>
   81fe8:	68ed      	ldr	r5, [r5, #12]
   81fea:	e7cf      	b.n	81f8c <_malloc_r+0x1dc>
   81fec:	3001      	adds	r0, #1
   81fee:	0781      	lsls	r1, r0, #30
   81ff0:	f105 0708 	add.w	r7, r5, #8
   81ff4:	d1c9      	bne.n	81f8a <_malloc_r+0x1da>
   81ff6:	4671      	mov	r1, lr
   81ff8:	0795      	lsls	r5, r2, #30
   81ffa:	d105      	bne.n	82008 <_malloc_r+0x258>
   81ffc:	4a18      	ldr	r2, [pc, #96]	; (82060 <_malloc_r+0x2b0>)
   81ffe:	6855      	ldr	r5, [r2, #4]
   82000:	ea25 0503 	bic.w	r5, r5, r3
   82004:	6055      	str	r5, [r2, #4]
   82006:	e005      	b.n	82014 <_malloc_r+0x264>
   82008:	f1a1 0708 	sub.w	r7, r1, #8
   8200c:	6809      	ldr	r1, [r1, #0]
   8200e:	3a01      	subs	r2, #1
   82010:	42b9      	cmp	r1, r7
   82012:	d0f1      	beq.n	81ff8 <_malloc_r+0x248>
   82014:	4f12      	ldr	r7, [pc, #72]	; (82060 <_malloc_r+0x2b0>)
   82016:	005b      	lsls	r3, r3, #1
   82018:	687f      	ldr	r7, [r7, #4]
   8201a:	42bb      	cmp	r3, r7
   8201c:	d806      	bhi.n	8202c <_malloc_r+0x27c>
   8201e:	b12b      	cbz	r3, 8202c <_malloc_r+0x27c>
   82020:	4602      	mov	r2, r0
   82022:	423b      	tst	r3, r7
   82024:	d1ac      	bne.n	81f80 <_malloc_r+0x1d0>
   82026:	3204      	adds	r2, #4
   82028:	005b      	lsls	r3, r3, #1
   8202a:	e7fa      	b.n	82022 <_malloc_r+0x272>
   8202c:	4b0c      	ldr	r3, [pc, #48]	; (82060 <_malloc_r+0x2b0>)
   8202e:	689f      	ldr	r7, [r3, #8]
   82030:	4619      	mov	r1, r3
   82032:	6878      	ldr	r0, [r7, #4]
   82034:	f020 0903 	bic.w	r9, r0, #3
   82038:	45a1      	cmp	r9, r4
   8203a:	d304      	bcc.n	82046 <_malloc_r+0x296>
   8203c:	ebc4 0009 	rsb	r0, r4, r9
   82040:	280f      	cmp	r0, #15
   82042:	f300 80a2 	bgt.w	8218a <_malloc_r+0x3da>
   82046:	4a07      	ldr	r2, [pc, #28]	; (82064 <_malloc_r+0x2b4>)
   82048:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
   8204c:	6815      	ldr	r5, [r2, #0]
   8204e:	3301      	adds	r3, #1
   82050:	eb07 0a09 	add.w	sl, r7, r9
   82054:	eb04 0805 	add.w	r8, r4, r5
   82058:	d106      	bne.n	82068 <_malloc_r+0x2b8>
   8205a:	f108 0810 	add.w	r8, r8, #16
   8205e:	e00b      	b.n	82078 <_malloc_r+0x2c8>
   82060:	20070438 	.word	0x20070438
   82064:	200708d8 	.word	0x200708d8
   82068:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
   8206c:	f100 010f 	add.w	r1, r0, #15
   82070:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   82074:	f022 080f 	bic.w	r8, r2, #15
   82078:	4630      	mov	r0, r6
   8207a:	4641      	mov	r1, r8
   8207c:	f000 fa3c 	bl	824f8 <_sbrk_r>
   82080:	1c42      	adds	r2, r0, #1
   82082:	4605      	mov	r5, r0
   82084:	d071      	beq.n	8216a <_malloc_r+0x3ba>
   82086:	4550      	cmp	r0, sl
   82088:	d202      	bcs.n	82090 <_malloc_r+0x2e0>
   8208a:	4b48      	ldr	r3, [pc, #288]	; (821ac <_malloc_r+0x3fc>)
   8208c:	429f      	cmp	r7, r3
   8208e:	d16c      	bne.n	8216a <_malloc_r+0x3ba>
   82090:	4847      	ldr	r0, [pc, #284]	; (821b0 <_malloc_r+0x400>)
   82092:	4555      	cmp	r5, sl
   82094:	6841      	ldr	r1, [r0, #4]
   82096:	4a45      	ldr	r2, [pc, #276]	; (821ac <_malloc_r+0x3fc>)
   82098:	eb08 0301 	add.w	r3, r8, r1
   8209c:	6043      	str	r3, [r0, #4]
   8209e:	d107      	bne.n	820b0 <_malloc_r+0x300>
   820a0:	0529      	lsls	r1, r5, #20
   820a2:	d105      	bne.n	820b0 <_malloc_r+0x300>
   820a4:	6895      	ldr	r5, [r2, #8]
   820a6:	44c8      	add	r8, r9
   820a8:	f048 0001 	orr.w	r0, r8, #1
   820ac:	6068      	str	r0, [r5, #4]
   820ae:	e051      	b.n	82154 <_malloc_r+0x3a4>
   820b0:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
   820b4:	1c42      	adds	r2, r0, #1
   820b6:	d103      	bne.n	820c0 <_malloc_r+0x310>
   820b8:	4a3c      	ldr	r2, [pc, #240]	; (821ac <_malloc_r+0x3fc>)
   820ba:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
   820be:	e005      	b.n	820cc <_malloc_r+0x31c>
   820c0:	ebca 0a05 	rsb	sl, sl, r5
   820c4:	eb03 010a 	add.w	r1, r3, sl
   820c8:	4b39      	ldr	r3, [pc, #228]	; (821b0 <_malloc_r+0x400>)
   820ca:	6059      	str	r1, [r3, #4]
   820cc:	f015 0007 	ands.w	r0, r5, #7
   820d0:	bf1c      	itt	ne
   820d2:	f1c0 0008 	rsbne	r0, r0, #8
   820d6:	182d      	addne	r5, r5, r0
   820d8:	eb05 0c08 	add.w	ip, r5, r8
   820dc:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
   820e0:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
   820e4:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
   820e8:	4641      	mov	r1, r8
   820ea:	4630      	mov	r0, r6
   820ec:	f000 fa04 	bl	824f8 <_sbrk_r>
   820f0:	4a2f      	ldr	r2, [pc, #188]	; (821b0 <_malloc_r+0x400>)
   820f2:	1c43      	adds	r3, r0, #1
   820f4:	6853      	ldr	r3, [r2, #4]
   820f6:	bf08      	it	eq
   820f8:	f04f 0800 	moveq.w	r8, #0
   820fc:	eb08 0103 	add.w	r1, r8, r3
   82100:	bf08      	it	eq
   82102:	4628      	moveq	r0, r5
   82104:	6051      	str	r1, [r2, #4]
   82106:	1b40      	subs	r0, r0, r5
   82108:	4a28      	ldr	r2, [pc, #160]	; (821ac <_malloc_r+0x3fc>)
   8210a:	eb00 0308 	add.w	r3, r0, r8
   8210e:	f043 0101 	orr.w	r1, r3, #1
   82112:	4297      	cmp	r7, r2
   82114:	6095      	str	r5, [r2, #8]
   82116:	6069      	str	r1, [r5, #4]
   82118:	d01c      	beq.n	82154 <_malloc_r+0x3a4>
   8211a:	f1b9 0f0f 	cmp.w	r9, #15
   8211e:	d802      	bhi.n	82126 <_malloc_r+0x376>
   82120:	2201      	movs	r2, #1
   82122:	606a      	str	r2, [r5, #4]
   82124:	e021      	b.n	8216a <_malloc_r+0x3ba>
   82126:	687d      	ldr	r5, [r7, #4]
   82128:	f1a9 090c 	sub.w	r9, r9, #12
   8212c:	f029 0907 	bic.w	r9, r9, #7
   82130:	f005 0201 	and.w	r2, r5, #1
   82134:	2105      	movs	r1, #5
   82136:	eb07 0309 	add.w	r3, r7, r9
   8213a:	ea49 0002 	orr.w	r0, r9, r2
   8213e:	f1b9 0f0f 	cmp.w	r9, #15
   82142:	6078      	str	r0, [r7, #4]
   82144:	6059      	str	r1, [r3, #4]
   82146:	6099      	str	r1, [r3, #8]
   82148:	d904      	bls.n	82154 <_malloc_r+0x3a4>
   8214a:	4630      	mov	r0, r6
   8214c:	f107 0108 	add.w	r1, r7, #8
   82150:	f7ff fd78 	bl	81c44 <_free_r>
   82154:	4a16      	ldr	r2, [pc, #88]	; (821b0 <_malloc_r+0x400>)
   82156:	6853      	ldr	r3, [r2, #4]
   82158:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   8215a:	6b15      	ldr	r5, [r2, #48]	; 0x30
   8215c:	428b      	cmp	r3, r1
   8215e:	bf88      	it	hi
   82160:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   82162:	42ab      	cmp	r3, r5
   82164:	bf84      	itt	hi
   82166:	4d12      	ldrhi	r5, [pc, #72]	; (821b0 <_malloc_r+0x400>)
   82168:	632b      	strhi	r3, [r5, #48]	; 0x30
   8216a:	4810      	ldr	r0, [pc, #64]	; (821ac <_malloc_r+0x3fc>)
   8216c:	6882      	ldr	r2, [r0, #8]
   8216e:	6853      	ldr	r3, [r2, #4]
   82170:	f023 0103 	bic.w	r1, r3, #3
   82174:	42a1      	cmp	r1, r4
   82176:	ebc4 0001 	rsb	r0, r4, r1
   8217a:	d301      	bcc.n	82180 <_malloc_r+0x3d0>
   8217c:	280f      	cmp	r0, #15
   8217e:	dc04      	bgt.n	8218a <_malloc_r+0x3da>
   82180:	4630      	mov	r0, r6
   82182:	f000 f849 	bl	82218 <__malloc_unlock>
   82186:	2500      	movs	r5, #0
   82188:	e00d      	b.n	821a6 <_malloc_r+0x3f6>
   8218a:	4a08      	ldr	r2, [pc, #32]	; (821ac <_malloc_r+0x3fc>)
   8218c:	f044 0301 	orr.w	r3, r4, #1
   82190:	6895      	ldr	r5, [r2, #8]
   82192:	f040 0101 	orr.w	r1, r0, #1
   82196:	192c      	adds	r4, r5, r4
   82198:	606b      	str	r3, [r5, #4]
   8219a:	6094      	str	r4, [r2, #8]
   8219c:	6061      	str	r1, [r4, #4]
   8219e:	4630      	mov	r0, r6
   821a0:	f000 f83a 	bl	82218 <__malloc_unlock>
   821a4:	3508      	adds	r5, #8
   821a6:	4628      	mov	r0, r5
   821a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   821ac:	20070438 	.word	0x20070438
   821b0:	200708d8 	.word	0x200708d8

000821b4 <memchr>:
   821b4:	b510      	push	{r4, lr}
   821b6:	b2c9      	uxtb	r1, r1
   821b8:	4603      	mov	r3, r0
   821ba:	1882      	adds	r2, r0, r2
   821bc:	4293      	cmp	r3, r2
   821be:	4618      	mov	r0, r3
   821c0:	d004      	beq.n	821cc <memchr+0x18>
   821c2:	7804      	ldrb	r4, [r0, #0]
   821c4:	3301      	adds	r3, #1
   821c6:	428c      	cmp	r4, r1
   821c8:	d1f8      	bne.n	821bc <memchr+0x8>
   821ca:	e000      	b.n	821ce <memchr+0x1a>
   821cc:	2000      	movs	r0, #0
   821ce:	bd10      	pop	{r4, pc}

000821d0 <memcpy>:
   821d0:	b510      	push	{r4, lr}
   821d2:	2300      	movs	r3, #0
   821d4:	4293      	cmp	r3, r2
   821d6:	d003      	beq.n	821e0 <memcpy+0x10>
   821d8:	5ccc      	ldrb	r4, [r1, r3]
   821da:	54c4      	strb	r4, [r0, r3]
   821dc:	3301      	adds	r3, #1
   821de:	e7f9      	b.n	821d4 <memcpy+0x4>
   821e0:	bd10      	pop	{r4, pc}

000821e2 <memmove>:
   821e2:	4281      	cmp	r1, r0
   821e4:	b570      	push	{r4, r5, r6, lr}
   821e6:	d20e      	bcs.n	82206 <memmove+0x24>
   821e8:	188c      	adds	r4, r1, r2
   821ea:	42a0      	cmp	r0, r4
   821ec:	d20b      	bcs.n	82206 <memmove+0x24>
   821ee:	1885      	adds	r5, r0, r2
   821f0:	4613      	mov	r3, r2
   821f2:	f113 33ff 	adds.w	r3, r3, #4294967295
   821f6:	d305      	bcc.n	82204 <memmove+0x22>
   821f8:	4251      	negs	r1, r2
   821fa:	1866      	adds	r6, r4, r1
   821fc:	5cf6      	ldrb	r6, [r6, r3]
   821fe:	1869      	adds	r1, r5, r1
   82200:	54ce      	strb	r6, [r1, r3]
   82202:	e7f6      	b.n	821f2 <memmove+0x10>
   82204:	bd70      	pop	{r4, r5, r6, pc}
   82206:	2300      	movs	r3, #0
   82208:	4293      	cmp	r3, r2
   8220a:	d003      	beq.n	82214 <memmove+0x32>
   8220c:	5ccc      	ldrb	r4, [r1, r3]
   8220e:	54c4      	strb	r4, [r0, r3]
   82210:	3301      	adds	r3, #1
   82212:	e7f9      	b.n	82208 <memmove+0x26>
   82214:	bd70      	pop	{r4, r5, r6, pc}

00082216 <__malloc_lock>:
   82216:	4770      	bx	lr

00082218 <__malloc_unlock>:
   82218:	4770      	bx	lr
	...

0008221c <_realloc_r>:
   8221c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82220:	4681      	mov	r9, r0
   82222:	4616      	mov	r6, r2
   82224:	460c      	mov	r4, r1
   82226:	b921      	cbnz	r1, 82232 <_realloc_r+0x16>
   82228:	4611      	mov	r1, r2
   8222a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8222e:	f7ff bdbf 	b.w	81db0 <_malloc_r>
   82232:	f7ff fff0 	bl	82216 <__malloc_lock>
   82236:	f106 070b 	add.w	r7, r6, #11
   8223a:	f854 5c04 	ldr.w	r5, [r4, #-4]
   8223e:	2f16      	cmp	r7, #22
   82240:	f1a4 0b08 	sub.w	fp, r4, #8
   82244:	f025 0803 	bic.w	r8, r5, #3
   82248:	d903      	bls.n	82252 <_realloc_r+0x36>
   8224a:	f037 0707 	bics.w	r7, r7, #7
   8224e:	d501      	bpl.n	82254 <_realloc_r+0x38>
   82250:	e002      	b.n	82258 <_realloc_r+0x3c>
   82252:	2710      	movs	r7, #16
   82254:	42b7      	cmp	r7, r6
   82256:	d204      	bcs.n	82262 <_realloc_r+0x46>
   82258:	200c      	movs	r0, #12
   8225a:	f8c9 0000 	str.w	r0, [r9]
   8225e:	2600      	movs	r6, #0
   82260:	e145      	b.n	824ee <_realloc_r+0x2d2>
   82262:	45b8      	cmp	r8, r7
   82264:	f280 811a 	bge.w	8249c <_realloc_r+0x280>
   82268:	4aa2      	ldr	r2, [pc, #648]	; (824f4 <_realloc_r+0x2d8>)
   8226a:	eb0b 0308 	add.w	r3, fp, r8
   8226e:	6891      	ldr	r1, [r2, #8]
   82270:	428b      	cmp	r3, r1
   82272:	d006      	beq.n	82282 <_realloc_r+0x66>
   82274:	6858      	ldr	r0, [r3, #4]
   82276:	f020 0201 	bic.w	r2, r0, #1
   8227a:	1898      	adds	r0, r3, r2
   8227c:	6842      	ldr	r2, [r0, #4]
   8227e:	07d0      	lsls	r0, r2, #31
   82280:	d426      	bmi.n	822d0 <_realloc_r+0xb4>
   82282:	685a      	ldr	r2, [r3, #4]
   82284:	428b      	cmp	r3, r1
   82286:	f022 0003 	bic.w	r0, r2, #3
   8228a:	eb00 0a08 	add.w	sl, r0, r8
   8228e:	d118      	bne.n	822c2 <_realloc_r+0xa6>
   82290:	f107 0210 	add.w	r2, r7, #16
   82294:	4592      	cmp	sl, r2
   82296:	db1d      	blt.n	822d4 <_realloc_r+0xb8>
   82298:	ebc7 0a0a 	rsb	sl, r7, sl
   8229c:	eb0b 0507 	add.w	r5, fp, r7
   822a0:	f04a 0101 	orr.w	r1, sl, #1
   822a4:	6069      	str	r1, [r5, #4]
   822a6:	f854 2c04 	ldr.w	r2, [r4, #-4]
   822aa:	4e92      	ldr	r6, [pc, #584]	; (824f4 <_realloc_r+0x2d8>)
   822ac:	f002 0301 	and.w	r3, r2, #1
   822b0:	431f      	orrs	r7, r3
   822b2:	60b5      	str	r5, [r6, #8]
   822b4:	f844 7c04 	str.w	r7, [r4, #-4]
   822b8:	4648      	mov	r0, r9
   822ba:	f7ff ffad 	bl	82218 <__malloc_unlock>
   822be:	4626      	mov	r6, r4
   822c0:	e115      	b.n	824ee <_realloc_r+0x2d2>
   822c2:	45ba      	cmp	sl, r7
   822c4:	db06      	blt.n	822d4 <_realloc_r+0xb8>
   822c6:	68dd      	ldr	r5, [r3, #12]
   822c8:	689e      	ldr	r6, [r3, #8]
   822ca:	60f5      	str	r5, [r6, #12]
   822cc:	60ae      	str	r6, [r5, #8]
   822ce:	e0e6      	b.n	8249e <_realloc_r+0x282>
   822d0:	2000      	movs	r0, #0
   822d2:	4603      	mov	r3, r0
   822d4:	07ea      	lsls	r2, r5, #31
   822d6:	f100 8091 	bmi.w	823fc <_realloc_r+0x1e0>
   822da:	f854 5c08 	ldr.w	r5, [r4, #-8]
   822de:	ebc5 050b 	rsb	r5, r5, fp
   822e2:	686a      	ldr	r2, [r5, #4]
   822e4:	f022 0203 	bic.w	r2, r2, #3
   822e8:	2b00      	cmp	r3, #0
   822ea:	d051      	beq.n	82390 <_realloc_r+0x174>
   822ec:	eb02 0a08 	add.w	sl, r2, r8
   822f0:	428b      	cmp	r3, r1
   822f2:	4482      	add	sl, r0
   822f4:	d145      	bne.n	82382 <_realloc_r+0x166>
   822f6:	f107 0310 	add.w	r3, r7, #16
   822fa:	459a      	cmp	sl, r3
   822fc:	db48      	blt.n	82390 <_realloc_r+0x174>
   822fe:	462e      	mov	r6, r5
   82300:	68e9      	ldr	r1, [r5, #12]
   82302:	f856 3f08 	ldr.w	r3, [r6, #8]!
   82306:	f1a8 0204 	sub.w	r2, r8, #4
   8230a:	2a24      	cmp	r2, #36	; 0x24
   8230c:	60d9      	str	r1, [r3, #12]
   8230e:	608b      	str	r3, [r1, #8]
   82310:	d825      	bhi.n	8235e <_realloc_r+0x142>
   82312:	2a13      	cmp	r2, #19
   82314:	d91b      	bls.n	8234e <_realloc_r+0x132>
   82316:	6821      	ldr	r1, [r4, #0]
   82318:	2a1b      	cmp	r2, #27
   8231a:	60a9      	str	r1, [r5, #8]
   8231c:	6863      	ldr	r3, [r4, #4]
   8231e:	60eb      	str	r3, [r5, #12]
   82320:	d803      	bhi.n	8232a <_realloc_r+0x10e>
   82322:	f105 0010 	add.w	r0, r5, #16
   82326:	3408      	adds	r4, #8
   82328:	e012      	b.n	82350 <_realloc_r+0x134>
   8232a:	68a0      	ldr	r0, [r4, #8]
   8232c:	2a24      	cmp	r2, #36	; 0x24
   8232e:	6128      	str	r0, [r5, #16]
   82330:	68e1      	ldr	r1, [r4, #12]
   82332:	6169      	str	r1, [r5, #20]
   82334:	d003      	beq.n	8233e <_realloc_r+0x122>
   82336:	f105 0018 	add.w	r0, r5, #24
   8233a:	3410      	adds	r4, #16
   8233c:	e008      	b.n	82350 <_realloc_r+0x134>
   8233e:	6922      	ldr	r2, [r4, #16]
   82340:	f105 0020 	add.w	r0, r5, #32
   82344:	61aa      	str	r2, [r5, #24]
   82346:	6963      	ldr	r3, [r4, #20]
   82348:	3418      	adds	r4, #24
   8234a:	61eb      	str	r3, [r5, #28]
   8234c:	e000      	b.n	82350 <_realloc_r+0x134>
   8234e:	4630      	mov	r0, r6
   82350:	6821      	ldr	r1, [r4, #0]
   82352:	6001      	str	r1, [r0, #0]
   82354:	6862      	ldr	r2, [r4, #4]
   82356:	6042      	str	r2, [r0, #4]
   82358:	68a3      	ldr	r3, [r4, #8]
   8235a:	6083      	str	r3, [r0, #8]
   8235c:	e003      	b.n	82366 <_realloc_r+0x14a>
   8235e:	4630      	mov	r0, r6
   82360:	4621      	mov	r1, r4
   82362:	f7ff ff3e 	bl	821e2 <memmove>
   82366:	ebc7 0a0a 	rsb	sl, r7, sl
   8236a:	19e8      	adds	r0, r5, r7
   8236c:	f04a 0201 	orr.w	r2, sl, #1
   82370:	6042      	str	r2, [r0, #4]
   82372:	686b      	ldr	r3, [r5, #4]
   82374:	495f      	ldr	r1, [pc, #380]	; (824f4 <_realloc_r+0x2d8>)
   82376:	6088      	str	r0, [r1, #8]
   82378:	f003 0001 	and.w	r0, r3, #1
   8237c:	4307      	orrs	r7, r0
   8237e:	606f      	str	r7, [r5, #4]
   82380:	e088      	b.n	82494 <_realloc_r+0x278>
   82382:	45ba      	cmp	sl, r7
   82384:	db04      	blt.n	82390 <_realloc_r+0x174>
   82386:	68d9      	ldr	r1, [r3, #12]
   82388:	6898      	ldr	r0, [r3, #8]
   8238a:	60c1      	str	r1, [r0, #12]
   8238c:	6088      	str	r0, [r1, #8]
   8238e:	e003      	b.n	82398 <_realloc_r+0x17c>
   82390:	eb02 0a08 	add.w	sl, r2, r8
   82394:	45ba      	cmp	sl, r7
   82396:	db31      	blt.n	823fc <_realloc_r+0x1e0>
   82398:	4628      	mov	r0, r5
   8239a:	68eb      	ldr	r3, [r5, #12]
   8239c:	f850 1f08 	ldr.w	r1, [r0, #8]!
   823a0:	f1a8 0204 	sub.w	r2, r8, #4
   823a4:	2a24      	cmp	r2, #36	; 0x24
   823a6:	60cb      	str	r3, [r1, #12]
   823a8:	6099      	str	r1, [r3, #8]
   823aa:	d823      	bhi.n	823f4 <_realloc_r+0x1d8>
   823ac:	2a13      	cmp	r2, #19
   823ae:	d91a      	bls.n	823e6 <_realloc_r+0x1ca>
   823b0:	6820      	ldr	r0, [r4, #0]
   823b2:	2a1b      	cmp	r2, #27
   823b4:	60a8      	str	r0, [r5, #8]
   823b6:	6866      	ldr	r6, [r4, #4]
   823b8:	60ee      	str	r6, [r5, #12]
   823ba:	d803      	bhi.n	823c4 <_realloc_r+0x1a8>
   823bc:	f105 0010 	add.w	r0, r5, #16
   823c0:	3408      	adds	r4, #8
   823c2:	e010      	b.n	823e6 <_realloc_r+0x1ca>
   823c4:	68a3      	ldr	r3, [r4, #8]
   823c6:	2a24      	cmp	r2, #36	; 0x24
   823c8:	612b      	str	r3, [r5, #16]
   823ca:	68e1      	ldr	r1, [r4, #12]
   823cc:	6169      	str	r1, [r5, #20]
   823ce:	d003      	beq.n	823d8 <_realloc_r+0x1bc>
   823d0:	f105 0018 	add.w	r0, r5, #24
   823d4:	3410      	adds	r4, #16
   823d6:	e006      	b.n	823e6 <_realloc_r+0x1ca>
   823d8:	6922      	ldr	r2, [r4, #16]
   823da:	61aa      	str	r2, [r5, #24]
   823dc:	6960      	ldr	r0, [r4, #20]
   823de:	3418      	adds	r4, #24
   823e0:	61e8      	str	r0, [r5, #28]
   823e2:	f105 0020 	add.w	r0, r5, #32
   823e6:	6826      	ldr	r6, [r4, #0]
   823e8:	6006      	str	r6, [r0, #0]
   823ea:	6863      	ldr	r3, [r4, #4]
   823ec:	6043      	str	r3, [r0, #4]
   823ee:	68a1      	ldr	r1, [r4, #8]
   823f0:	6081      	str	r1, [r0, #8]
   823f2:	e055      	b.n	824a0 <_realloc_r+0x284>
   823f4:	4621      	mov	r1, r4
   823f6:	f7ff fef4 	bl	821e2 <memmove>
   823fa:	e051      	b.n	824a0 <_realloc_r+0x284>
   823fc:	4631      	mov	r1, r6
   823fe:	4648      	mov	r0, r9
   82400:	f7ff fcd6 	bl	81db0 <_malloc_r>
   82404:	4606      	mov	r6, r0
   82406:	2800      	cmp	r0, #0
   82408:	d044      	beq.n	82494 <_realloc_r+0x278>
   8240a:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8240e:	f1a0 0208 	sub.w	r2, r0, #8
   82412:	f021 0301 	bic.w	r3, r1, #1
   82416:	eb0b 0103 	add.w	r1, fp, r3
   8241a:	428a      	cmp	r2, r1
   8241c:	d106      	bne.n	8242c <_realloc_r+0x210>
   8241e:	f850 6c04 	ldr.w	r6, [r0, #-4]
   82422:	f026 0503 	bic.w	r5, r6, #3
   82426:	eb05 0a08 	add.w	sl, r5, r8
   8242a:	e038      	b.n	8249e <_realloc_r+0x282>
   8242c:	f1a8 0204 	sub.w	r2, r8, #4
   82430:	2a24      	cmp	r2, #36	; 0x24
   82432:	d828      	bhi.n	82486 <_realloc_r+0x26a>
   82434:	2a13      	cmp	r2, #19
   82436:	d91e      	bls.n	82476 <_realloc_r+0x25a>
   82438:	6823      	ldr	r3, [r4, #0]
   8243a:	2a1b      	cmp	r2, #27
   8243c:	6003      	str	r3, [r0, #0]
   8243e:	6861      	ldr	r1, [r4, #4]
   82440:	6041      	str	r1, [r0, #4]
   82442:	d804      	bhi.n	8244e <_realloc_r+0x232>
   82444:	f100 0008 	add.w	r0, r0, #8
   82448:	f104 0208 	add.w	r2, r4, #8
   8244c:	e014      	b.n	82478 <_realloc_r+0x25c>
   8244e:	68a0      	ldr	r0, [r4, #8]
   82450:	2a24      	cmp	r2, #36	; 0x24
   82452:	60b0      	str	r0, [r6, #8]
   82454:	68e3      	ldr	r3, [r4, #12]
   82456:	60f3      	str	r3, [r6, #12]
   82458:	d004      	beq.n	82464 <_realloc_r+0x248>
   8245a:	f106 0010 	add.w	r0, r6, #16
   8245e:	f104 0210 	add.w	r2, r4, #16
   82462:	e009      	b.n	82478 <_realloc_r+0x25c>
   82464:	6922      	ldr	r2, [r4, #16]
   82466:	f106 0018 	add.w	r0, r6, #24
   8246a:	6132      	str	r2, [r6, #16]
   8246c:	6961      	ldr	r1, [r4, #20]
   8246e:	f104 0218 	add.w	r2, r4, #24
   82472:	6171      	str	r1, [r6, #20]
   82474:	e000      	b.n	82478 <_realloc_r+0x25c>
   82476:	4622      	mov	r2, r4
   82478:	6813      	ldr	r3, [r2, #0]
   8247a:	6003      	str	r3, [r0, #0]
   8247c:	6851      	ldr	r1, [r2, #4]
   8247e:	6041      	str	r1, [r0, #4]
   82480:	6892      	ldr	r2, [r2, #8]
   82482:	6082      	str	r2, [r0, #8]
   82484:	e002      	b.n	8248c <_realloc_r+0x270>
   82486:	4621      	mov	r1, r4
   82488:	f7ff feab 	bl	821e2 <memmove>
   8248c:	4648      	mov	r0, r9
   8248e:	4621      	mov	r1, r4
   82490:	f7ff fbd8 	bl	81c44 <_free_r>
   82494:	4648      	mov	r0, r9
   82496:	f7ff febf 	bl	82218 <__malloc_unlock>
   8249a:	e028      	b.n	824ee <_realloc_r+0x2d2>
   8249c:	46c2      	mov	sl, r8
   8249e:	465d      	mov	r5, fp
   824a0:	ebc7 000a 	rsb	r0, r7, sl
   824a4:	280f      	cmp	r0, #15
   824a6:	686a      	ldr	r2, [r5, #4]
   824a8:	d911      	bls.n	824ce <_realloc_r+0x2b2>
   824aa:	f002 0601 	and.w	r6, r2, #1
   824ae:	19e9      	adds	r1, r5, r7
   824b0:	f040 0301 	orr.w	r3, r0, #1
   824b4:	4337      	orrs	r7, r6
   824b6:	606f      	str	r7, [r5, #4]
   824b8:	1808      	adds	r0, r1, r0
   824ba:	604b      	str	r3, [r1, #4]
   824bc:	6842      	ldr	r2, [r0, #4]
   824be:	3108      	adds	r1, #8
   824c0:	f042 0601 	orr.w	r6, r2, #1
   824c4:	6046      	str	r6, [r0, #4]
   824c6:	4648      	mov	r0, r9
   824c8:	f7ff fbbc 	bl	81c44 <_free_r>
   824cc:	e00a      	b.n	824e4 <_realloc_r+0x2c8>
   824ce:	f002 0601 	and.w	r6, r2, #1
   824d2:	ea4a 0306 	orr.w	r3, sl, r6
   824d6:	606b      	str	r3, [r5, #4]
   824d8:	eb05 010a 	add.w	r1, r5, sl
   824dc:	6848      	ldr	r0, [r1, #4]
   824de:	f040 0201 	orr.w	r2, r0, #1
   824e2:	604a      	str	r2, [r1, #4]
   824e4:	4648      	mov	r0, r9
   824e6:	f7ff fe97 	bl	82218 <__malloc_unlock>
   824ea:	f105 0608 	add.w	r6, r5, #8
   824ee:	4630      	mov	r0, r6
   824f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   824f4:	20070438 	.word	0x20070438

000824f8 <_sbrk_r>:
   824f8:	b538      	push	{r3, r4, r5, lr}
   824fa:	4c06      	ldr	r4, [pc, #24]	; (82514 <_sbrk_r+0x1c>)
   824fc:	2300      	movs	r3, #0
   824fe:	4605      	mov	r5, r0
   82500:	4608      	mov	r0, r1
   82502:	6023      	str	r3, [r4, #0]
   82504:	f7fe fdfa 	bl	810fc <_sbrk>
   82508:	1c43      	adds	r3, r0, #1
   8250a:	d102      	bne.n	82512 <_sbrk_r+0x1a>
   8250c:	6821      	ldr	r1, [r4, #0]
   8250e:	b101      	cbz	r1, 82512 <_sbrk_r+0x1a>
   82510:	6029      	str	r1, [r5, #0]
   82512:	bd38      	pop	{r3, r4, r5, pc}
   82514:	2007090c 	.word	0x2007090c

00082518 <__ssprint_r>:
   82518:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8251c:	4607      	mov	r7, r0
   8251e:	6890      	ldr	r0, [r2, #8]
   82520:	460c      	mov	r4, r1
   82522:	4615      	mov	r5, r2
   82524:	f8d2 8000 	ldr.w	r8, [r2]
   82528:	b908      	cbnz	r0, 8252e <__ssprint_r+0x16>
   8252a:	6050      	str	r0, [r2, #4]
   8252c:	e06f      	b.n	8260e <__ssprint_r+0xf6>
   8252e:	f04f 0b00 	mov.w	fp, #0
   82532:	465e      	mov	r6, fp
   82534:	b936      	cbnz	r6, 82544 <__ssprint_r+0x2c>
   82536:	f8d8 b000 	ldr.w	fp, [r8]
   8253a:	f8d8 6004 	ldr.w	r6, [r8, #4]
   8253e:	f108 0808 	add.w	r8, r8, #8
   82542:	e7f7      	b.n	82534 <__ssprint_r+0x1c>
   82544:	68a3      	ldr	r3, [r4, #8]
   82546:	429e      	cmp	r6, r3
   82548:	d34c      	bcc.n	825e4 <__ssprint_r+0xcc>
   8254a:	89a2      	ldrh	r2, [r4, #12]
   8254c:	f412 6f90 	tst.w	r2, #1152	; 0x480
   82550:	d046      	beq.n	825e0 <__ssprint_r+0xc8>
   82552:	6823      	ldr	r3, [r4, #0]
   82554:	6960      	ldr	r0, [r4, #20]
   82556:	6921      	ldr	r1, [r4, #16]
   82558:	f04f 0a03 	mov.w	sl, #3
   8255c:	ebc1 0903 	rsb	r9, r1, r3
   82560:	fb0a f300 	mul.w	r3, sl, r0
   82564:	2002      	movs	r0, #2
   82566:	fb93 faf0 	sdiv	sl, r3, r0
   8256a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
   8256e:	f109 0301 	add.w	r3, r9, #1
   82572:	1998      	adds	r0, r3, r6
   82574:	b213      	sxth	r3, r2
   82576:	4582      	cmp	sl, r0
   82578:	bf38      	it	cc
   8257a:	4682      	movcc	sl, r0
   8257c:	4638      	mov	r0, r7
   8257e:	b183      	cbz	r3, 825a2 <__ssprint_r+0x8a>
   82580:	4651      	mov	r1, sl
   82582:	f7ff fc15 	bl	81db0 <_malloc_r>
   82586:	b1a8      	cbz	r0, 825b4 <__ssprint_r+0x9c>
   82588:	6921      	ldr	r1, [r4, #16]
   8258a:	464a      	mov	r2, r9
   8258c:	9001      	str	r0, [sp, #4]
   8258e:	f7ff fe1f 	bl	821d0 <memcpy>
   82592:	89a0      	ldrh	r0, [r4, #12]
   82594:	f420 6290 	bic.w	r2, r0, #1152	; 0x480
   82598:	f042 0180 	orr.w	r1, r2, #128	; 0x80
   8259c:	81a1      	strh	r1, [r4, #12]
   8259e:	9901      	ldr	r1, [sp, #4]
   825a0:	e014      	b.n	825cc <__ssprint_r+0xb4>
   825a2:	4652      	mov	r2, sl
   825a4:	f7ff fe3a 	bl	8221c <_realloc_r>
   825a8:	4601      	mov	r1, r0
   825aa:	b978      	cbnz	r0, 825cc <__ssprint_r+0xb4>
   825ac:	4638      	mov	r0, r7
   825ae:	6921      	ldr	r1, [r4, #16]
   825b0:	f7ff fb48 	bl	81c44 <_free_r>
   825b4:	89a3      	ldrh	r3, [r4, #12]
   825b6:	200c      	movs	r0, #12
   825b8:	2100      	movs	r1, #0
   825ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   825be:	6038      	str	r0, [r7, #0]
   825c0:	81a2      	strh	r2, [r4, #12]
   825c2:	f04f 30ff 	mov.w	r0, #4294967295
   825c6:	60a9      	str	r1, [r5, #8]
   825c8:	6069      	str	r1, [r5, #4]
   825ca:	e020      	b.n	8260e <__ssprint_r+0xf6>
   825cc:	eb01 0309 	add.w	r3, r1, r9
   825d0:	ebc9 000a 	rsb	r0, r9, sl
   825d4:	6023      	str	r3, [r4, #0]
   825d6:	6121      	str	r1, [r4, #16]
   825d8:	f8c4 a014 	str.w	sl, [r4, #20]
   825dc:	4633      	mov	r3, r6
   825de:	60a0      	str	r0, [r4, #8]
   825e0:	429e      	cmp	r6, r3
   825e2:	d200      	bcs.n	825e6 <__ssprint_r+0xce>
   825e4:	4633      	mov	r3, r6
   825e6:	461a      	mov	r2, r3
   825e8:	4659      	mov	r1, fp
   825ea:	6820      	ldr	r0, [r4, #0]
   825ec:	9301      	str	r3, [sp, #4]
   825ee:	f7ff fdf8 	bl	821e2 <memmove>
   825f2:	68a2      	ldr	r2, [r4, #8]
   825f4:	9901      	ldr	r1, [sp, #4]
   825f6:	6823      	ldr	r3, [r4, #0]
   825f8:	1a50      	subs	r0, r2, r1
   825fa:	185a      	adds	r2, r3, r1
   825fc:	68a9      	ldr	r1, [r5, #8]
   825fe:	60a0      	str	r0, [r4, #8]
   82600:	1b8e      	subs	r6, r1, r6
   82602:	6022      	str	r2, [r4, #0]
   82604:	60ae      	str	r6, [r5, #8]
   82606:	2e00      	cmp	r6, #0
   82608:	d195      	bne.n	82536 <__ssprint_r+0x1e>
   8260a:	606e      	str	r6, [r5, #4]
   8260c:	4630      	mov	r0, r6
   8260e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00082612 <_svfiprintf_r>:
   82612:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82616:	461e      	mov	r6, r3
   82618:	898b      	ldrh	r3, [r1, #12]
   8261a:	4689      	mov	r9, r1
   8261c:	f003 0180 	and.w	r1, r3, #128	; 0x80
   82620:	4614      	mov	r4, r2
   82622:	b20a      	sxth	r2, r1
   82624:	b0a9      	sub	sp, #164	; 0xa4
   82626:	4683      	mov	fp, r0
   82628:	b19a      	cbz	r2, 82652 <_svfiprintf_r+0x40>
   8262a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   8262e:	b983      	cbnz	r3, 82652 <_svfiprintf_r+0x40>
   82630:	2140      	movs	r1, #64	; 0x40
   82632:	f7ff fbbd 	bl	81db0 <_malloc_r>
   82636:	f8c9 0000 	str.w	r0, [r9]
   8263a:	f8c9 0010 	str.w	r0, [r9, #16]
   8263e:	b928      	cbnz	r0, 8264c <_svfiprintf_r+0x3a>
   82640:	220c      	movs	r2, #12
   82642:	f8cb 2000 	str.w	r2, [fp]
   82646:	f04f 30ff 	mov.w	r0, #4294967295
   8264a:	e3db      	b.n	82e04 <_svfiprintf_r+0x7f2>
   8264c:	2040      	movs	r0, #64	; 0x40
   8264e:	f8c9 0014 	str.w	r0, [r9, #20]
   82652:	2100      	movs	r1, #0
   82654:	ad18      	add	r5, sp, #96	; 0x60
   82656:	950b      	str	r5, [sp, #44]	; 0x2c
   82658:	910d      	str	r1, [sp, #52]	; 0x34
   8265a:	910c      	str	r1, [sp, #48]	; 0x30
   8265c:	9401      	str	r4, [sp, #4]
   8265e:	9105      	str	r1, [sp, #20]
   82660:	9104      	str	r1, [sp, #16]
   82662:	46a8      	mov	r8, r5
   82664:	9b01      	ldr	r3, [sp, #4]
   82666:	461c      	mov	r4, r3
   82668:	f813 2b01 	ldrb.w	r2, [r3], #1
   8266c:	b91a      	cbnz	r2, 82676 <_svfiprintf_r+0x64>
   8266e:	9801      	ldr	r0, [sp, #4]
   82670:	1a25      	subs	r5, r4, r0
   82672:	d103      	bne.n	8267c <_svfiprintf_r+0x6a>
   82674:	e01d      	b.n	826b2 <_svfiprintf_r+0xa0>
   82676:	2a25      	cmp	r2, #37	; 0x25
   82678:	d1f5      	bne.n	82666 <_svfiprintf_r+0x54>
   8267a:	e7f8      	b.n	8266e <_svfiprintf_r+0x5c>
   8267c:	9a01      	ldr	r2, [sp, #4]
   8267e:	990d      	ldr	r1, [sp, #52]	; 0x34
   82680:	e888 0024 	stmia.w	r8, {r2, r5}
   82684:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   82686:	194b      	adds	r3, r1, r5
   82688:	1c50      	adds	r0, r2, #1
   8268a:	2807      	cmp	r0, #7
   8268c:	930d      	str	r3, [sp, #52]	; 0x34
   8268e:	900c      	str	r0, [sp, #48]	; 0x30
   82690:	dc02      	bgt.n	82698 <_svfiprintf_r+0x86>
   82692:	f108 0808 	add.w	r8, r8, #8
   82696:	e009      	b.n	826ac <_svfiprintf_r+0x9a>
   82698:	4658      	mov	r0, fp
   8269a:	4649      	mov	r1, r9
   8269c:	aa0b      	add	r2, sp, #44	; 0x2c
   8269e:	f7ff ff3b 	bl	82518 <__ssprint_r>
   826a2:	2800      	cmp	r0, #0
   826a4:	f040 83a3 	bne.w	82dee <_svfiprintf_r+0x7dc>
   826a8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   826ac:	9904      	ldr	r1, [sp, #16]
   826ae:	194b      	adds	r3, r1, r5
   826b0:	9304      	str	r3, [sp, #16]
   826b2:	7822      	ldrb	r2, [r4, #0]
   826b4:	2a00      	cmp	r2, #0
   826b6:	f000 8393 	beq.w	82de0 <_svfiprintf_r+0x7ce>
   826ba:	2200      	movs	r2, #0
   826bc:	3401      	adds	r4, #1
   826be:	9401      	str	r4, [sp, #4]
   826c0:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   826c4:	f04f 3cff 	mov.w	ip, #4294967295
   826c8:	9203      	str	r2, [sp, #12]
   826ca:	4617      	mov	r7, r2
   826cc:	9801      	ldr	r0, [sp, #4]
   826ce:	f810 3b01 	ldrb.w	r3, [r0], #1
   826d2:	9001      	str	r0, [sp, #4]
   826d4:	2b63      	cmp	r3, #99	; 0x63
   826d6:	f000 80b3 	beq.w	82840 <_svfiprintf_r+0x22e>
   826da:	dc33      	bgt.n	82744 <_svfiprintf_r+0x132>
   826dc:	2b39      	cmp	r3, #57	; 0x39
   826de:	dc1a      	bgt.n	82716 <_svfiprintf_r+0x104>
   826e0:	2b31      	cmp	r3, #49	; 0x31
   826e2:	f280 8091 	bge.w	82808 <_svfiprintf_r+0x1f6>
   826e6:	2b2b      	cmp	r3, #43	; 0x2b
   826e8:	d101      	bne.n	826ee <_svfiprintf_r+0xdc>
   826ea:	461a      	mov	r2, r3
   826ec:	e7ee      	b.n	826cc <_svfiprintf_r+0xba>
   826ee:	dc0a      	bgt.n	82706 <_svfiprintf_r+0xf4>
   826f0:	2b23      	cmp	r3, #35	; 0x23
   826f2:	d055      	beq.n	827a0 <_svfiprintf_r+0x18e>
   826f4:	2b2a      	cmp	r3, #42	; 0x2a
   826f6:	d056      	beq.n	827a6 <_svfiprintf_r+0x194>
   826f8:	2b20      	cmp	r3, #32
   826fa:	f040 81f6 	bne.w	82aea <_svfiprintf_r+0x4d8>
   826fe:	2a00      	cmp	r2, #0
   82700:	bf08      	it	eq
   82702:	2220      	moveq	r2, #32
   82704:	e7e2      	b.n	826cc <_svfiprintf_r+0xba>
   82706:	2b2e      	cmp	r3, #46	; 0x2e
   82708:	d058      	beq.n	827bc <_svfiprintf_r+0x1aa>
   8270a:	2b30      	cmp	r3, #48	; 0x30
   8270c:	d079      	beq.n	82802 <_svfiprintf_r+0x1f0>
   8270e:	2b2d      	cmp	r3, #45	; 0x2d
   82710:	f040 81eb 	bne.w	82aea <_svfiprintf_r+0x4d8>
   82714:	e04f      	b.n	827b6 <_svfiprintf_r+0x1a4>
   82716:	2b4f      	cmp	r3, #79	; 0x4f
   82718:	f000 80de 	beq.w	828d8 <_svfiprintf_r+0x2c6>
   8271c:	dc07      	bgt.n	8272e <_svfiprintf_r+0x11c>
   8271e:	2b44      	cmp	r3, #68	; 0x44
   82720:	f040 81e3 	bne.w	82aea <_svfiprintf_r+0x4d8>
   82724:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   82728:	f047 0710 	orr.w	r7, r7, #16
   8272c:	e090      	b.n	82850 <_svfiprintf_r+0x23e>
   8272e:	2b55      	cmp	r3, #85	; 0x55
   82730:	f000 811f 	beq.w	82972 <_svfiprintf_r+0x360>
   82734:	2b58      	cmp	r3, #88	; 0x58
   82736:	f040 81d8 	bne.w	82aea <_svfiprintf_r+0x4d8>
   8273a:	4daf      	ldr	r5, [pc, #700]	; (829f8 <_svfiprintf_r+0x3e6>)
   8273c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   82740:	9505      	str	r5, [sp, #20]
   82742:	e130      	b.n	829a6 <_svfiprintf_r+0x394>
   82744:	2b6f      	cmp	r3, #111	; 0x6f
   82746:	f000 80c9 	beq.w	828dc <_svfiprintf_r+0x2ca>
   8274a:	dc10      	bgt.n	8276e <_svfiprintf_r+0x15c>
   8274c:	2b69      	cmp	r3, #105	; 0x69
   8274e:	d024      	beq.n	8279a <_svfiprintf_r+0x188>
   82750:	dc07      	bgt.n	82762 <_svfiprintf_r+0x150>
   82752:	2b64      	cmp	r3, #100	; 0x64
   82754:	d021      	beq.n	8279a <_svfiprintf_r+0x188>
   82756:	2b68      	cmp	r3, #104	; 0x68
   82758:	f040 81c7 	bne.w	82aea <_svfiprintf_r+0x4d8>
   8275c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   82760:	e7b4      	b.n	826cc <_svfiprintf_r+0xba>
   82762:	2b6c      	cmp	r3, #108	; 0x6c
   82764:	d05f      	beq.n	82826 <_svfiprintf_r+0x214>
   82766:	2b6e      	cmp	r3, #110	; 0x6e
   82768:	f040 81bf 	bne.w	82aea <_svfiprintf_r+0x4d8>
   8276c:	e096      	b.n	8289c <_svfiprintf_r+0x28a>
   8276e:	2b73      	cmp	r3, #115	; 0x73
   82770:	f000 80df 	beq.w	82932 <_svfiprintf_r+0x320>
   82774:	dc06      	bgt.n	82784 <_svfiprintf_r+0x172>
   82776:	2b70      	cmp	r3, #112	; 0x70
   82778:	f000 80cd 	beq.w	82916 <_svfiprintf_r+0x304>
   8277c:	2b71      	cmp	r3, #113	; 0x71
   8277e:	f040 81b4 	bne.w	82aea <_svfiprintf_r+0x4d8>
   82782:	e05a      	b.n	8283a <_svfiprintf_r+0x228>
   82784:	2b75      	cmp	r3, #117	; 0x75
   82786:	f000 80f6 	beq.w	82976 <_svfiprintf_r+0x364>
   8278a:	2b78      	cmp	r3, #120	; 0x78
   8278c:	f040 81ad 	bne.w	82aea <_svfiprintf_r+0x4d8>
   82790:	4d9a      	ldr	r5, [pc, #616]	; (829fc <_svfiprintf_r+0x3ea>)
   82792:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   82796:	9505      	str	r5, [sp, #20]
   82798:	e105      	b.n	829a6 <_svfiprintf_r+0x394>
   8279a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8279e:	e057      	b.n	82850 <_svfiprintf_r+0x23e>
   827a0:	f047 0701 	orr.w	r7, r7, #1
   827a4:	e792      	b.n	826cc <_svfiprintf_r+0xba>
   827a6:	1d33      	adds	r3, r6, #4
   827a8:	6836      	ldr	r6, [r6, #0]
   827aa:	2e00      	cmp	r6, #0
   827ac:	9603      	str	r6, [sp, #12]
   827ae:	da15      	bge.n	827dc <_svfiprintf_r+0x1ca>
   827b0:	4270      	negs	r0, r6
   827b2:	9003      	str	r0, [sp, #12]
   827b4:	461e      	mov	r6, r3
   827b6:	f047 0704 	orr.w	r7, r7, #4
   827ba:	e787      	b.n	826cc <_svfiprintf_r+0xba>
   827bc:	9901      	ldr	r1, [sp, #4]
   827be:	f811 3b01 	ldrb.w	r3, [r1], #1
   827c2:	2b2a      	cmp	r3, #42	; 0x2a
   827c4:	9101      	str	r1, [sp, #4]
   827c6:	d10b      	bne.n	827e0 <_svfiprintf_r+0x1ce>
   827c8:	f8d6 c000 	ldr.w	ip, [r6]
   827cc:	1d33      	adds	r3, r6, #4
   827ce:	f1bc 0f00 	cmp.w	ip, #0
   827d2:	da03      	bge.n	827dc <_svfiprintf_r+0x1ca>
   827d4:	461e      	mov	r6, r3
   827d6:	f04f 3cff 	mov.w	ip, #4294967295
   827da:	e777      	b.n	826cc <_svfiprintf_r+0xba>
   827dc:	461e      	mov	r6, r3
   827de:	e775      	b.n	826cc <_svfiprintf_r+0xba>
   827e0:	f04f 0c00 	mov.w	ip, #0
   827e4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   827e8:	2809      	cmp	r0, #9
   827ea:	d807      	bhi.n	827fc <_svfiprintf_r+0x1ea>
   827ec:	9901      	ldr	r1, [sp, #4]
   827ee:	230a      	movs	r3, #10
   827f0:	fb03 0c0c 	mla	ip, r3, ip, r0
   827f4:	f811 3b01 	ldrb.w	r3, [r1], #1
   827f8:	9101      	str	r1, [sp, #4]
   827fa:	e7f3      	b.n	827e4 <_svfiprintf_r+0x1d2>
   827fc:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   82800:	e768      	b.n	826d4 <_svfiprintf_r+0xc2>
   82802:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   82806:	e761      	b.n	826cc <_svfiprintf_r+0xba>
   82808:	9801      	ldr	r0, [sp, #4]
   8280a:	2100      	movs	r1, #0
   8280c:	3b30      	subs	r3, #48	; 0x30
   8280e:	240a      	movs	r4, #10
   82810:	fb04 3101 	mla	r1, r4, r1, r3
   82814:	f810 3b01 	ldrb.w	r3, [r0], #1
   82818:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   8281c:	2c09      	cmp	r4, #9
   8281e:	9001      	str	r0, [sp, #4]
   82820:	d9f4      	bls.n	8280c <_svfiprintf_r+0x1fa>
   82822:	9103      	str	r1, [sp, #12]
   82824:	e756      	b.n	826d4 <_svfiprintf_r+0xc2>
   82826:	9901      	ldr	r1, [sp, #4]
   82828:	780b      	ldrb	r3, [r1, #0]
   8282a:	2b6c      	cmp	r3, #108	; 0x6c
   8282c:	d102      	bne.n	82834 <_svfiprintf_r+0x222>
   8282e:	1c48      	adds	r0, r1, #1
   82830:	9001      	str	r0, [sp, #4]
   82832:	e002      	b.n	8283a <_svfiprintf_r+0x228>
   82834:	f047 0710 	orr.w	r7, r7, #16
   82838:	e748      	b.n	826cc <_svfiprintf_r+0xba>
   8283a:	f047 0720 	orr.w	r7, r7, #32
   8283e:	e745      	b.n	826cc <_svfiprintf_r+0xba>
   82840:	6832      	ldr	r2, [r6, #0]
   82842:	2500      	movs	r5, #0
   82844:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   82848:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8284c:	3604      	adds	r6, #4
   8284e:	e156      	b.n	82afe <_svfiprintf_r+0x4ec>
   82850:	06ba      	lsls	r2, r7, #26
   82852:	d507      	bpl.n	82864 <_svfiprintf_r+0x252>
   82854:	3607      	adds	r6, #7
   82856:	f026 0507 	bic.w	r5, r6, #7
   8285a:	f105 0608 	add.w	r6, r5, #8
   8285e:	e9d5 4500 	ldrd	r4, r5, [r5]
   82862:	e00f      	b.n	82884 <_svfiprintf_r+0x272>
   82864:	f017 0f10 	tst.w	r7, #16
   82868:	f106 0104 	add.w	r1, r6, #4
   8286c:	d001      	beq.n	82872 <_svfiprintf_r+0x260>
   8286e:	6832      	ldr	r2, [r6, #0]
   82870:	e005      	b.n	8287e <_svfiprintf_r+0x26c>
   82872:	f017 0f40 	tst.w	r7, #64	; 0x40
   82876:	6832      	ldr	r2, [r6, #0]
   82878:	d001      	beq.n	8287e <_svfiprintf_r+0x26c>
   8287a:	b214      	sxth	r4, r2
   8287c:	e000      	b.n	82880 <_svfiprintf_r+0x26e>
   8287e:	4614      	mov	r4, r2
   82880:	17e5      	asrs	r5, r4, #31
   82882:	460e      	mov	r6, r1
   82884:	2c00      	cmp	r4, #0
   82886:	f175 0200 	sbcs.w	r2, r5, #0
   8288a:	f280 80b9 	bge.w	82a00 <_svfiprintf_r+0x3ee>
   8288e:	232d      	movs	r3, #45	; 0x2d
   82890:	4264      	negs	r4, r4
   82892:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   82896:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   8289a:	e0b1      	b.n	82a00 <_svfiprintf_r+0x3ee>
   8289c:	f017 0f20 	tst.w	r7, #32
   828a0:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   828a4:	f106 0204 	add.w	r2, r6, #4
   828a8:	d005      	beq.n	828b6 <_svfiprintf_r+0x2a4>
   828aa:	9c04      	ldr	r4, [sp, #16]
   828ac:	6835      	ldr	r5, [r6, #0]
   828ae:	17e0      	asrs	r0, r4, #31
   828b0:	602c      	str	r4, [r5, #0]
   828b2:	6068      	str	r0, [r5, #4]
   828b4:	e004      	b.n	828c0 <_svfiprintf_r+0x2ae>
   828b6:	06fb      	lsls	r3, r7, #27
   828b8:	d504      	bpl.n	828c4 <_svfiprintf_r+0x2b2>
   828ba:	6833      	ldr	r3, [r6, #0]
   828bc:	9904      	ldr	r1, [sp, #16]
   828be:	6019      	str	r1, [r3, #0]
   828c0:	4616      	mov	r6, r2
   828c2:	e6cf      	b.n	82664 <_svfiprintf_r+0x52>
   828c4:	6830      	ldr	r0, [r6, #0]
   828c6:	9c04      	ldr	r4, [sp, #16]
   828c8:	f017 0f40 	tst.w	r7, #64	; 0x40
   828cc:	f106 0604 	add.w	r6, r6, #4
   828d0:	bf14      	ite	ne
   828d2:	8004      	strhne	r4, [r0, #0]
   828d4:	6004      	streq	r4, [r0, #0]
   828d6:	e6c5      	b.n	82664 <_svfiprintf_r+0x52>
   828d8:	f047 0710 	orr.w	r7, r7, #16
   828dc:	f017 0020 	ands.w	r0, r7, #32
   828e0:	d008      	beq.n	828f4 <_svfiprintf_r+0x2e2>
   828e2:	1df3      	adds	r3, r6, #7
   828e4:	f023 0507 	bic.w	r5, r3, #7
   828e8:	f105 0608 	add.w	r6, r5, #8
   828ec:	e9d5 4500 	ldrd	r4, r5, [r5]
   828f0:	2000      	movs	r0, #0
   828f2:	e07c      	b.n	829ee <_svfiprintf_r+0x3dc>
   828f4:	f017 0110 	ands.w	r1, r7, #16
   828f8:	f106 0204 	add.w	r2, r6, #4
   828fc:	d106      	bne.n	8290c <_svfiprintf_r+0x2fa>
   828fe:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   82902:	d003      	beq.n	8290c <_svfiprintf_r+0x2fa>
   82904:	8834      	ldrh	r4, [r6, #0]
   82906:	2500      	movs	r5, #0
   82908:	4616      	mov	r6, r2
   8290a:	e7f1      	b.n	828f0 <_svfiprintf_r+0x2de>
   8290c:	6836      	ldr	r6, [r6, #0]
   8290e:	2500      	movs	r5, #0
   82910:	4634      	mov	r4, r6
   82912:	4616      	mov	r6, r2
   82914:	e06b      	b.n	829ee <_svfiprintf_r+0x3dc>
   82916:	4b39      	ldr	r3, [pc, #228]	; (829fc <_svfiprintf_r+0x3ea>)
   82918:	2130      	movs	r1, #48	; 0x30
   8291a:	2278      	movs	r2, #120	; 0x78
   8291c:	6834      	ldr	r4, [r6, #0]
   8291e:	2500      	movs	r5, #0
   82920:	f047 0702 	orr.w	r7, r7, #2
   82924:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   82928:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   8292c:	3604      	adds	r6, #4
   8292e:	9305      	str	r3, [sp, #20]
   82930:	e05c      	b.n	829ec <_svfiprintf_r+0x3da>
   82932:	4631      	mov	r1, r6
   82934:	2500      	movs	r5, #0
   82936:	f8d1 a000 	ldr.w	sl, [r1]
   8293a:	3604      	adds	r6, #4
   8293c:	45ac      	cmp	ip, r5
   8293e:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   82942:	4650      	mov	r0, sl
   82944:	db11      	blt.n	8296a <_svfiprintf_r+0x358>
   82946:	4662      	mov	r2, ip
   82948:	4629      	mov	r1, r5
   8294a:	f8cd c000 	str.w	ip, [sp]
   8294e:	f7ff fc31 	bl	821b4 <memchr>
   82952:	f8dd c000 	ldr.w	ip, [sp]
   82956:	2800      	cmp	r0, #0
   82958:	f000 80d5 	beq.w	82b06 <_svfiprintf_r+0x4f4>
   8295c:	ebca 0400 	rsb	r4, sl, r0
   82960:	4564      	cmp	r4, ip
   82962:	f340 80d2 	ble.w	82b0a <_svfiprintf_r+0x4f8>
   82966:	4664      	mov	r4, ip
   82968:	e0cf      	b.n	82b0a <_svfiprintf_r+0x4f8>
   8296a:	f7fe fd09 	bl	81380 <strlen>
   8296e:	4604      	mov	r4, r0
   82970:	e0cb      	b.n	82b0a <_svfiprintf_r+0x4f8>
   82972:	f047 0710 	orr.w	r7, r7, #16
   82976:	06bd      	lsls	r5, r7, #26
   82978:	d506      	bpl.n	82988 <_svfiprintf_r+0x376>
   8297a:	1df0      	adds	r0, r6, #7
   8297c:	f020 0407 	bic.w	r4, r0, #7
   82980:	f104 0608 	add.w	r6, r4, #8
   82984:	cc30      	ldmia	r4, {r4, r5}
   82986:	e00c      	b.n	829a2 <_svfiprintf_r+0x390>
   82988:	f017 0f10 	tst.w	r7, #16
   8298c:	f106 0304 	add.w	r3, r6, #4
   82990:	d103      	bne.n	8299a <_svfiprintf_r+0x388>
   82992:	067c      	lsls	r4, r7, #25
   82994:	d501      	bpl.n	8299a <_svfiprintf_r+0x388>
   82996:	8834      	ldrh	r4, [r6, #0]
   82998:	e001      	b.n	8299e <_svfiprintf_r+0x38c>
   8299a:	6835      	ldr	r5, [r6, #0]
   8299c:	462c      	mov	r4, r5
   8299e:	2500      	movs	r5, #0
   829a0:	461e      	mov	r6, r3
   829a2:	2001      	movs	r0, #1
   829a4:	e023      	b.n	829ee <_svfiprintf_r+0x3dc>
   829a6:	06b8      	lsls	r0, r7, #26
   829a8:	d507      	bpl.n	829ba <_svfiprintf_r+0x3a8>
   829aa:	1df4      	adds	r4, r6, #7
   829ac:	f024 0107 	bic.w	r1, r4, #7
   829b0:	f101 0608 	add.w	r6, r1, #8
   829b4:	e9d1 4500 	ldrd	r4, r5, [r1]
   829b8:	e00c      	b.n	829d4 <_svfiprintf_r+0x3c2>
   829ba:	f017 0f10 	tst.w	r7, #16
   829be:	f106 0004 	add.w	r0, r6, #4
   829c2:	d103      	bne.n	829cc <_svfiprintf_r+0x3ba>
   829c4:	0679      	lsls	r1, r7, #25
   829c6:	d501      	bpl.n	829cc <_svfiprintf_r+0x3ba>
   829c8:	8834      	ldrh	r4, [r6, #0]
   829ca:	e001      	b.n	829d0 <_svfiprintf_r+0x3be>
   829cc:	6836      	ldr	r6, [r6, #0]
   829ce:	4634      	mov	r4, r6
   829d0:	2500      	movs	r5, #0
   829d2:	4606      	mov	r6, r0
   829d4:	07fa      	lsls	r2, r7, #31
   829d6:	d509      	bpl.n	829ec <_svfiprintf_r+0x3da>
   829d8:	ea54 0205 	orrs.w	r2, r4, r5
   829dc:	d006      	beq.n	829ec <_svfiprintf_r+0x3da>
   829de:	2230      	movs	r2, #48	; 0x30
   829e0:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   829e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   829e8:	f047 0702 	orr.w	r7, r7, #2
   829ec:	2002      	movs	r0, #2
   829ee:	2100      	movs	r1, #0
   829f0:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   829f4:	e005      	b.n	82a02 <_svfiprintf_r+0x3f0>
   829f6:	bf00      	nop
   829f8:	00083492 	.word	0x00083492
   829fc:	000834a3 	.word	0x000834a3
   82a00:	2001      	movs	r0, #1
   82a02:	f1bc 0f00 	cmp.w	ip, #0
   82a06:	bfa8      	it	ge
   82a08:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   82a0c:	ea54 0105 	orrs.w	r1, r4, r5
   82a10:	d102      	bne.n	82a18 <_svfiprintf_r+0x406>
   82a12:	f1bc 0f00 	cmp.w	ip, #0
   82a16:	d058      	beq.n	82aca <_svfiprintf_r+0x4b8>
   82a18:	2801      	cmp	r0, #1
   82a1a:	d01d      	beq.n	82a58 <_svfiprintf_r+0x446>
   82a1c:	2802      	cmp	r0, #2
   82a1e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   82a22:	d041      	beq.n	82aa8 <_svfiprintf_r+0x496>
   82a24:	f004 0207 	and.w	r2, r4, #7
   82a28:	08e4      	lsrs	r4, r4, #3
   82a2a:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   82a2e:	08e9      	lsrs	r1, r5, #3
   82a30:	4604      	mov	r4, r0
   82a32:	460d      	mov	r5, r1
   82a34:	3230      	adds	r2, #48	; 0x30
   82a36:	ea54 0105 	orrs.w	r1, r4, r5
   82a3a:	469a      	mov	sl, r3
   82a3c:	701a      	strb	r2, [r3, #0]
   82a3e:	f103 33ff 	add.w	r3, r3, #4294967295
   82a42:	d1ef      	bne.n	82a24 <_svfiprintf_r+0x412>
   82a44:	07f8      	lsls	r0, r7, #31
   82a46:	4655      	mov	r5, sl
   82a48:	d54a      	bpl.n	82ae0 <_svfiprintf_r+0x4ce>
   82a4a:	2a30      	cmp	r2, #48	; 0x30
   82a4c:	d048      	beq.n	82ae0 <_svfiprintf_r+0x4ce>
   82a4e:	2230      	movs	r2, #48	; 0x30
   82a50:	469a      	mov	sl, r3
   82a52:	f805 2c01 	strb.w	r2, [r5, #-1]
   82a56:	e043      	b.n	82ae0 <_svfiprintf_r+0x4ce>
   82a58:	2d00      	cmp	r5, #0
   82a5a:	bf08      	it	eq
   82a5c:	2c0a      	cmpeq	r4, #10
   82a5e:	d203      	bcs.n	82a68 <_svfiprintf_r+0x456>
   82a60:	3430      	adds	r4, #48	; 0x30
   82a62:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   82a66:	e036      	b.n	82ad6 <_svfiprintf_r+0x4c4>
   82a68:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   82a6c:	9302      	str	r3, [sp, #8]
   82a6e:	4620      	mov	r0, r4
   82a70:	4629      	mov	r1, r5
   82a72:	220a      	movs	r2, #10
   82a74:	2300      	movs	r3, #0
   82a76:	f8cd c000 	str.w	ip, [sp]
   82a7a:	f000 f9c7 	bl	82e0c <__aeabi_uldivmod>
   82a7e:	9802      	ldr	r0, [sp, #8]
   82a80:	3230      	adds	r2, #48	; 0x30
   82a82:	f800 2901 	strb.w	r2, [r0], #-1
   82a86:	4629      	mov	r1, r5
   82a88:	220a      	movs	r2, #10
   82a8a:	2300      	movs	r3, #0
   82a8c:	f8dd a008 	ldr.w	sl, [sp, #8]
   82a90:	9002      	str	r0, [sp, #8]
   82a92:	4620      	mov	r0, r4
   82a94:	f000 f9ba 	bl	82e0c <__aeabi_uldivmod>
   82a98:	4604      	mov	r4, r0
   82a9a:	460d      	mov	r5, r1
   82a9c:	ea54 0105 	orrs.w	r1, r4, r5
   82aa0:	f8dd c000 	ldr.w	ip, [sp]
   82aa4:	d1e3      	bne.n	82a6e <_svfiprintf_r+0x45c>
   82aa6:	e01b      	b.n	82ae0 <_svfiprintf_r+0x4ce>
   82aa8:	9905      	ldr	r1, [sp, #20]
   82aaa:	f004 000f 	and.w	r0, r4, #15
   82aae:	0924      	lsrs	r4, r4, #4
   82ab0:	5c0a      	ldrb	r2, [r1, r0]
   82ab2:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   82ab6:	0929      	lsrs	r1, r5, #4
   82ab8:	4604      	mov	r4, r0
   82aba:	460d      	mov	r5, r1
   82abc:	469a      	mov	sl, r3
   82abe:	f803 2901 	strb.w	r2, [r3], #-1
   82ac2:	ea54 0205 	orrs.w	r2, r4, r5
   82ac6:	d1ef      	bne.n	82aa8 <_svfiprintf_r+0x496>
   82ac8:	e00a      	b.n	82ae0 <_svfiprintf_r+0x4ce>
   82aca:	b938      	cbnz	r0, 82adc <_svfiprintf_r+0x4ca>
   82acc:	07f9      	lsls	r1, r7, #31
   82ace:	d505      	bpl.n	82adc <_svfiprintf_r+0x4ca>
   82ad0:	2030      	movs	r0, #48	; 0x30
   82ad2:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   82ad6:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
   82ada:	e001      	b.n	82ae0 <_svfiprintf_r+0x4ce>
   82adc:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   82ae0:	ad18      	add	r5, sp, #96	; 0x60
   82ae2:	ebca 0405 	rsb	r4, sl, r5
   82ae6:	4665      	mov	r5, ip
   82ae8:	e00f      	b.n	82b0a <_svfiprintf_r+0x4f8>
   82aea:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   82aee:	2b00      	cmp	r3, #0
   82af0:	f000 8176 	beq.w	82de0 <_svfiprintf_r+0x7ce>
   82af4:	2500      	movs	r5, #0
   82af6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   82afa:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   82afe:	2401      	movs	r4, #1
   82b00:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   82b04:	e001      	b.n	82b0a <_svfiprintf_r+0x4f8>
   82b06:	4664      	mov	r4, ip
   82b08:	4605      	mov	r5, r0
   82b0a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   82b0e:	42ac      	cmp	r4, r5
   82b10:	bfac      	ite	ge
   82b12:	4621      	movge	r1, r4
   82b14:	4629      	movlt	r1, r5
   82b16:	9102      	str	r1, [sp, #8]
   82b18:	b113      	cbz	r3, 82b20 <_svfiprintf_r+0x50e>
   82b1a:	9802      	ldr	r0, [sp, #8]
   82b1c:	1c42      	adds	r2, r0, #1
   82b1e:	9202      	str	r2, [sp, #8]
   82b20:	f017 0102 	ands.w	r1, r7, #2
   82b24:	9106      	str	r1, [sp, #24]
   82b26:	d002      	beq.n	82b2e <_svfiprintf_r+0x51c>
   82b28:	9b02      	ldr	r3, [sp, #8]
   82b2a:	1c98      	adds	r0, r3, #2
   82b2c:	9002      	str	r0, [sp, #8]
   82b2e:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   82b32:	9207      	str	r2, [sp, #28]
   82b34:	d13c      	bne.n	82bb0 <_svfiprintf_r+0x59e>
   82b36:	9903      	ldr	r1, [sp, #12]
   82b38:	9b02      	ldr	r3, [sp, #8]
   82b3a:	1acb      	subs	r3, r1, r3
   82b3c:	2b00      	cmp	r3, #0
   82b3e:	dd37      	ble.n	82bb0 <_svfiprintf_r+0x59e>
   82b40:	48a5      	ldr	r0, [pc, #660]	; (82dd8 <_svfiprintf_r+0x7c6>)
   82b42:	2b10      	cmp	r3, #16
   82b44:	f8c8 0000 	str.w	r0, [r8]
   82b48:	dd1b      	ble.n	82b82 <_svfiprintf_r+0x570>
   82b4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   82b4c:	2110      	movs	r1, #16
   82b4e:	980d      	ldr	r0, [sp, #52]	; 0x34
   82b50:	f8c8 1004 	str.w	r1, [r8, #4]
   82b54:	1c51      	adds	r1, r2, #1
   82b56:	3010      	adds	r0, #16
   82b58:	2907      	cmp	r1, #7
   82b5a:	900d      	str	r0, [sp, #52]	; 0x34
   82b5c:	910c      	str	r1, [sp, #48]	; 0x30
   82b5e:	dc02      	bgt.n	82b66 <_svfiprintf_r+0x554>
   82b60:	f108 0808 	add.w	r8, r8, #8
   82b64:	e00b      	b.n	82b7e <_svfiprintf_r+0x56c>
   82b66:	4658      	mov	r0, fp
   82b68:	4649      	mov	r1, r9
   82b6a:	aa0b      	add	r2, sp, #44	; 0x2c
   82b6c:	9300      	str	r3, [sp, #0]
   82b6e:	f7ff fcd3 	bl	82518 <__ssprint_r>
   82b72:	9b00      	ldr	r3, [sp, #0]
   82b74:	2800      	cmp	r0, #0
   82b76:	f040 813a 	bne.w	82dee <_svfiprintf_r+0x7dc>
   82b7a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   82b7e:	3b10      	subs	r3, #16
   82b80:	e7de      	b.n	82b40 <_svfiprintf_r+0x52e>
   82b82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   82b84:	f8c8 3004 	str.w	r3, [r8, #4]
   82b88:	18d1      	adds	r1, r2, r3
   82b8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   82b8c:	910d      	str	r1, [sp, #52]	; 0x34
   82b8e:	1c58      	adds	r0, r3, #1
   82b90:	2807      	cmp	r0, #7
   82b92:	900c      	str	r0, [sp, #48]	; 0x30
   82b94:	dc02      	bgt.n	82b9c <_svfiprintf_r+0x58a>
   82b96:	f108 0808 	add.w	r8, r8, #8
   82b9a:	e009      	b.n	82bb0 <_svfiprintf_r+0x59e>
   82b9c:	4658      	mov	r0, fp
   82b9e:	4649      	mov	r1, r9
   82ba0:	aa0b      	add	r2, sp, #44	; 0x2c
   82ba2:	f7ff fcb9 	bl	82518 <__ssprint_r>
   82ba6:	2800      	cmp	r0, #0
   82ba8:	f040 8121 	bne.w	82dee <_svfiprintf_r+0x7dc>
   82bac:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   82bb0:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   82bb4:	b1da      	cbz	r2, 82bee <_svfiprintf_r+0x5dc>
   82bb6:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   82bba:	f8c8 1000 	str.w	r1, [r8]
   82bbe:	990c      	ldr	r1, [sp, #48]	; 0x30
   82bc0:	2301      	movs	r3, #1
   82bc2:	980d      	ldr	r0, [sp, #52]	; 0x34
   82bc4:	f8c8 3004 	str.w	r3, [r8, #4]
   82bc8:	1c4b      	adds	r3, r1, #1
   82bca:	1c42      	adds	r2, r0, #1
   82bcc:	2b07      	cmp	r3, #7
   82bce:	920d      	str	r2, [sp, #52]	; 0x34
   82bd0:	930c      	str	r3, [sp, #48]	; 0x30
   82bd2:	dc02      	bgt.n	82bda <_svfiprintf_r+0x5c8>
   82bd4:	f108 0808 	add.w	r8, r8, #8
   82bd8:	e009      	b.n	82bee <_svfiprintf_r+0x5dc>
   82bda:	4658      	mov	r0, fp
   82bdc:	4649      	mov	r1, r9
   82bde:	aa0b      	add	r2, sp, #44	; 0x2c
   82be0:	f7ff fc9a 	bl	82518 <__ssprint_r>
   82be4:	2800      	cmp	r0, #0
   82be6:	f040 8102 	bne.w	82dee <_svfiprintf_r+0x7dc>
   82bea:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   82bee:	9806      	ldr	r0, [sp, #24]
   82bf0:	b1d0      	cbz	r0, 82c28 <_svfiprintf_r+0x616>
   82bf2:	aa0a      	add	r2, sp, #40	; 0x28
   82bf4:	f8c8 2000 	str.w	r2, [r8]
   82bf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   82bfa:	2102      	movs	r1, #2
   82bfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   82bfe:	f8c8 1004 	str.w	r1, [r8, #4]
   82c02:	1c51      	adds	r1, r2, #1
   82c04:	1c98      	adds	r0, r3, #2
   82c06:	2907      	cmp	r1, #7
   82c08:	900d      	str	r0, [sp, #52]	; 0x34
   82c0a:	910c      	str	r1, [sp, #48]	; 0x30
   82c0c:	dc02      	bgt.n	82c14 <_svfiprintf_r+0x602>
   82c0e:	f108 0808 	add.w	r8, r8, #8
   82c12:	e009      	b.n	82c28 <_svfiprintf_r+0x616>
   82c14:	4658      	mov	r0, fp
   82c16:	4649      	mov	r1, r9
   82c18:	aa0b      	add	r2, sp, #44	; 0x2c
   82c1a:	f7ff fc7d 	bl	82518 <__ssprint_r>
   82c1e:	2800      	cmp	r0, #0
   82c20:	f040 80e5 	bne.w	82dee <_svfiprintf_r+0x7dc>
   82c24:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   82c28:	9b07      	ldr	r3, [sp, #28]
   82c2a:	2b80      	cmp	r3, #128	; 0x80
   82c2c:	d13c      	bne.n	82ca8 <_svfiprintf_r+0x696>
   82c2e:	9803      	ldr	r0, [sp, #12]
   82c30:	9a02      	ldr	r2, [sp, #8]
   82c32:	1a83      	subs	r3, r0, r2
   82c34:	2b00      	cmp	r3, #0
   82c36:	dd37      	ble.n	82ca8 <_svfiprintf_r+0x696>
   82c38:	4968      	ldr	r1, [pc, #416]	; (82ddc <_svfiprintf_r+0x7ca>)
   82c3a:	2b10      	cmp	r3, #16
   82c3c:	f8c8 1000 	str.w	r1, [r8]
   82c40:	dd1b      	ble.n	82c7a <_svfiprintf_r+0x668>
   82c42:	980c      	ldr	r0, [sp, #48]	; 0x30
   82c44:	2210      	movs	r2, #16
   82c46:	990d      	ldr	r1, [sp, #52]	; 0x34
   82c48:	f8c8 2004 	str.w	r2, [r8, #4]
   82c4c:	1c42      	adds	r2, r0, #1
   82c4e:	3110      	adds	r1, #16
   82c50:	2a07      	cmp	r2, #7
   82c52:	910d      	str	r1, [sp, #52]	; 0x34
   82c54:	920c      	str	r2, [sp, #48]	; 0x30
   82c56:	dc02      	bgt.n	82c5e <_svfiprintf_r+0x64c>
   82c58:	f108 0808 	add.w	r8, r8, #8
   82c5c:	e00b      	b.n	82c76 <_svfiprintf_r+0x664>
   82c5e:	4658      	mov	r0, fp
   82c60:	4649      	mov	r1, r9
   82c62:	aa0b      	add	r2, sp, #44	; 0x2c
   82c64:	9300      	str	r3, [sp, #0]
   82c66:	f7ff fc57 	bl	82518 <__ssprint_r>
   82c6a:	9b00      	ldr	r3, [sp, #0]
   82c6c:	2800      	cmp	r0, #0
   82c6e:	f040 80be 	bne.w	82dee <_svfiprintf_r+0x7dc>
   82c72:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   82c76:	3b10      	subs	r3, #16
   82c78:	e7de      	b.n	82c38 <_svfiprintf_r+0x626>
   82c7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   82c7c:	980d      	ldr	r0, [sp, #52]	; 0x34
   82c7e:	1c51      	adds	r1, r2, #1
   82c80:	f8c8 3004 	str.w	r3, [r8, #4]
   82c84:	2907      	cmp	r1, #7
   82c86:	4403      	add	r3, r0
   82c88:	930d      	str	r3, [sp, #52]	; 0x34
   82c8a:	910c      	str	r1, [sp, #48]	; 0x30
   82c8c:	dc02      	bgt.n	82c94 <_svfiprintf_r+0x682>
   82c8e:	f108 0808 	add.w	r8, r8, #8
   82c92:	e009      	b.n	82ca8 <_svfiprintf_r+0x696>
   82c94:	4658      	mov	r0, fp
   82c96:	4649      	mov	r1, r9
   82c98:	aa0b      	add	r2, sp, #44	; 0x2c
   82c9a:	f7ff fc3d 	bl	82518 <__ssprint_r>
   82c9e:	2800      	cmp	r0, #0
   82ca0:	f040 80a5 	bne.w	82dee <_svfiprintf_r+0x7dc>
   82ca4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   82ca8:	1b2d      	subs	r5, r5, r4
   82caa:	2d00      	cmp	r5, #0
   82cac:	dd34      	ble.n	82d18 <_svfiprintf_r+0x706>
   82cae:	484b      	ldr	r0, [pc, #300]	; (82ddc <_svfiprintf_r+0x7ca>)
   82cb0:	2d10      	cmp	r5, #16
   82cb2:	f8c8 0000 	str.w	r0, [r8]
   82cb6:	dd19      	ble.n	82cec <_svfiprintf_r+0x6da>
   82cb8:	980c      	ldr	r0, [sp, #48]	; 0x30
   82cba:	990d      	ldr	r1, [sp, #52]	; 0x34
   82cbc:	1c43      	adds	r3, r0, #1
   82cbe:	2210      	movs	r2, #16
   82cc0:	3110      	adds	r1, #16
   82cc2:	2b07      	cmp	r3, #7
   82cc4:	f8c8 2004 	str.w	r2, [r8, #4]
   82cc8:	910d      	str	r1, [sp, #52]	; 0x34
   82cca:	930c      	str	r3, [sp, #48]	; 0x30
   82ccc:	dc02      	bgt.n	82cd4 <_svfiprintf_r+0x6c2>
   82cce:	f108 0808 	add.w	r8, r8, #8
   82cd2:	e009      	b.n	82ce8 <_svfiprintf_r+0x6d6>
   82cd4:	4658      	mov	r0, fp
   82cd6:	4649      	mov	r1, r9
   82cd8:	aa0b      	add	r2, sp, #44	; 0x2c
   82cda:	f7ff fc1d 	bl	82518 <__ssprint_r>
   82cde:	2800      	cmp	r0, #0
   82ce0:	f040 8085 	bne.w	82dee <_svfiprintf_r+0x7dc>
   82ce4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   82ce8:	3d10      	subs	r5, #16
   82cea:	e7e0      	b.n	82cae <_svfiprintf_r+0x69c>
   82cec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   82cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   82cf0:	1c51      	adds	r1, r2, #1
   82cf2:	f8c8 5004 	str.w	r5, [r8, #4]
   82cf6:	2907      	cmp	r1, #7
   82cf8:	441d      	add	r5, r3
   82cfa:	950d      	str	r5, [sp, #52]	; 0x34
   82cfc:	910c      	str	r1, [sp, #48]	; 0x30
   82cfe:	dc02      	bgt.n	82d06 <_svfiprintf_r+0x6f4>
   82d00:	f108 0808 	add.w	r8, r8, #8
   82d04:	e008      	b.n	82d18 <_svfiprintf_r+0x706>
   82d06:	4658      	mov	r0, fp
   82d08:	4649      	mov	r1, r9
   82d0a:	aa0b      	add	r2, sp, #44	; 0x2c
   82d0c:	f7ff fc04 	bl	82518 <__ssprint_r>
   82d10:	2800      	cmp	r0, #0
   82d12:	d16c      	bne.n	82dee <_svfiprintf_r+0x7dc>
   82d14:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   82d18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   82d1a:	980d      	ldr	r0, [sp, #52]	; 0x34
   82d1c:	1c5a      	adds	r2, r3, #1
   82d1e:	f8c8 4004 	str.w	r4, [r8, #4]
   82d22:	2a07      	cmp	r2, #7
   82d24:	4404      	add	r4, r0
   82d26:	f8c8 a000 	str.w	sl, [r8]
   82d2a:	940d      	str	r4, [sp, #52]	; 0x34
   82d2c:	920c      	str	r2, [sp, #48]	; 0x30
   82d2e:	dc02      	bgt.n	82d36 <_svfiprintf_r+0x724>
   82d30:	f108 0308 	add.w	r3, r8, #8
   82d34:	e007      	b.n	82d46 <_svfiprintf_r+0x734>
   82d36:	4658      	mov	r0, fp
   82d38:	4649      	mov	r1, r9
   82d3a:	aa0b      	add	r2, sp, #44	; 0x2c
   82d3c:	f7ff fbec 	bl	82518 <__ssprint_r>
   82d40:	2800      	cmp	r0, #0
   82d42:	d154      	bne.n	82dee <_svfiprintf_r+0x7dc>
   82d44:	ab18      	add	r3, sp, #96	; 0x60
   82d46:	077a      	lsls	r2, r7, #29
   82d48:	d40b      	bmi.n	82d62 <_svfiprintf_r+0x750>
   82d4a:	9804      	ldr	r0, [sp, #16]
   82d4c:	9b02      	ldr	r3, [sp, #8]
   82d4e:	9a03      	ldr	r2, [sp, #12]
   82d50:	990d      	ldr	r1, [sp, #52]	; 0x34
   82d52:	4293      	cmp	r3, r2
   82d54:	bfac      	ite	ge
   82d56:	18c0      	addge	r0, r0, r3
   82d58:	1880      	addlt	r0, r0, r2
   82d5a:	9004      	str	r0, [sp, #16]
   82d5c:	2900      	cmp	r1, #0
   82d5e:	d036      	beq.n	82dce <_svfiprintf_r+0x7bc>
   82d60:	e02f      	b.n	82dc2 <_svfiprintf_r+0x7b0>
   82d62:	9c03      	ldr	r4, [sp, #12]
   82d64:	9902      	ldr	r1, [sp, #8]
   82d66:	1a64      	subs	r4, r4, r1
   82d68:	2c00      	cmp	r4, #0
   82d6a:	ddee      	ble.n	82d4a <_svfiprintf_r+0x738>
   82d6c:	481a      	ldr	r0, [pc, #104]	; (82dd8 <_svfiprintf_r+0x7c6>)
   82d6e:	2c10      	cmp	r4, #16
   82d70:	6018      	str	r0, [r3, #0]
   82d72:	dd15      	ble.n	82da0 <_svfiprintf_r+0x78e>
   82d74:	990c      	ldr	r1, [sp, #48]	; 0x30
   82d76:	2010      	movs	r0, #16
   82d78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   82d7a:	6058      	str	r0, [r3, #4]
   82d7c:	1c48      	adds	r0, r1, #1
   82d7e:	3210      	adds	r2, #16
   82d80:	2807      	cmp	r0, #7
   82d82:	920d      	str	r2, [sp, #52]	; 0x34
   82d84:	900c      	str	r0, [sp, #48]	; 0x30
   82d86:	dc01      	bgt.n	82d8c <_svfiprintf_r+0x77a>
   82d88:	3308      	adds	r3, #8
   82d8a:	e007      	b.n	82d9c <_svfiprintf_r+0x78a>
   82d8c:	4658      	mov	r0, fp
   82d8e:	4649      	mov	r1, r9
   82d90:	aa0b      	add	r2, sp, #44	; 0x2c
   82d92:	f7ff fbc1 	bl	82518 <__ssprint_r>
   82d96:	2800      	cmp	r0, #0
   82d98:	d129      	bne.n	82dee <_svfiprintf_r+0x7dc>
   82d9a:	ab18      	add	r3, sp, #96	; 0x60
   82d9c:	3c10      	subs	r4, #16
   82d9e:	e7e5      	b.n	82d6c <_svfiprintf_r+0x75a>
   82da0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   82da2:	605c      	str	r4, [r3, #4]
   82da4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   82da6:	1c51      	adds	r1, r2, #1
   82da8:	191c      	adds	r4, r3, r4
   82daa:	2907      	cmp	r1, #7
   82dac:	940d      	str	r4, [sp, #52]	; 0x34
   82dae:	910c      	str	r1, [sp, #48]	; 0x30
   82db0:	ddcb      	ble.n	82d4a <_svfiprintf_r+0x738>
   82db2:	4658      	mov	r0, fp
   82db4:	4649      	mov	r1, r9
   82db6:	aa0b      	add	r2, sp, #44	; 0x2c
   82db8:	f7ff fbae 	bl	82518 <__ssprint_r>
   82dbc:	2800      	cmp	r0, #0
   82dbe:	d0c4      	beq.n	82d4a <_svfiprintf_r+0x738>
   82dc0:	e015      	b.n	82dee <_svfiprintf_r+0x7dc>
   82dc2:	4658      	mov	r0, fp
   82dc4:	4649      	mov	r1, r9
   82dc6:	aa0b      	add	r2, sp, #44	; 0x2c
   82dc8:	f7ff fba6 	bl	82518 <__ssprint_r>
   82dcc:	b978      	cbnz	r0, 82dee <_svfiprintf_r+0x7dc>
   82dce:	2500      	movs	r5, #0
   82dd0:	950c      	str	r5, [sp, #48]	; 0x30
   82dd2:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   82dd6:	e445      	b.n	82664 <_svfiprintf_r+0x52>
   82dd8:	000834b4 	.word	0x000834b4
   82ddc:	000834c4 	.word	0x000834c4
   82de0:	980d      	ldr	r0, [sp, #52]	; 0x34
   82de2:	b120      	cbz	r0, 82dee <_svfiprintf_r+0x7dc>
   82de4:	4658      	mov	r0, fp
   82de6:	4649      	mov	r1, r9
   82de8:	aa0b      	add	r2, sp, #44	; 0x2c
   82dea:	f7ff fb95 	bl	82518 <__ssprint_r>
   82dee:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   82df2:	9b04      	ldr	r3, [sp, #16]
   82df4:	f002 0140 	and.w	r1, r2, #64	; 0x40
   82df8:	b208      	sxth	r0, r1
   82dfa:	2800      	cmp	r0, #0
   82dfc:	bf18      	it	ne
   82dfe:	f04f 33ff 	movne.w	r3, #4294967295
   82e02:	4618      	mov	r0, r3
   82e04:	b029      	add	sp, #164	; 0xa4
   82e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82e0a:	bf00      	nop

00082e0c <__aeabi_uldivmod>:
   82e0c:	b94b      	cbnz	r3, 82e22 <__aeabi_uldivmod+0x16>
   82e0e:	b942      	cbnz	r2, 82e22 <__aeabi_uldivmod+0x16>
   82e10:	2900      	cmp	r1, #0
   82e12:	bf08      	it	eq
   82e14:	2800      	cmpeq	r0, #0
   82e16:	d002      	beq.n	82e1e <__aeabi_uldivmod+0x12>
   82e18:	f04f 31ff 	mov.w	r1, #4294967295
   82e1c:	4608      	mov	r0, r1
   82e1e:	f000 b83b 	b.w	82e98 <__aeabi_idiv0>
   82e22:	b082      	sub	sp, #8
   82e24:	46ec      	mov	ip, sp
   82e26:	e92d 5000 	stmdb	sp!, {ip, lr}
   82e2a:	f000 f81d 	bl	82e68 <__gnu_uldivmod_helper>
   82e2e:	f8dd e004 	ldr.w	lr, [sp, #4]
   82e32:	b002      	add	sp, #8
   82e34:	bc0c      	pop	{r2, r3}
   82e36:	4770      	bx	lr

00082e38 <__gnu_ldivmod_helper>:
   82e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82e3c:	4616      	mov	r6, r2
   82e3e:	4698      	mov	r8, r3
   82e40:	4604      	mov	r4, r0
   82e42:	460d      	mov	r5, r1
   82e44:	f000 f82a 	bl	82e9c <__divdi3>
   82e48:	fb06 fc01 	mul.w	ip, r6, r1
   82e4c:	fba6 2300 	umull	r2, r3, r6, r0
   82e50:	fb00 c708 	mla	r7, r0, r8, ip
   82e54:	18fb      	adds	r3, r7, r3
   82e56:	1aa2      	subs	r2, r4, r2
   82e58:	eb65 0303 	sbc.w	r3, r5, r3
   82e5c:	9c06      	ldr	r4, [sp, #24]
   82e5e:	e9c4 2300 	strd	r2, r3, [r4]
   82e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82e66:	bf00      	nop

00082e68 <__gnu_uldivmod_helper>:
   82e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82e6c:	4690      	mov	r8, r2
   82e6e:	4606      	mov	r6, r0
   82e70:	460f      	mov	r7, r1
   82e72:	461d      	mov	r5, r3
   82e74:	f000 f970 	bl	83158 <__udivdi3>
   82e78:	fb00 f305 	mul.w	r3, r0, r5
   82e7c:	fba0 4508 	umull	r4, r5, r0, r8
   82e80:	fb08 3801 	mla	r8, r8, r1, r3
   82e84:	9b06      	ldr	r3, [sp, #24]
   82e86:	4445      	add	r5, r8
   82e88:	1b34      	subs	r4, r6, r4
   82e8a:	eb67 0505 	sbc.w	r5, r7, r5
   82e8e:	e9c3 4500 	strd	r4, r5, [r3]
   82e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82e96:	bf00      	nop

00082e98 <__aeabi_idiv0>:
   82e98:	4770      	bx	lr
   82e9a:	bf00      	nop

00082e9c <__divdi3>:
   82e9c:	2900      	cmp	r1, #0
   82e9e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   82ea2:	461d      	mov	r5, r3
   82ea4:	f2c0 809d 	blt.w	82fe2 <__divdi3+0x146>
   82ea8:	2400      	movs	r4, #0
   82eaa:	2d00      	cmp	r5, #0
   82eac:	f2c0 8094 	blt.w	82fd8 <__divdi3+0x13c>
   82eb0:	4680      	mov	r8, r0
   82eb2:	460f      	mov	r7, r1
   82eb4:	4694      	mov	ip, r2
   82eb6:	461e      	mov	r6, r3
   82eb8:	bbe3      	cbnz	r3, 82f34 <__divdi3+0x98>
   82eba:	428a      	cmp	r2, r1
   82ebc:	d955      	bls.n	82f6a <__divdi3+0xce>
   82ebe:	fab2 f782 	clz	r7, r2
   82ec2:	b147      	cbz	r7, 82ed6 <__divdi3+0x3a>
   82ec4:	f1c7 0520 	rsb	r5, r7, #32
   82ec8:	fa20 f605 	lsr.w	r6, r0, r5
   82ecc:	fa01 f107 	lsl.w	r1, r1, r7
   82ed0:	40ba      	lsls	r2, r7
   82ed2:	40b8      	lsls	r0, r7
   82ed4:	4331      	orrs	r1, r6
   82ed6:	0c17      	lsrs	r7, r2, #16
   82ed8:	fbb1 f6f7 	udiv	r6, r1, r7
   82edc:	fa1f fc82 	uxth.w	ip, r2
   82ee0:	fb07 1116 	mls	r1, r7, r6, r1
   82ee4:	fb0c f506 	mul.w	r5, ip, r6
   82ee8:	0c03      	lsrs	r3, r0, #16
   82eea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   82eee:	429d      	cmp	r5, r3
   82ef0:	d908      	bls.n	82f04 <__divdi3+0x68>
   82ef2:	1e71      	subs	r1, r6, #1
   82ef4:	189b      	adds	r3, r3, r2
   82ef6:	f080 8113 	bcs.w	83120 <__divdi3+0x284>
   82efa:	429d      	cmp	r5, r3
   82efc:	f240 8110 	bls.w	83120 <__divdi3+0x284>
   82f00:	3e02      	subs	r6, #2
   82f02:	189b      	adds	r3, r3, r2
   82f04:	1b59      	subs	r1, r3, r5
   82f06:	fbb1 f5f7 	udiv	r5, r1, r7
   82f0a:	fb07 1315 	mls	r3, r7, r5, r1
   82f0e:	fb0c fc05 	mul.w	ip, ip, r5
   82f12:	b280      	uxth	r0, r0
   82f14:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
   82f18:	458c      	cmp	ip, r1
   82f1a:	d907      	bls.n	82f2c <__divdi3+0x90>
   82f1c:	1e6b      	subs	r3, r5, #1
   82f1e:	188a      	adds	r2, r1, r2
   82f20:	f080 8100 	bcs.w	83124 <__divdi3+0x288>
   82f24:	4594      	cmp	ip, r2
   82f26:	f240 80fd 	bls.w	83124 <__divdi3+0x288>
   82f2a:	3d02      	subs	r5, #2
   82f2c:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
   82f30:	2500      	movs	r5, #0
   82f32:	e003      	b.n	82f3c <__divdi3+0xa0>
   82f34:	428b      	cmp	r3, r1
   82f36:	d90c      	bls.n	82f52 <__divdi3+0xb6>
   82f38:	2500      	movs	r5, #0
   82f3a:	4629      	mov	r1, r5
   82f3c:	460a      	mov	r2, r1
   82f3e:	462b      	mov	r3, r5
   82f40:	b114      	cbz	r4, 82f48 <__divdi3+0xac>
   82f42:	4252      	negs	r2, r2
   82f44:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   82f48:	4610      	mov	r0, r2
   82f4a:	4619      	mov	r1, r3
   82f4c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   82f50:	4770      	bx	lr
   82f52:	fab3 f583 	clz	r5, r3
   82f56:	2d00      	cmp	r5, #0
   82f58:	f040 8087 	bne.w	8306a <__divdi3+0x1ce>
   82f5c:	428b      	cmp	r3, r1
   82f5e:	d301      	bcc.n	82f64 <__divdi3+0xc8>
   82f60:	4282      	cmp	r2, r0
   82f62:	d8ea      	bhi.n	82f3a <__divdi3+0x9e>
   82f64:	2500      	movs	r5, #0
   82f66:	2101      	movs	r1, #1
   82f68:	e7e8      	b.n	82f3c <__divdi3+0xa0>
   82f6a:	b912      	cbnz	r2, 82f72 <__divdi3+0xd6>
   82f6c:	2601      	movs	r6, #1
   82f6e:	fbb6 f2f2 	udiv	r2, r6, r2
   82f72:	fab2 f682 	clz	r6, r2
   82f76:	2e00      	cmp	r6, #0
   82f78:	d139      	bne.n	82fee <__divdi3+0x152>
   82f7a:	1a8e      	subs	r6, r1, r2
   82f7c:	0c13      	lsrs	r3, r2, #16
   82f7e:	fa1f fc82 	uxth.w	ip, r2
   82f82:	2501      	movs	r5, #1
   82f84:	fbb6 f7f3 	udiv	r7, r6, r3
   82f88:	fb03 6117 	mls	r1, r3, r7, r6
   82f8c:	fb0c f807 	mul.w	r8, ip, r7
   82f90:	ea4f 4910 	mov.w	r9, r0, lsr #16
   82f94:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
   82f98:	45b0      	cmp	r8, r6
   82f9a:	d906      	bls.n	82faa <__divdi3+0x10e>
   82f9c:	1e79      	subs	r1, r7, #1
   82f9e:	18b6      	adds	r6, r6, r2
   82fa0:	d202      	bcs.n	82fa8 <__divdi3+0x10c>
   82fa2:	45b0      	cmp	r8, r6
   82fa4:	f200 80d3 	bhi.w	8314e <__divdi3+0x2b2>
   82fa8:	460f      	mov	r7, r1
   82faa:	ebc8 0606 	rsb	r6, r8, r6
   82fae:	fbb6 f1f3 	udiv	r1, r6, r3
   82fb2:	fb03 6311 	mls	r3, r3, r1, r6
   82fb6:	fb0c fc01 	mul.w	ip, ip, r1
   82fba:	b280      	uxth	r0, r0
   82fbc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   82fc0:	459c      	cmp	ip, r3
   82fc2:	d906      	bls.n	82fd2 <__divdi3+0x136>
   82fc4:	1e4e      	subs	r6, r1, #1
   82fc6:	189a      	adds	r2, r3, r2
   82fc8:	d202      	bcs.n	82fd0 <__divdi3+0x134>
   82fca:	4594      	cmp	ip, r2
   82fcc:	f200 80c2 	bhi.w	83154 <__divdi3+0x2b8>
   82fd0:	4631      	mov	r1, r6
   82fd2:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
   82fd6:	e7b1      	b.n	82f3c <__divdi3+0xa0>
   82fd8:	43e4      	mvns	r4, r4
   82fda:	4252      	negs	r2, r2
   82fdc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   82fe0:	e766      	b.n	82eb0 <__divdi3+0x14>
   82fe2:	4240      	negs	r0, r0
   82fe4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82fe8:	f04f 34ff 	mov.w	r4, #4294967295
   82fec:	e75d      	b.n	82eaa <__divdi3+0xe>
   82fee:	40b2      	lsls	r2, r6
   82ff0:	f1c6 0920 	rsb	r9, r6, #32
   82ff4:	fa21 f709 	lsr.w	r7, r1, r9
   82ff8:	fa20 f909 	lsr.w	r9, r0, r9
   82ffc:	fa01 f106 	lsl.w	r1, r1, r6
   83000:	0c13      	lsrs	r3, r2, #16
   83002:	fbb7 f8f3 	udiv	r8, r7, r3
   83006:	fa1f fc82 	uxth.w	ip, r2
   8300a:	fb03 7718 	mls	r7, r3, r8, r7
   8300e:	fb0c f508 	mul.w	r5, ip, r8
   83012:	ea49 0901 	orr.w	r9, r9, r1
   83016:	ea4f 4119 	mov.w	r1, r9, lsr #16
   8301a:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
   8301e:	40b0      	lsls	r0, r6
   83020:	42bd      	cmp	r5, r7
   83022:	d90a      	bls.n	8303a <__divdi3+0x19e>
   83024:	18bf      	adds	r7, r7, r2
   83026:	f108 36ff 	add.w	r6, r8, #4294967295
   8302a:	f080 808e 	bcs.w	8314a <__divdi3+0x2ae>
   8302e:	42bd      	cmp	r5, r7
   83030:	f240 808b 	bls.w	8314a <__divdi3+0x2ae>
   83034:	f1a8 0802 	sub.w	r8, r8, #2
   83038:	18bf      	adds	r7, r7, r2
   8303a:	1b79      	subs	r1, r7, r5
   8303c:	fbb1 f5f3 	udiv	r5, r1, r3
   83040:	fb03 1715 	mls	r7, r3, r5, r1
   83044:	fb0c f605 	mul.w	r6, ip, r5
   83048:	fa1f f989 	uxth.w	r9, r9
   8304c:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
   83050:	428e      	cmp	r6, r1
   83052:	d906      	bls.n	83062 <__divdi3+0x1c6>
   83054:	1e6f      	subs	r7, r5, #1
   83056:	1889      	adds	r1, r1, r2
   83058:	d271      	bcs.n	8313e <__divdi3+0x2a2>
   8305a:	428e      	cmp	r6, r1
   8305c:	d96f      	bls.n	8313e <__divdi3+0x2a2>
   8305e:	3d02      	subs	r5, #2
   83060:	1889      	adds	r1, r1, r2
   83062:	1b8e      	subs	r6, r1, r6
   83064:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
   83068:	e78c      	b.n	82f84 <__divdi3+0xe8>
   8306a:	f1c5 0120 	rsb	r1, r5, #32
   8306e:	fa22 f301 	lsr.w	r3, r2, r1
   83072:	fa06 f605 	lsl.w	r6, r6, r5
   83076:	fa27 f201 	lsr.w	r2, r7, r1
   8307a:	fa07 f705 	lsl.w	r7, r7, r5
   8307e:	fa20 f101 	lsr.w	r1, r0, r1
   83082:	431e      	orrs	r6, r3
   83084:	ea4f 4916 	mov.w	r9, r6, lsr #16
   83088:	fbb2 f8f9 	udiv	r8, r2, r9
   8308c:	fa1f fa86 	uxth.w	sl, r6
   83090:	fb09 2218 	mls	r2, r9, r8, r2
   83094:	fb0a fb08 	mul.w	fp, sl, r8
   83098:	430f      	orrs	r7, r1
   8309a:	0c3b      	lsrs	r3, r7, #16
   8309c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   830a0:	4593      	cmp	fp, r2
   830a2:	fa0c fc05 	lsl.w	ip, ip, r5
   830a6:	d908      	bls.n	830ba <__divdi3+0x21e>
   830a8:	1992      	adds	r2, r2, r6
   830aa:	f108 31ff 	add.w	r1, r8, #4294967295
   830ae:	d24a      	bcs.n	83146 <__divdi3+0x2aa>
   830b0:	4593      	cmp	fp, r2
   830b2:	d948      	bls.n	83146 <__divdi3+0x2aa>
   830b4:	f1a8 0802 	sub.w	r8, r8, #2
   830b8:	1992      	adds	r2, r2, r6
   830ba:	ebcb 0302 	rsb	r3, fp, r2
   830be:	fbb3 f1f9 	udiv	r1, r3, r9
   830c2:	fb09 3211 	mls	r2, r9, r1, r3
   830c6:	fb0a fa01 	mul.w	sl, sl, r1
   830ca:	b2bf      	uxth	r7, r7
   830cc:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
   830d0:	459a      	cmp	sl, r3
   830d2:	d906      	bls.n	830e2 <__divdi3+0x246>
   830d4:	1e4a      	subs	r2, r1, #1
   830d6:	199b      	adds	r3, r3, r6
   830d8:	d233      	bcs.n	83142 <__divdi3+0x2a6>
   830da:	459a      	cmp	sl, r3
   830dc:	d931      	bls.n	83142 <__divdi3+0x2a6>
   830de:	3902      	subs	r1, #2
   830e0:	199b      	adds	r3, r3, r6
   830e2:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
   830e6:	0c0f      	lsrs	r7, r1, #16
   830e8:	fa1f f88c 	uxth.w	r8, ip
   830ec:	fb08 f607 	mul.w	r6, r8, r7
   830f0:	b28a      	uxth	r2, r1
   830f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   830f6:	fb08 f802 	mul.w	r8, r8, r2
   830fa:	fb0c 6202 	mla	r2, ip, r2, r6
   830fe:	fb0c fc07 	mul.w	ip, ip, r7
   83102:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   83106:	4296      	cmp	r6, r2
   83108:	bf88      	it	hi
   8310a:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
   8310e:	ebca 0303 	rsb	r3, sl, r3
   83112:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
   83116:	4563      	cmp	r3, ip
   83118:	d30e      	bcc.n	83138 <__divdi3+0x29c>
   8311a:	d005      	beq.n	83128 <__divdi3+0x28c>
   8311c:	2500      	movs	r5, #0
   8311e:	e70d      	b.n	82f3c <__divdi3+0xa0>
   83120:	460e      	mov	r6, r1
   83122:	e6ef      	b.n	82f04 <__divdi3+0x68>
   83124:	461d      	mov	r5, r3
   83126:	e701      	b.n	82f2c <__divdi3+0x90>
   83128:	fa00 f005 	lsl.w	r0, r0, r5
   8312c:	fa1f f888 	uxth.w	r8, r8
   83130:	eb08 4502 	add.w	r5, r8, r2, lsl #16
   83134:	42a8      	cmp	r0, r5
   83136:	d2f1      	bcs.n	8311c <__divdi3+0x280>
   83138:	3901      	subs	r1, #1
   8313a:	2500      	movs	r5, #0
   8313c:	e6fe      	b.n	82f3c <__divdi3+0xa0>
   8313e:	463d      	mov	r5, r7
   83140:	e78f      	b.n	83062 <__divdi3+0x1c6>
   83142:	4611      	mov	r1, r2
   83144:	e7cd      	b.n	830e2 <__divdi3+0x246>
   83146:	4688      	mov	r8, r1
   83148:	e7b7      	b.n	830ba <__divdi3+0x21e>
   8314a:	46b0      	mov	r8, r6
   8314c:	e775      	b.n	8303a <__divdi3+0x19e>
   8314e:	3f02      	subs	r7, #2
   83150:	18b6      	adds	r6, r6, r2
   83152:	e72a      	b.n	82faa <__divdi3+0x10e>
   83154:	3902      	subs	r1, #2
   83156:	e73c      	b.n	82fd2 <__divdi3+0x136>

00083158 <__udivdi3>:
   83158:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   8315c:	4614      	mov	r4, r2
   8315e:	4605      	mov	r5, r0
   83160:	460e      	mov	r6, r1
   83162:	2b00      	cmp	r3, #0
   83164:	d13d      	bne.n	831e2 <__udivdi3+0x8a>
   83166:	428a      	cmp	r2, r1
   83168:	d949      	bls.n	831fe <__udivdi3+0xa6>
   8316a:	fab2 f782 	clz	r7, r2
   8316e:	b147      	cbz	r7, 83182 <__udivdi3+0x2a>
   83170:	f1c7 0120 	rsb	r1, r7, #32
   83174:	fa20 f201 	lsr.w	r2, r0, r1
   83178:	fa06 f607 	lsl.w	r6, r6, r7
   8317c:	40bc      	lsls	r4, r7
   8317e:	40bd      	lsls	r5, r7
   83180:	4316      	orrs	r6, r2
   83182:	0c22      	lsrs	r2, r4, #16
   83184:	fbb6 f0f2 	udiv	r0, r6, r2
   83188:	b2a1      	uxth	r1, r4
   8318a:	fb02 6610 	mls	r6, r2, r0, r6
   8318e:	fb01 f300 	mul.w	r3, r1, r0
   83192:	0c2f      	lsrs	r7, r5, #16
   83194:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   83198:	42b3      	cmp	r3, r6
   8319a:	d908      	bls.n	831ae <__udivdi3+0x56>
   8319c:	1e47      	subs	r7, r0, #1
   8319e:	1936      	adds	r6, r6, r4
   831a0:	f080 80fa 	bcs.w	83398 <__udivdi3+0x240>
   831a4:	42b3      	cmp	r3, r6
   831a6:	f240 80f7 	bls.w	83398 <__udivdi3+0x240>
   831aa:	3802      	subs	r0, #2
   831ac:	1936      	adds	r6, r6, r4
   831ae:	1af6      	subs	r6, r6, r3
   831b0:	fbb6 f3f2 	udiv	r3, r6, r2
   831b4:	fb02 6213 	mls	r2, r2, r3, r6
   831b8:	fb01 f103 	mul.w	r1, r1, r3
   831bc:	b2ad      	uxth	r5, r5
   831be:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
   831c2:	4291      	cmp	r1, r2
   831c4:	d907      	bls.n	831d6 <__udivdi3+0x7e>
   831c6:	1e5e      	subs	r6, r3, #1
   831c8:	1912      	adds	r2, r2, r4
   831ca:	f080 80e7 	bcs.w	8339c <__udivdi3+0x244>
   831ce:	4291      	cmp	r1, r2
   831d0:	f240 80e4 	bls.w	8339c <__udivdi3+0x244>
   831d4:	3b02      	subs	r3, #2
   831d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   831da:	2100      	movs	r1, #0
   831dc:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   831e0:	4770      	bx	lr
   831e2:	428b      	cmp	r3, r1
   831e4:	d843      	bhi.n	8326e <__udivdi3+0x116>
   831e6:	fab3 f483 	clz	r4, r3
   831ea:	2c00      	cmp	r4, #0
   831ec:	d142      	bne.n	83274 <__udivdi3+0x11c>
   831ee:	428b      	cmp	r3, r1
   831f0:	d302      	bcc.n	831f8 <__udivdi3+0xa0>
   831f2:	4282      	cmp	r2, r0
   831f4:	f200 80e1 	bhi.w	833ba <__udivdi3+0x262>
   831f8:	2100      	movs	r1, #0
   831fa:	2001      	movs	r0, #1
   831fc:	e7ee      	b.n	831dc <__udivdi3+0x84>
   831fe:	b912      	cbnz	r2, 83206 <__udivdi3+0xae>
   83200:	2701      	movs	r7, #1
   83202:	fbb7 f4f2 	udiv	r4, r7, r2
   83206:	fab4 f284 	clz	r2, r4
   8320a:	2a00      	cmp	r2, #0
   8320c:	f040 8089 	bne.w	83322 <__udivdi3+0x1ca>
   83210:	1b0a      	subs	r2, r1, r4
   83212:	0c23      	lsrs	r3, r4, #16
   83214:	b2a7      	uxth	r7, r4
   83216:	2101      	movs	r1, #1
   83218:	fbb2 f6f3 	udiv	r6, r2, r3
   8321c:	fb03 2216 	mls	r2, r3, r6, r2
   83220:	fb07 f006 	mul.w	r0, r7, r6
   83224:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   83228:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   8322c:	4290      	cmp	r0, r2
   8322e:	d907      	bls.n	83240 <__udivdi3+0xe8>
   83230:	1912      	adds	r2, r2, r4
   83232:	f106 3cff 	add.w	ip, r6, #4294967295
   83236:	d202      	bcs.n	8323e <__udivdi3+0xe6>
   83238:	4290      	cmp	r0, r2
   8323a:	f200 80d0 	bhi.w	833de <__udivdi3+0x286>
   8323e:	4666      	mov	r6, ip
   83240:	1a12      	subs	r2, r2, r0
   83242:	fbb2 f0f3 	udiv	r0, r2, r3
   83246:	fb03 2310 	mls	r3, r3, r0, r2
   8324a:	fb07 f700 	mul.w	r7, r7, r0
   8324e:	b2ad      	uxth	r5, r5
   83250:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   83254:	429f      	cmp	r7, r3
   83256:	d907      	bls.n	83268 <__udivdi3+0x110>
   83258:	1e42      	subs	r2, r0, #1
   8325a:	191b      	adds	r3, r3, r4
   8325c:	f080 80a0 	bcs.w	833a0 <__udivdi3+0x248>
   83260:	429f      	cmp	r7, r3
   83262:	f240 809d 	bls.w	833a0 <__udivdi3+0x248>
   83266:	3802      	subs	r0, #2
   83268:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   8326c:	e7b6      	b.n	831dc <__udivdi3+0x84>
   8326e:	2100      	movs	r1, #0
   83270:	4608      	mov	r0, r1
   83272:	e7b3      	b.n	831dc <__udivdi3+0x84>
   83274:	f1c4 0620 	rsb	r6, r4, #32
   83278:	fa22 f706 	lsr.w	r7, r2, r6
   8327c:	fa03 f304 	lsl.w	r3, r3, r4
   83280:	fa21 f506 	lsr.w	r5, r1, r6
   83284:	fa01 f104 	lsl.w	r1, r1, r4
   83288:	fa20 f606 	lsr.w	r6, r0, r6
   8328c:	433b      	orrs	r3, r7
   8328e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   83292:	fbb5 f7fc 	udiv	r7, r5, ip
   83296:	fa1f f883 	uxth.w	r8, r3
   8329a:	fb0c 5517 	mls	r5, ip, r7, r5
   8329e:	fb08 f907 	mul.w	r9, r8, r7
   832a2:	ea46 0a01 	orr.w	sl, r6, r1
   832a6:	ea4f 411a 	mov.w	r1, sl, lsr #16
   832aa:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   832ae:	45a9      	cmp	r9, r5
   832b0:	fa02 f204 	lsl.w	r2, r2, r4
   832b4:	d904      	bls.n	832c0 <__udivdi3+0x168>
   832b6:	1e7e      	subs	r6, r7, #1
   832b8:	18ed      	adds	r5, r5, r3
   832ba:	f0c0 8081 	bcc.w	833c0 <__udivdi3+0x268>
   832be:	4637      	mov	r7, r6
   832c0:	ebc9 0105 	rsb	r1, r9, r5
   832c4:	fbb1 f6fc 	udiv	r6, r1, ip
   832c8:	fb0c 1516 	mls	r5, ip, r6, r1
   832cc:	fb08 f806 	mul.w	r8, r8, r6
   832d0:	fa1f fa8a 	uxth.w	sl, sl
   832d4:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
   832d8:	4588      	cmp	r8, r1
   832da:	d903      	bls.n	832e4 <__udivdi3+0x18c>
   832dc:	1e75      	subs	r5, r6, #1
   832de:	18c9      	adds	r1, r1, r3
   832e0:	d374      	bcc.n	833cc <__udivdi3+0x274>
   832e2:	462e      	mov	r6, r5
   832e4:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
   832e8:	0c37      	lsrs	r7, r6, #16
   832ea:	fa1f fc82 	uxth.w	ip, r2
   832ee:	fb0c f507 	mul.w	r5, ip, r7
   832f2:	0c12      	lsrs	r2, r2, #16
   832f4:	b2b3      	uxth	r3, r6
   832f6:	fb0c fc03 	mul.w	ip, ip, r3
   832fa:	fb02 5303 	mla	r3, r2, r3, r5
   832fe:	fb02 f207 	mul.w	r2, r2, r7
   83302:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   83306:	429d      	cmp	r5, r3
   83308:	bf88      	it	hi
   8330a:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
   8330e:	ebc8 0101 	rsb	r1, r8, r1
   83312:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   83316:	4291      	cmp	r1, r2
   83318:	d34c      	bcc.n	833b4 <__udivdi3+0x25c>
   8331a:	d043      	beq.n	833a4 <__udivdi3+0x24c>
   8331c:	4630      	mov	r0, r6
   8331e:	2100      	movs	r1, #0
   83320:	e75c      	b.n	831dc <__udivdi3+0x84>
   83322:	4094      	lsls	r4, r2
   83324:	f1c2 0520 	rsb	r5, r2, #32
   83328:	fa21 f605 	lsr.w	r6, r1, r5
   8332c:	fa20 f505 	lsr.w	r5, r0, r5
   83330:	fa01 f102 	lsl.w	r1, r1, r2
   83334:	0c23      	lsrs	r3, r4, #16
   83336:	fbb6 fcf3 	udiv	ip, r6, r3
   8333a:	b2a7      	uxth	r7, r4
   8333c:	fb03 661c 	mls	r6, r3, ip, r6
   83340:	fb07 f80c 	mul.w	r8, r7, ip
   83344:	4329      	orrs	r1, r5
   83346:	0c0d      	lsrs	r5, r1, #16
   83348:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   8334c:	45b0      	cmp	r8, r6
   8334e:	fa00 f502 	lsl.w	r5, r0, r2
   83352:	d908      	bls.n	83366 <__udivdi3+0x20e>
   83354:	1936      	adds	r6, r6, r4
   83356:	f10c 30ff 	add.w	r0, ip, #4294967295
   8335a:	d23e      	bcs.n	833da <__udivdi3+0x282>
   8335c:	45b0      	cmp	r8, r6
   8335e:	d93c      	bls.n	833da <__udivdi3+0x282>
   83360:	f1ac 0c02 	sub.w	ip, ip, #2
   83364:	1936      	adds	r6, r6, r4
   83366:	ebc8 0206 	rsb	r2, r8, r6
   8336a:	fbb2 f0f3 	udiv	r0, r2, r3
   8336e:	fb03 2610 	mls	r6, r3, r0, r2
   83372:	fb07 f800 	mul.w	r8, r7, r0
   83376:	b289      	uxth	r1, r1
   83378:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   8337c:	4590      	cmp	r8, r2
   8337e:	d906      	bls.n	8338e <__udivdi3+0x236>
   83380:	1e46      	subs	r6, r0, #1
   83382:	1912      	adds	r2, r2, r4
   83384:	d227      	bcs.n	833d6 <__udivdi3+0x27e>
   83386:	4590      	cmp	r8, r2
   83388:	d925      	bls.n	833d6 <__udivdi3+0x27e>
   8338a:	3802      	subs	r0, #2
   8338c:	1912      	adds	r2, r2, r4
   8338e:	ebc8 0202 	rsb	r2, r8, r2
   83392:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
   83396:	e73f      	b.n	83218 <__udivdi3+0xc0>
   83398:	4638      	mov	r0, r7
   8339a:	e708      	b.n	831ae <__udivdi3+0x56>
   8339c:	4633      	mov	r3, r6
   8339e:	e71a      	b.n	831d6 <__udivdi3+0x7e>
   833a0:	4610      	mov	r0, r2
   833a2:	e761      	b.n	83268 <__udivdi3+0x110>
   833a4:	fa00 f004 	lsl.w	r0, r0, r4
   833a8:	fa1f fc8c 	uxth.w	ip, ip
   833ac:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
   833b0:	4298      	cmp	r0, r3
   833b2:	d2b3      	bcs.n	8331c <__udivdi3+0x1c4>
   833b4:	1e70      	subs	r0, r6, #1
   833b6:	2100      	movs	r1, #0
   833b8:	e710      	b.n	831dc <__udivdi3+0x84>
   833ba:	4621      	mov	r1, r4
   833bc:	4620      	mov	r0, r4
   833be:	e70d      	b.n	831dc <__udivdi3+0x84>
   833c0:	45a9      	cmp	r9, r5
   833c2:	f67f af7c 	bls.w	832be <__udivdi3+0x166>
   833c6:	3f02      	subs	r7, #2
   833c8:	18ed      	adds	r5, r5, r3
   833ca:	e779      	b.n	832c0 <__udivdi3+0x168>
   833cc:	4588      	cmp	r8, r1
   833ce:	d988      	bls.n	832e2 <__udivdi3+0x18a>
   833d0:	3e02      	subs	r6, #2
   833d2:	18c9      	adds	r1, r1, r3
   833d4:	e786      	b.n	832e4 <__udivdi3+0x18c>
   833d6:	4630      	mov	r0, r6
   833d8:	e7d9      	b.n	8338e <__udivdi3+0x236>
   833da:	4684      	mov	ip, r0
   833dc:	e7c3      	b.n	83366 <__udivdi3+0x20e>
   833de:	3e02      	subs	r6, #2
   833e0:	1912      	adds	r2, r2, r4
   833e2:	e72d      	b.n	83240 <__udivdi3+0xe8>
   833e4:	0c040800 	.word	0x0c040800
   833e8:	0e060a02 	.word	0x0e060a02
   833ec:	0d050901 	.word	0x0d050901
   833f0:	0f070b03 	.word	0x0f070b03
   833f4:	00006425 	.word	0x00006425
   833f8:	4f525245 	.word	0x4f525245
   833fc:	00000052 	.word	0x00000052
   83400:	00004b4f 	.word	0x00004b4f
   83404:	0000566d 	.word	0x0000566d
   83408:	6e744220 	.word	0x6e744220
   8340c:	0000203a 	.word	0x0000203a
   83410:	68676972 	.word	0x68676972
   83414:	00000074 	.word	0x00000074
   83418:	00007075 	.word	0x00007075
   8341c:	6e776f64 	.word	0x6e776f64
   83420:	00000000 	.word	0x00000000
   83424:	7466656c 	.word	0x7466656c
   83428:	00000000 	.word	0x00000000
   8342c:	656c6573 	.word	0x656c6573
   83430:	00007463 	.word	0x00007463
   83434:	656e6f6e 	.word	0x656e6f6e
   83438:	00000000 	.word	0x00000000
   8343c:	00000007 	.word	0x00000007
   83440:	00000006 	.word	0x00000006
   83444:	00000005 	.word	0x00000005
   83448:	00000004 	.word	0x00000004
   8344c:	00000003 	.word	0x00000003
   83450:	00000002 	.word	0x00000002
   83454:	00000001 	.word	0x00000001
   83458:	00000000 	.word	0x00000000
   8345c:	0000000a 	.word	0x0000000a
   83460:	0000000b 	.word	0x0000000b
   83464:	0000000c 	.word	0x0000000c
   83468:	0000000d 	.word	0x0000000d

0008346c <_global_impure_ptr>:
   8346c:	20070010 20200043                                ... C.

00083472 <blanks.6650>:
   83472:	20202020 20202020 20202020 20202020                     

00083482 <zeroes.6651>:
   83482:	30303030 30303030 30303030 30303030     0000000000000000
   83492:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   834a2:	32313000 36353433 61393837 65646362     .0123456789abcde
   834b2:	20200066                                         f.

000834b4 <blanks.6664>:
   834b4:	20202020 20202020 20202020 20202020                     

000834c4 <zeroes.6665>:
   834c4:	30303030 30303030 30303030 30303030     0000000000000000

000834d4 <_init>:
   834d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   834d6:	bf00      	nop
   834d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   834da:	bc08      	pop	{r3}
   834dc:	469e      	mov	lr, r3
   834de:	4770      	bx	lr

000834e0 <__init_array_start>:
   834e0:	00081b89 	.word	0x00081b89

000834e4 <__frame_dummy_init_array_entry>:
   834e4:	0008016d                                m...

000834e8 <_fini>:
   834e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   834ea:	bf00      	nop
   834ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   834ee:	bc08      	pop	{r3}
   834f0:	469e      	mov	lr, r3
   834f2:	4770      	bx	lr

000834f4 <__fini_array_start>:
   834f4:	00080145 	.word	0x00080145
