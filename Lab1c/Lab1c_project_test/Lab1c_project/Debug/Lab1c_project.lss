
Lab1c_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000133c  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20070000  0008133c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008c  20070438  00081774  00010438  2**2
                  ALLOC
  3 .stack        00002004  200704c4  00081800  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      00000071  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000c14f  00000000  00000000  000104d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002062  00000000  00000000  0001c621  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000034bb  00000000  00000000  0001e683  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000800  00000000  00000000  00021b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000006c0  00000000  00000000  0002233e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00014f29  00000000  00000000  000229fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b7d1  00000000  00000000  00037927  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005ea2d  00000000  00000000  000430f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000fa0  00000000  00000000  000a1b28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200724c8 	.word	0x200724c8
   80004:	00080ce9 	.word	0x00080ce9
   80008:	00080ce5 	.word	0x00080ce5
   8000c:	00080ce5 	.word	0x00080ce5
   80010:	00080ce5 	.word	0x00080ce5
   80014:	00080ce5 	.word	0x00080ce5
   80018:	00080ce5 	.word	0x00080ce5
	...
   8002c:	00080ce5 	.word	0x00080ce5
   80030:	00080ce5 	.word	0x00080ce5
   80034:	00000000 	.word	0x00000000
   80038:	00080ce5 	.word	0x00080ce5
   8003c:	00080ce5 	.word	0x00080ce5
   80040:	00080ce5 	.word	0x00080ce5
   80044:	00080ce5 	.word	0x00080ce5
   80048:	00080ce5 	.word	0x00080ce5
   8004c:	00080ce5 	.word	0x00080ce5
   80050:	00080ce5 	.word	0x00080ce5
   80054:	00080ce5 	.word	0x00080ce5
   80058:	00080ce5 	.word	0x00080ce5
   8005c:	00080ce5 	.word	0x00080ce5
   80060:	00080ce5 	.word	0x00080ce5
   80064:	00080ce5 	.word	0x00080ce5
   80068:	00000000 	.word	0x00000000
   8006c:	00080ab1 	.word	0x00080ab1
   80070:	00080acd 	.word	0x00080acd
   80074:	00080ae9 	.word	0x00080ae9
   80078:	00080b05 	.word	0x00080b05
	...
   80084:	00080ce5 	.word	0x00080ce5
   80088:	00080ce5 	.word	0x00080ce5
   8008c:	00080ce5 	.word	0x00080ce5
   80090:	00080ce5 	.word	0x00080ce5
   80094:	00080ce5 	.word	0x00080ce5
   80098:	00080ce5 	.word	0x00080ce5
   8009c:	00080ce5 	.word	0x00080ce5
   800a0:	00080ce5 	.word	0x00080ce5
   800a4:	00000000 	.word	0x00000000
   800a8:	00080ce5 	.word	0x00080ce5
   800ac:	00080ce5 	.word	0x00080ce5
   800b0:	00080ce5 	.word	0x00080ce5
   800b4:	00080ce5 	.word	0x00080ce5
   800b8:	00080ce5 	.word	0x00080ce5
   800bc:	00080ce5 	.word	0x00080ce5
   800c0:	00080ce5 	.word	0x00080ce5
   800c4:	00080ce5 	.word	0x00080ce5
   800c8:	00080ce5 	.word	0x00080ce5
   800cc:	00080ce5 	.word	0x00080ce5
   800d0:	00080ce5 	.word	0x00080ce5
   800d4:	00080ce5 	.word	0x00080ce5
   800d8:	00080ce5 	.word	0x00080ce5
   800dc:	00080ce5 	.word	0x00080ce5
   800e0:	00080ce5 	.word	0x00080ce5
   800e4:	00080ce5 	.word	0x00080ce5
   800e8:	00080ce5 	.word	0x00080ce5
   800ec:	00080ce5 	.word	0x00080ce5
   800f0:	00080ce5 	.word	0x00080ce5

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a19      	subs	r1, r3, r0
   800fc:	2906      	cmp	r1, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4a04      	ldr	r2, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2a00      	cmp	r2, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4790      	blx	r2
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	0008133c 	.word	0x0008133c
   80110:	0008133f 	.word	0x0008133f
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a19      	subs	r1, r3, r0
   80120:	108a      	asrs	r2, r1, #2
   80122:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	0008133c 	.word	0x0008133c
   8013c:	0008133c 	.word	0x0008133c
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4804      	ldr	r0, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b110      	cbz	r0, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2101      	movs	r1, #1
   8015c:	7021      	strb	r1, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	20070438 	.word	0x20070438
   80164:	00000000 	.word	0x00000000
   80168:	0008133c 	.word	0x0008133c

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6801      	ldr	r1, [r0, #0]
   8017e:	b111      	cbz	r1, 80186 <frame_dummy+0x1a>
   80180:	4a07      	ldr	r2, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b102      	cbz	r2, 80186 <frame_dummy+0x1a>
   80184:	4790      	blx	r2
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	0008133c 	.word	0x0008133c
   80198:	2007043c 	.word	0x2007043c
   8019c:	0008133c 	.word	0x0008133c
   801a0:	00000000 	.word	0x00000000

000801a4 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   801a4:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   801a6:	f04f 0401 	mov.w	r4, #1
   801aa:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   801ac:	f04f 0400 	mov.w	r4, #0
   801b0:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   801b2:	f240 2502 	movw	r5, #514	; 0x202
   801b6:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   801ba:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   801be:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   801c2:	6845      	ldr	r5, [r0, #4]
   801c4:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   801c6:	ea4f 0242 	mov.w	r2, r2, lsl #1
   801ca:	fbb1 f1f2 	udiv	r1, r1, r2
   801ce:	f101 32ff 	add.w	r2, r1, #4294967295
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   801d2:	ea4f 6102 	mov.w	r1, r2, lsl #24
   801d6:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
   801da:	6043      	str	r3, [r0, #4]
	return 0;
}
   801dc:	4620      	mov	r0, r4
   801de:	bc30      	pop	{r4, r5}
   801e0:	4770      	bx	lr
   801e2:	bf00      	nop

000801e4 <adc_set_resolution>:
 * \param resolution ADC resolution.
 *
 */
void adc_set_resolution(Adc *p_adc,const enum adc_resolution_t resolution)
{
	p_adc->ADC_MR |= (resolution << 4) & ADC_MR_LOWRES;
   801e4:	6843      	ldr	r3, [r0, #4]
   801e6:	ea4f 1101 	mov.w	r1, r1, lsl #4
   801ea:	f001 0210 	and.w	r2, r1, #16
   801ee:	4313      	orrs	r3, r2
   801f0:	6043      	str	r3, [r0, #4]
   801f2:	4770      	bx	lr

000801f4 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   801f4:	6843      	ldr	r3, [r0, #4]
   801f6:	4319      	orrs	r1, r3
   801f8:	ea4f 12c2 	mov.w	r2, r2, lsl #7
   801fc:	b2d3      	uxtb	r3, r2
   801fe:	4319      	orrs	r1, r3
   80200:	6041      	str	r1, [r0, #4]
   80202:	4770      	bx	lr

00080204 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   80204:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80206:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   80208:	4322      	orrs	r2, r4
   8020a:	ea4f 6101 	mov.w	r1, r1, lsl #24
   8020e:	f001 6470 	and.w	r4, r1, #251658240	; 0xf000000
   80212:	4322      	orrs	r2, r4
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80214:	ea4f 7303 	mov.w	r3, r3, lsl #28
   80218:	f003 5140 	and.w	r1, r3, #805306368	; 0x30000000
   8021c:	430a      	orrs	r2, r1
   8021e:	6042      	str	r2, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   80220:	bc10      	pop	{r4}
   80222:	4770      	bx	lr

00080224 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   80224:	f04f 0302 	mov.w	r3, #2
   80228:	6003      	str	r3, [r0, #0]
   8022a:	4770      	bx	lr

0008022c <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   8022c:	f04f 0301 	mov.w	r3, #1
   80230:	fa03 f101 	lsl.w	r1, r3, r1
   80234:	6101      	str	r1, [r0, #16]
   80236:	4770      	bx	lr

00080238 <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
   80238:	6a00      	ldr	r0, [r0, #32]
}
   8023a:	4770      	bx	lr

0008023c <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
   8023c:	b410      	push	{r4}
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8023e:	ea4f 1181 	mov.w	r1, r1, lsl #6
   80242:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   80244:	f04f 0402 	mov.w	r4, #2
   80248:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   8024a:	f04f 30ff 	mov.w	r0, #4294967295
   8024e:	6298      	str	r0, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80250:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   80252:	605a      	str	r2, [r3, #4]
}
   80254:	bc10      	pop	{r4}
   80256:	4770      	bx	lr

00080258 <tc_set_block_mode>:
 * \param ul_blockmode Block mode register value to set.
 *
 */
void tc_set_block_mode(Tc *p_tc, uint32_t ul_blockmode)
{
	p_tc->TC_BMR = ul_blockmode;
   80258:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   8025c:	4770      	bx	lr
   8025e:	bf00      	nop

00080260 <tc_start>:
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   80260:	ea4f 1181 	mov.w	r1, r1, lsl #6
   80264:	f04f 0305 	mov.w	r3, #5
   80268:	5043      	str	r3, [r0, r1]
   8026a:	4770      	bx	lr

0008026c <tc_stop>:
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   8026c:	ea4f 1181 	mov.w	r1, r1, lsl #6
   80270:	f04f 0302 	mov.w	r3, #2
   80274:	5043      	str	r3, [r0, r1]
   80276:	4770      	bx	lr

00080278 <tc_read_cv>:
uint32_t tc_read_cv(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
   80278:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   8027c:	6908      	ldr	r0, [r1, #16]
}
   8027e:	4770      	bx	lr

00080280 <delay_init>:
#include <string.h>
#include "asf.h"
#include "LCDShield.h"

void delay_init(void)		/* Initializes the timer used for delays */
{
   80280:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC0);
   80282:	f04f 001b 	mov.w	r0, #27
   80286:	f640 4361 	movw	r3, #3169	; 0xc61
   8028a:	f2c0 0308 	movt	r3, #8
   8028e:	4798      	blx	r3
	tc_init(TC0,0,0);		 /* TC0, channel 0, TCLK1 och capturemode */
   80290:	f04f 0400 	mov.w	r4, #0
   80294:	f2c4 0408 	movt	r4, #16392	; 0x4008
   80298:	4620      	mov	r0, r4
   8029a:	f04f 0100 	mov.w	r1, #0
   8029e:	460a      	mov	r2, r1
   802a0:	f240 233d 	movw	r3, #573	; 0x23d
   802a4:	f2c0 0308 	movt	r3, #8
   802a8:	4798      	blx	r3
	tc_set_block_mode(TC0,0);
   802aa:	4620      	mov	r0, r4
   802ac:	f04f 0100 	mov.w	r1, #0
   802b0:	f240 2259 	movw	r2, #601	; 0x259
   802b4:	f2c0 0208 	movt	r2, #8
   802b8:	4790      	blx	r2
	tc_stop(TC0,0);			/* making sure the timer does not run  */
   802ba:	4620      	mov	r0, r4
   802bc:	f04f 0100 	mov.w	r1, #0
   802c0:	f240 236d 	movw	r3, #621	; 0x26d
   802c4:	f2c0 0308 	movt	r3, #8
   802c8:	4798      	blx	r3
   802ca:	bd10      	pop	{r4, pc}

000802cc <delay>:
}


void delay(uint32_t us)		/* A simple implementation for a delay in us (not calibrated) */
{
   802cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   802ce:	4604      	mov	r4, r0
	tc_start(TC0,0);
   802d0:	f04f 0000 	mov.w	r0, #0
   802d4:	f2c4 0008 	movt	r0, #16392	; 0x4008
   802d8:	f04f 0100 	mov.w	r1, #0
   802dc:	f240 2361 	movw	r3, #609	; 0x261
   802e0:	f2c0 0308 	movt	r3, #8
   802e4:	4798      	blx	r3
	while (tc_read_cv(TC0,0) < us*42);
   802e6:	f04f 072a 	mov.w	r7, #42	; 0x2a
   802ea:	fb07 f704 	mul.w	r7, r7, r4
   802ee:	f04f 0400 	mov.w	r4, #0
   802f2:	f2c4 0408 	movt	r4, #16392	; 0x4008
   802f6:	f04f 0600 	mov.w	r6, #0
   802fa:	f240 2579 	movw	r5, #633	; 0x279
   802fe:	f2c0 0508 	movt	r5, #8
   80302:	4620      	mov	r0, r4
   80304:	4631      	mov	r1, r6
   80306:	47a8      	blx	r5
   80308:	42b8      	cmp	r0, r7
   8030a:	d3fa      	bcc.n	80302 <delay+0x36>
	tc_stop(TC0,0);
   8030c:	f04f 0000 	mov.w	r0, #0
   80310:	f2c4 0008 	movt	r0, #16392	; 0x4008
   80314:	f04f 0100 	mov.w	r1, #0
   80318:	f240 226d 	movw	r2, #621	; 0x26d
   8031c:	f2c0 0208 	movt	r2, #8
   80320:	4790      	blx	r2
   80322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00080324 <LCDwrite>:
 *	type = 0 controls the display
 *	type = 1 writes the content of the byte (usually interpreted as ASCII-code) to the display
 *
 *	LCDwrite returns the actual pinout value on PIOC 26-23, which is the reverse order compared to the Due pin order of D4-D7
 */
{
   80324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80328:	b084      	sub	sp, #16
   8032a:	4607      	mov	r7, r0
   8032c:	460d      	mov	r5, r1
	/* In it's infinite wisdom the shield has the data pins in mirrored order compared to the Due board */
	uint8_t mirror_pin[16]={0b0000,0b1000,0b0100,0b1100,0b0010,0b1010,0b0110,0b1110,0b0001,0b1001,0b0101,0b1101,0b0011,0b1011,0b0111,0b1111};
   8032e:	f241 2398 	movw	r3, #4760	; 0x1298
   80332:	f2c0 0308 	movt	r3, #8
   80336:	466c      	mov	r4, sp
   80338:	6818      	ldr	r0, [r3, #0]
   8033a:	6859      	ldr	r1, [r3, #4]
   8033c:	689a      	ldr	r2, [r3, #8]
   8033e:	68db      	ldr	r3, [r3, #12]
   80340:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	byte_orig = byte;

	/* write the first 4 bits to the shield. */
	byte = byte>>4;
	byte = mirror_pin[byte];
   80342:	eb04 1017 	add.w	r0, r4, r7, lsr #4
   80346:	f810 1c10 	ldrb.w	r1, [r0, #-16]
	byte32 = (uint32_t)byte << 23;
   8034a:	ea4f 56c1 	mov.w	r6, r1, lsl #23
	mirrored_output = byte<<4;
   8034e:	ea4f 1301 	mov.w	r3, r1, lsl #4
   80352:	fa5f f883 	uxtb.w	r8, r3
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
   80356:	b13d      	cbz	r5, 80368 <LCDwrite+0x44>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80358:	f44f 5290 	mov.w	r2, #4608	; 0x1200
   8035c:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80360:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80364:	6310      	str	r0, [r2, #48]	; 0x30
   80366:	e006      	b.n	80376 <LCDwrite+0x52>
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80368:	f44f 5590 	mov.w	r5, #4608	; 0x1200
   8036c:	f2c4 050e 	movt	r5, #16398	; 0x400e
   80370:	f44f 0480 	mov.w	r4, #4194304	; 0x400000
   80374:	636c      	str	r4, [r5, #52]	; 0x34
__always_inline static void arch_ioport_set_port_level(ioport_port_t port,
		ioport_port_mask_t mask, ioport_port_mask_t level)
{
	Pio *base = arch_ioport_port_to_base(port);

	base->PIO_SODR = mask & level;
   80376:	f006 61f0 	and.w	r1, r6, #125829120	; 0x7800000
   8037a:	f44f 5490 	mov.w	r4, #4608	; 0x1200
   8037e:	f2c4 040e 	movt	r4, #16398	; 0x400e
   80382:	6321      	str	r1, [r4, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
   80384:	ea6f 0606 	mvn.w	r6, r6
   80388:	f006 63f0 	and.w	r3, r6, #125829120	; 0x7800000
   8038c:	6363      	str	r3, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8038e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
   80392:	6326      	str	r6, [r4, #48]	; 0x30
	
	ioport_set_pin_level(LCD_RS, type); 
	ioport_set_port_level(IOPORT_PIOC, LCD_mask_D4_D7, byte32);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delay(1);
   80394:	f04f 0001 	mov.w	r0, #1
   80398:	f240 25cd 	movw	r5, #717	; 0x2cd
   8039c:	f2c0 0508 	movt	r5, #8
   803a0:	47a8      	blx	r5
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   803a2:	6366      	str	r6, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	
	delay(100);
   803a4:	f04f 0064 	mov.w	r0, #100	; 0x64
   803a8:	47a8      	blx	r5
	
	/* write the second 4 bits to the shield. */
	byte = byte_orig;
	byte = byte & 0x0f;
	byte = mirror_pin[byte];
   803aa:	f007 070f 	and.w	r7, r7, #15
   803ae:	aa04      	add	r2, sp, #16
   803b0:	19d0      	adds	r0, r2, r7
   803b2:	f810 1c10 	ldrb.w	r1, [r0, #-16]
	byte32 = (uint32_t)byte<<23;
   803b6:	ea4f 53c1 	mov.w	r3, r1, lsl #23
	mirrored_output = mirrored_output + byte;
   803ba:	eb08 0701 	add.w	r7, r8, r1
   803be:	b2ff      	uxtb	r7, r7
__always_inline static void arch_ioport_set_port_level(ioport_port_t port,
		ioport_port_mask_t mask, ioport_port_mask_t level)
{
	Pio *base = arch_ioport_port_to_base(port);

	base->PIO_SODR = mask & level;
   803c0:	f003 62f0 	and.w	r2, r3, #125829120	; 0x7800000
   803c4:	6322      	str	r2, [r4, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
   803c6:	ea6f 0003 	mvn.w	r0, r3
   803ca:	f000 61f0 	and.w	r1, r0, #125829120	; 0x7800000
   803ce:	6361      	str	r1, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   803d0:	6326      	str	r6, [r4, #48]	; 0x30

	ioport_set_port_level(IOPORT_PIOC, LCD_mask_D4_D7, byte32);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delay(1);
   803d2:	f04f 0001 	mov.w	r0, #1
   803d6:	47a8      	blx	r5
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   803d8:	6366      	str	r6, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	delay(100);
   803da:	f04f 0064 	mov.w	r0, #100	; 0x64
   803de:	47a8      	blx	r5
	
	return mirrored_output;
}
   803e0:	4638      	mov	r0, r7
   803e2:	b004      	add	sp, #16
   803e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000803e8 <LCDInit>:
	tc_stop(TC0,0);
}


int LCDInit(void)		/* Initializes the display on the LCD shield, returns 1 if everything is ok */
{
   803e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   803ec:	f44f 5490 	mov.w	r4, #4608	; 0x1200
   803f0:	f2c4 040e 	movt	r4, #16398	; 0x400e
   803f4:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
   803f8:	6127      	str	r7, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   803fa:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   803fe:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
   80402:	6125      	str	r5, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80404:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, enum ioport_direction group_direction)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (group_direction == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = mask;
   80408:	f04f 63f0 	mov.w	r3, #125829120	; 0x7800000
   8040c:	6123      	str	r3, [r4, #16]
	} else if (group_direction == IOPORT_DIR_INPUT) {
		base->PIO_ODR = mask;
	}

	base->PIO_OWER = mask;
   8040e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80412:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_dir(LCD_Enable, IOPORT_DIR_OUTPUT);
	ioport_set_port_dir(IOPORT_PIOC, LCD_mask_D4_D7, IOPORT_DIR_OUTPUT);
	
	ioport_set_pin_level(LCD_Enable, LOW);
	
	delay(30000);		/* wait > 15 ms */
   80414:	f247 5030 	movw	r0, #30000	; 0x7530
   80418:	f240 26cd 	movw	r6, #717	; 0x2cd
   8041c:	f2c0 0608 	movt	r6, #8
   80420:	47b0      	blx	r6
   80422:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80424:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
   80428:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   8042c:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
   80430:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80434:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
   80438:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   8043c:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
   80440:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80442:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, HIGH);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delay(1);		/* delay 1 us */
   80444:	f04f 0001 	mov.w	r0, #1
   80448:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8044a:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	
	delay(4100);	/* wait for more than 4,1 ms */
   8044c:	f241 0004 	movw	r0, #4100	; 0x1004
   80450:	47b0      	blx	r6
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80452:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   80456:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8045a:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   8045e:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80460:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, HIGH);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delay(1);		/* delay 1 us */
   80462:	f04f 0001 	mov.w	r0, #1
   80466:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80468:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);

	delay(100);	/* wait 100 us */
   8046a:	f04f 0064 	mov.w	r0, #100	; 0x64
   8046e:	47b0      	blx	r6
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80470:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   80474:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80478:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   8047c:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8047e:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, HIGH);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delay(1);		/* delay 1 us */
   80480:	f04f 0001 	mov.w	r0, #1
   80484:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80486:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);		
	
	delay(100);	/* wait 100 us */
   80488:	f04f 0064 	mov.w	r0, #100	; 0x64
   8048c:	47b0      	blx	r6
   8048e:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80492:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80496:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   8049a:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8049c:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, LOW);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delay(1);
   8049e:	f04f 0001 	mov.w	r0, #1
   804a2:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   804a4:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	
	delay(100);
   804a6:	f04f 0064 	mov.w	r0, #100	; 0x64
   804aa:	47b0      	blx	r6

	LCDwrite(0b00101000, LOW);		/* Two rows, small font */
   804ac:	f04f 0028 	mov.w	r0, #40	; 0x28
   804b0:	f04f 0100 	mov.w	r1, #0
   804b4:	f240 3425 	movw	r4, #805	; 0x325
   804b8:	f2c0 0408 	movt	r4, #8
   804bc:	47a0      	blx	r4
	LCDwrite(0b00001000, LOW);		/* Display off */
   804be:	f04f 0008 	mov.w	r0, #8
   804c2:	f04f 0100 	mov.w	r1, #0
   804c6:	47a0      	blx	r4
	LCDwrite(0b00000001, LOW);		/* Display clear */
   804c8:	f04f 0001 	mov.w	r0, #1
   804cc:	f04f 0100 	mov.w	r1, #0
   804d0:	47a0      	blx	r4
	
	delay(3000);
   804d2:	f640 30b8 	movw	r0, #3000	; 0xbb8
   804d6:	47b0      	blx	r6
	
	LCDwrite(0b00000110, LOW);		/* Entry mode set: move cursor right, no display shift */
   804d8:	f04f 0006 	mov.w	r0, #6
   804dc:	f04f 0100 	mov.w	r1, #0
   804e0:	47a0      	blx	r4
	LCDwrite(0b00001111 ,LOW);		/* Display on, cursor on, blinking on */
   804e2:	f04f 000f 	mov.w	r0, #15
   804e6:	f04f 0100 	mov.w	r1, #0
   804ea:	47a0      	blx	r4

	all_ok = 1;					/* simple return statement showing that the initialization of the LCD has completed */
	return all_ok;
}
   804ec:	f04f 0001 	mov.w	r0, #1
   804f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000804f4 <LCDClear>:
	
	return mirrored_output;
}

int LCDClear(void)
{
   804f4:	b508      	push	{r3, lr}
	int all_Ok = 0;
	LCDwrite(0b00000001, LOW);
   804f6:	f04f 0001 	mov.w	r0, #1
   804fa:	f04f 0100 	mov.w	r1, #0
   804fe:	f240 3325 	movw	r3, #805	; 0x325
   80502:	f2c0 0308 	movt	r3, #8
   80506:	4798      	blx	r3
	delay(1600);
   80508:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   8050c:	f240 21cd 	movw	r1, #717	; 0x2cd
   80510:	f2c0 0108 	movt	r1, #8
   80514:	4788      	blx	r1
	all_Ok = 1;
	return all_Ok;
}
   80516:	f04f 0001 	mov.w	r0, #1
   8051a:	bd08      	pop	{r3, pc}

0008051c <LCDwriteChar>:
// 	return array[10];
}

/* displays strings on the LCD display */
int LCDwriteChar(const char* str)
{
   8051c:	b570      	push	{r4, r5, r6, lr}
   8051e:	4604      	mov	r4, r0
	int all_ok = 0;
	
	// loop until the pointer gives a break value
	while (*str != '\0')
   80520:	7800      	ldrb	r0, [r0, #0]
   80522:	b158      	cbz	r0, 8053c <LCDwriteChar+0x20>
	{
		LCDwrite(*str, HIGH);
   80524:	f04f 0601 	mov.w	r6, #1
   80528:	f240 3525 	movw	r5, #805	; 0x325
   8052c:	f2c0 0508 	movt	r5, #8
   80530:	4631      	mov	r1, r6
   80532:	47a8      	blx	r5
int LCDwriteChar(const char* str)
{
	int all_ok = 0;
	
	// loop until the pointer gives a break value
	while (*str != '\0')
   80534:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   80538:	2800      	cmp	r0, #0
   8053a:	d1f9      	bne.n	80530 <LCDwriteChar+0x14>
		str++;
	}
	
	all_ok = 1;
	return all_ok;
   8053c:	f04f 0001 	mov.w	r0, #1
   80540:	bd70      	pop	{r4, r5, r6, pc}
   80542:	bf00      	nop

00080544 <main>:
//#include "Delay.h"
#include "myADC.h"
#include "LCDShield.h"

int main (void)
{
   80544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	/* Initialize the Arduino Due system */
	sysclk_init();
   80548:	f240 6395 	movw	r3, #1685	; 0x695
   8054c:	f2c0 0308 	movt	r3, #8
   80550:	4798      	blx	r3
	board_init();
   80552:	f240 700d 	movw	r0, #1805	; 0x70d
   80556:	f2c0 0008 	movt	r0, #8
   8055a:	4780      	blx	r0
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8055c:	f04f 000b 	mov.w	r0, #11
   80560:	f640 4461 	movw	r4, #3169	; 0xc61
   80564:	f2c0 0408 	movt	r4, #8
   80568:	47a0      	blx	r4
   8056a:	f04f 000c 	mov.w	r0, #12
   8056e:	47a0      	blx	r4
   80570:	f04f 000d 	mov.w	r0, #13
   80574:	47a0      	blx	r4
   80576:	f04f 000e 	mov.w	r0, #14
   8057a:	47a0      	blx	r4
	/* initialize the I/O-port used for transmitting data to the LCD-shield */
	ioport_init();	
	/* Initialize the timer used for delays */
	delay_init();
   8057c:	f240 2181 	movw	r1, #641	; 0x281
   80580:	f2c0 0108 	movt	r1, #8
   80584:	4788      	blx	r1
	LCDInit();
   80586:	f240 32e9 	movw	r2, #1001	; 0x3e9
   8058a:	f2c0 0208 	movt	r2, #8
   8058e:	4790      	blx	r2

	/* Initialize the console UART used from within Atmel Studio*/
	
	//	configure_console();
	
	        if (ADCSetup(0) == 0) {
   80590:	f04f 0000 	mov.w	r0, #0
   80594:	f241 05ad 	movw	r5, #4269	; 0x10ad
   80598:	f2c0 0508 	movt	r5, #8
   8059c:	47a8      	blx	r5
   8059e:	b948      	cbnz	r0, 805b4 <main+0x70>
		        LCDwriteChar("ERROR");
   805a0:	f241 20a8 	movw	r0, #4776	; 0x12a8
   805a4:	f2c0 0008 	movt	r0, #8
   805a8:	f240 541d 	movw	r4, #1309	; 0x51d
   805ac:	f2c0 0408 	movt	r4, #8
   805b0:	47a0      	blx	r4
   805b2:	e7fe      	b.n	805b2 <main+0x6e>
		        while (1);
	        }
	        else{
		        LCDwriteChar("OK");
   805b4:	f241 20b0 	movw	r0, #4784	; 0x12b0
   805b8:	f2c0 0008 	movt	r0, #8
   805bc:	f240 561d 	movw	r6, #1309	; 0x51d
   805c0:	f2c0 0608 	movt	r6, #8
   805c4:	47b0      	blx	r6
	uint32_t result;
	
	while(1)
	{
		
		adc_start(ADC);
   805c6:	f04f 0400 	mov.w	r4, #0
   805ca:	f2c4 040c 	movt	r4, #16396	; 0x400c
   805ce:	f240 2925 	movw	r9, #549	; 0x225
   805d2:	f2c0 0908 	movt	r9, #8
		delay(100000);
   805d6:	f248 65a0 	movw	r5, #34464	; 0x86a0
   805da:	f2c0 0501 	movt	r5, #1
   805de:	f240 28cd 	movw	r8, #717	; 0x2cd
   805e2:	f2c0 0808 	movt	r8, #8
		LCDClear();		
   805e6:	f240 47f5 	movw	r7, #1269	; 0x4f5
   805ea:	f2c0 0708 	movt	r7, #8
		result = adc_get_latest_value(ADC);
   805ee:	f240 2639 	movw	r6, #569	; 0x239
   805f2:	f2c0 0608 	movt	r6, #8
	uint32_t result;
	
	while(1)
	{
		
		adc_start(ADC);
   805f6:	4620      	mov	r0, r4
   805f8:	47c8      	blx	r9
		delay(100000);
   805fa:	4628      	mov	r0, r5
   805fc:	47c0      	blx	r8
		LCDClear();		
   805fe:	47b8      	blx	r7
		result = adc_get_latest_value(ADC);
   80600:	4620      	mov	r0, r4
   80602:	47b0      	blx	r6

		
		/* The values aren't exactly like calculated
		but given a buffert to avoid errors */
			
				if (result < 50 ){
   80604:	2831      	cmp	r0, #49	; 0x31
   80606:	d809      	bhi.n	8061c <main+0xd8>
					LCDwriteChar("right");
   80608:	f241 20b4 	movw	r0, #4788	; 0x12b4
   8060c:	f2c0 0008 	movt	r0, #8
   80610:	f240 511d 	movw	r1, #1309	; 0x51d
   80614:	f2c0 0108 	movt	r1, #8
   80618:	4788      	blx	r1
   8061a:	e7ec      	b.n	805f6 <main+0xb2>
				}
				else if (result < 700 ){
   8061c:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   80620:	d209      	bcs.n	80636 <main+0xf2>
					 LCDwriteChar("up");
   80622:	f241 20bc 	movw	r0, #4796	; 0x12bc
   80626:	f2c0 0008 	movt	r0, #8
   8062a:	f240 531d 	movw	r3, #1309	; 0x51d
   8062e:	f2c0 0308 	movt	r3, #8
   80632:	4798      	blx	r3
   80634:	e7df      	b.n	805f6 <main+0xb2>
				}
				else if (result < 1500 ){
   80636:	f240 53db 	movw	r3, #1499	; 0x5db
   8063a:	4298      	cmp	r0, r3
   8063c:	d809      	bhi.n	80652 <main+0x10e>
					LCDwriteChar("down");
   8063e:	f241 20c0 	movw	r0, #4800	; 0x12c0
   80642:	f2c0 0008 	movt	r0, #8
   80646:	f240 521d 	movw	r2, #1309	; 0x51d
   8064a:	f2c0 0208 	movt	r2, #8
   8064e:	4790      	blx	r2
   80650:	e7d1      	b.n	805f6 <main+0xb2>
				}
				else if (result < 1900 ){
   80652:	f240 716b 	movw	r1, #1899	; 0x76b
   80656:	4288      	cmp	r0, r1
   80658:	d809      	bhi.n	8066e <main+0x12a>
					 LCDwriteChar("left");
   8065a:	f241 20c8 	movw	r0, #4808	; 0x12c8
   8065e:	f2c0 0008 	movt	r0, #8
   80662:	f240 511d 	movw	r1, #1309	; 0x51d
   80666:	f2c0 0108 	movt	r1, #8
   8066a:	4788      	blx	r1
   8066c:	e7c3      	b.n	805f6 <main+0xb2>
				}
				else if (result < 2500 ){
   8066e:	f640 12c3 	movw	r2, #2499	; 0x9c3
   80672:	4290      	cmp	r0, r2
					 LCDwriteChar("select");
   80674:	bf99      	ittee	ls
   80676:	f241 20d0 	movwls	r0, #4816	; 0x12d0
   8067a:	f2c0 0008 	movtls	r0, #8
				} 
				else {
					LCDwriteChar("none");
   8067e:	f241 20d8 	movwhi	r0, #4824	; 0x12d8
   80682:	f2c0 0008 	movthi	r0, #8
   80686:	f240 531d 	movw	r3, #1309	; 0x51d
   8068a:	f2c0 0308 	movt	r3, #8
   8068e:	4798      	blx	r3
   80690:	e7b1      	b.n	805f6 <main+0xb2>
   80692:	bf00      	nop

00080694 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80694:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80696:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   8069a:	f2c0 5001 	movt	r0, #1281	; 0x501
   8069e:	f640 73e9 	movw	r3, #4073	; 0xfe9
   806a2:	f2c0 0308 	movt	r3, #8
   806a6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   806a8:	f04f 0000 	mov.w	r0, #0
   806ac:	f04f 013e 	mov.w	r1, #62	; 0x3e
   806b0:	f640 32c1 	movw	r2, #3009	; 0xbc1
   806b4:	f2c0 0208 	movt	r2, #8
   806b8:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   806ba:	f640 4431 	movw	r4, #3121	; 0xc31
   806be:	f2c0 0408 	movt	r4, #8
   806c2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   806c4:	2800      	cmp	r0, #0
   806c6:	d0fc      	beq.n	806c2 <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   806c8:	f640 4041 	movw	r0, #3137	; 0xc41
   806cc:	f2c0 0008 	movt	r0, #8
   806d0:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   806d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   806d6:	f2c4 010e 	movt	r1, #16398	; 0x400e
   806da:	f643 7301 	movw	r3, #16129	; 0x3f01
   806de:	f2c2 030d 	movt	r3, #8205	; 0x200d
   806e2:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   806e4:	f640 4451 	movw	r4, #3153	; 0xc51
   806e8:	f2c0 0408 	movt	r4, #8
   806ec:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   806ee:	2800      	cmp	r0, #0
   806f0:	d0fc      	beq.n	806ec <sysclk_init+0x58>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   806f2:	f04f 0010 	mov.w	r0, #16
   806f6:	f640 3221 	movw	r2, #2849	; 0xb21
   806fa:	f2c0 0208 	movt	r2, #8
   806fe:	4790      	blx	r2
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80700:	f640 6021 	movw	r0, #3617	; 0xe21
   80704:	f2c0 0008 	movt	r0, #8
   80708:	4780      	blx	r0
   8070a:	bd10      	pop	{r4, pc}

0008070c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   8070c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8070e:	f641 2350 	movw	r3, #6736	; 0x1a50
   80712:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80716:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8071a:	605a      	str	r2, [r3, #4]
   8071c:	f04f 000b 	mov.w	r0, #11
   80720:	f640 4461 	movw	r4, #3169	; 0xc61
   80724:	f2c0 0408 	movt	r4, #8
   80728:	47a0      	blx	r4
   8072a:	f04f 000c 	mov.w	r0, #12
   8072e:	47a0      	blx	r4
   80730:	f04f 000d 	mov.w	r0, #13
   80734:	47a0      	blx	r4
   80736:	f04f 000e 	mov.w	r0, #14
   8073a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8073c:	f04f 003b 	mov.w	r0, #59	; 0x3b
   80740:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80744:	f640 0495 	movw	r4, #2197	; 0x895
   80748:	f2c0 0408 	movt	r4, #8
   8074c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8074e:	f04f 0055 	mov.w	r0, #85	; 0x55
   80752:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80756:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80758:	f04f 0056 	mov.w	r0, #86	; 0x56
   8075c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80760:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80762:	f04f 0068 	mov.w	r0, #104	; 0x68
   80766:	f04f 0179 	mov.w	r1, #121	; 0x79
   8076a:	f6c2 0100 	movt	r1, #10240	; 0x2800
   8076e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80770:	f04f 005c 	mov.w	r0, #92	; 0x5c
   80774:	f04f 0101 	mov.w	r1, #1
   80778:	f6c2 0100 	movt	r1, #10240	; 0x2800
   8077c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8077e:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   80782:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80786:	f44f 7140 	mov.w	r1, #768	; 0x300
   8078a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8078e:	f640 1395 	movw	r3, #2453	; 0x995
   80792:	f2c0 0308 	movt	r3, #8
   80796:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80798:	f04f 002b 	mov.w	r0, #43	; 0x2b
   8079c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807a0:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   807a2:	f04f 002a 	mov.w	r0, #42	; 0x2a
   807a6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807aa:	47a0      	blx	r4
   807ac:	bd10      	pop	{r4, pc}
   807ae:	bf00      	nop

000807b0 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   807b0:	b10a      	cbz	r2, 807b6 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   807b2:	6641      	str	r1, [r0, #100]	; 0x64
   807b4:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   807b6:	6601      	str	r1, [r0, #96]	; 0x60
   807b8:	4770      	bx	lr
   807ba:	bf00      	nop

000807bc <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   807bc:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   807be:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   807c2:	d016      	beq.n	807f2 <pio_set_peripheral+0x36>
   807c4:	d804      	bhi.n	807d0 <pio_set_peripheral+0x14>
   807c6:	b1c9      	cbz	r1, 807fc <pio_set_peripheral+0x40>
   807c8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   807cc:	d115      	bne.n	807fa <pio_set_peripheral+0x3e>
   807ce:	e009      	b.n	807e4 <pio_set_peripheral+0x28>
   807d0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   807d4:	d012      	beq.n	807fc <pio_set_peripheral+0x40>
   807d6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   807da:	d00f      	beq.n	807fc <pio_set_peripheral+0x40>
   807dc:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   807e0:	d10b      	bne.n	807fa <pio_set_peripheral+0x3e>
   807e2:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   807e4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   807e6:	6f01      	ldr	r1, [r0, #112]	; 0x70
   807e8:	400b      	ands	r3, r1
   807ea:	ea23 0302 	bic.w	r3, r3, r2
   807ee:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   807f0:	e003      	b.n	807fa <pio_set_peripheral+0x3e>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   807f2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   807f4:	ea42 0103 	orr.w	r1, r2, r3
   807f8:	6701      	str	r1, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   807fa:	6042      	str	r2, [r0, #4]
   807fc:	4770      	bx	lr
   807fe:	bf00      	nop

00080800 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80800:	6441      	str	r1, [r0, #68]	; 0x44
   80802:	4770      	bx	lr

00080804 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80806:	4604      	mov	r4, r0
   80808:	460d      	mov	r5, r1
   8080a:	4616      	mov	r6, r2
   8080c:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   8080e:	f640 0301 	movw	r3, #2049	; 0x801
   80812:	f2c0 0308 	movt	r3, #8
   80816:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   80818:	4620      	mov	r0, r4
   8081a:	4629      	mov	r1, r5
   8081c:	9a06      	ldr	r2, [sp, #24]
   8081e:	f240 73b1 	movw	r3, #1969	; 0x7b1
   80822:	f2c0 0308 	movt	r3, #8
   80826:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80828:	b10f      	cbz	r7, 8082e <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
   8082a:	6525      	str	r5, [r4, #80]	; 0x50
   8082c:	e000      	b.n	80830 <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8082e:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80830:	b10e      	cbz	r6, 80836 <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
   80832:	6325      	str	r5, [r4, #48]	; 0x30
   80834:	e000      	b.n	80838 <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80836:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80838:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   8083a:	6025      	str	r5, [r4, #0]
   8083c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8083e:	bf00      	nop

00080840 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   80840:	b570      	push	{r4, r5, r6, lr}
   80842:	4604      	mov	r4, r0
   80844:	460d      	mov	r5, r1
   80846:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   80848:	f640 0301 	movw	r3, #2049	; 0x801
   8084c:	f2c0 0308 	movt	r3, #8
   80850:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   80852:	4620      	mov	r0, r4
   80854:	4629      	mov	r1, r5
   80856:	f006 0201 	and.w	r2, r6, #1
   8085a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   8085e:	f2c0 0308 	movt	r3, #8
   80862:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80864:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
   80868:	bf14      	ite	ne
   8086a:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8086c:	6265      	streq	r5, [r4, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8086e:	f016 0f02 	tst.w	r6, #2
   80872:	d002      	beq.n	8087a <pio_set_input+0x3a>
		p_pio->PIO_SCIFSR = ul_mask;
   80874:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   80878:	e004      	b.n	80884 <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8087a:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_SCIFSR = ul_mask;
   8087e:	bf18      	it	ne
   80880:	f8c4 5080 	strne.w	r5, [r4, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80884:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   80886:	6025      	str	r5, [r4, #0]
   80888:	bd70      	pop	{r4, r5, r6, pc}
   8088a:	bf00      	nop

0008088c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8088c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8088e:	4770      	bx	lr

00080890 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80890:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80892:	4770      	bx	lr

00080894 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80894:	b5f0      	push	{r4, r5, r6, r7, lr}
   80896:	b083      	sub	sp, #12
   80898:	460d      	mov	r5, r1
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8089a:	ea4f 1650 	mov.w	r6, r0, lsr #5
   8089e:	f506 1100 	add.w	r1, r6, #2097152	; 0x200000
   808a2:	f201 7207 	addw	r2, r1, #1799	; 0x707
   808a6:	ea4f 2642 	mov.w	r6, r2, lsl #9

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   808aa:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
   808ae:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   808b2:	d042      	beq.n	8093a <pio_configure_pin+0xa6>
   808b4:	d806      	bhi.n	808c4 <pio_configure_pin+0x30>
   808b6:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   808ba:	d00a      	beq.n	808d2 <pio_configure_pin+0x3e>
   808bc:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   808c0:	d164      	bne.n	8098c <pio_configure_pin+0xf8>
   808c2:	e020      	b.n	80906 <pio_configure_pin+0x72>
   808c4:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   808c8:	d046      	beq.n	80958 <pio_configure_pin+0xc4>
   808ca:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   808ce:	d15d      	bne.n	8098c <pio_configure_pin+0xf8>
   808d0:	e042      	b.n	80958 <pio_configure_pin+0xc4>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   808d2:	f000 071f 	and.w	r7, r0, #31
   808d6:	f04f 0401 	mov.w	r4, #1
   808da:	fa04 f707 	lsl.w	r7, r4, r7
   808de:	4630      	mov	r0, r6
   808e0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   808e4:	463a      	mov	r2, r7
   808e6:	f240 73bd 	movw	r3, #1981	; 0x7bd
   808ea:	f2c0 0308 	movt	r3, #8
   808ee:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   808f0:	4630      	mov	r0, r6
   808f2:	4639      	mov	r1, r7
   808f4:	ea05 0204 	and.w	r2, r5, r4
   808f8:	f240 73b1 	movw	r3, #1969	; 0x7b1
   808fc:	f2c0 0308 	movt	r3, #8
   80900:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80902:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   80904:	e044      	b.n	80990 <pio_configure_pin+0xfc>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80906:	f000 001f 	and.w	r0, r0, #31
   8090a:	f04f 0401 	mov.w	r4, #1
   8090e:	fa04 f700 	lsl.w	r7, r4, r0
   80912:	4630      	mov	r0, r6
   80914:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80918:	463a      	mov	r2, r7
   8091a:	f240 73bd 	movw	r3, #1981	; 0x7bd
   8091e:	f2c0 0308 	movt	r3, #8
   80922:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80924:	4630      	mov	r0, r6
   80926:	4639      	mov	r1, r7
   80928:	ea05 0204 	and.w	r2, r5, r4
   8092c:	f240 73b1 	movw	r3, #1969	; 0x7b1
   80930:	f2c0 0308 	movt	r3, #8
   80934:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80936:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   80938:	e02a      	b.n	80990 <pio_configure_pin+0xfc>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8093a:	f000 021f 	and.w	r2, r0, #31
   8093e:	f04f 0401 	mov.w	r4, #1
   80942:	4630      	mov	r0, r6
   80944:	fa04 f102 	lsl.w	r1, r4, r2
   80948:	462a      	mov	r2, r5
   8094a:	f640 0341 	movw	r3, #2113	; 0x841
   8094e:	f2c0 0308 	movt	r3, #8
   80952:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80954:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80956:	e01b      	b.n	80990 <pio_configure_pin+0xfc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80958:	f000 021f 	and.w	r2, r0, #31
   8095c:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80960:	f005 5360 	and.w	r3, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80964:	ea05 0104 	and.w	r1, r5, r4
   80968:	9100      	str	r1, [sp, #0]
   8096a:	4630      	mov	r0, r6
   8096c:	fa04 f102 	lsl.w	r1, r4, r2
   80970:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80974:	bf14      	ite	ne
   80976:	2200      	movne	r2, #0
   80978:	2201      	moveq	r2, #1
   8097a:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8097e:	f640 0505 	movw	r5, #2053	; 0x805
   80982:	f2c0 0508 	movt	r5, #8
   80986:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80988:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8098a:	e001      	b.n	80990 <pio_configure_pin+0xfc>

	default:
		return 0;
   8098c:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   80990:	b003      	add	sp, #12
   80992:	bdf0      	pop	{r4, r5, r6, r7, pc}

00080994 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80994:	b5f0      	push	{r4, r5, r6, r7, lr}
   80996:	b083      	sub	sp, #12
   80998:	4607      	mov	r7, r0
   8099a:	460e      	mov	r6, r1
   8099c:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8099e:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   809a2:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   809a6:	d036      	beq.n	80a16 <pio_configure_pin_group+0x82>
   809a8:	d806      	bhi.n	809b8 <pio_configure_pin_group+0x24>
   809aa:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   809ae:	d00a      	beq.n	809c6 <pio_configure_pin_group+0x32>
   809b0:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   809b4:	d14d      	bne.n	80a52 <pio_configure_pin_group+0xbe>
   809b6:	e01a      	b.n	809ee <pio_configure_pin_group+0x5a>
   809b8:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   809bc:	d033      	beq.n	80a26 <pio_configure_pin_group+0x92>
   809be:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   809c2:	d146      	bne.n	80a52 <pio_configure_pin_group+0xbe>
   809c4:	e02f      	b.n	80a26 <pio_configure_pin_group+0x92>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   809c6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809ca:	4632      	mov	r2, r6
   809cc:	f240 73bd 	movw	r3, #1981	; 0x7bd
   809d0:	f2c0 0308 	movt	r3, #8
   809d4:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   809d6:	4638      	mov	r0, r7
   809d8:	4631      	mov	r1, r6
   809da:	f005 0201 	and.w	r2, r5, #1
   809de:	f240 73b1 	movw	r3, #1969	; 0x7b1
   809e2:	f2c0 0308 	movt	r3, #8
   809e6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   809e8:	f04f 0001 	mov.w	r0, #1
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   809ec:	e033      	b.n	80a56 <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   809ee:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   809f2:	4632      	mov	r2, r6
   809f4:	f240 73bd 	movw	r3, #1981	; 0x7bd
   809f8:	f2c0 0308 	movt	r3, #8
   809fc:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   809fe:	4638      	mov	r0, r7
   80a00:	4631      	mov	r1, r6
   80a02:	f005 0201 	and.w	r2, r5, #1
   80a06:	f240 73b1 	movw	r3, #1969	; 0x7b1
   80a0a:	f2c0 0308 	movt	r3, #8
   80a0e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80a10:	f04f 0001 	mov.w	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   80a14:	e01f      	b.n	80a56 <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80a16:	f640 0341 	movw	r3, #2113	; 0x841
   80a1a:	f2c0 0308 	movt	r3, #8
   80a1e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80a20:	f04f 0001 	mov.w	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80a24:	e017      	b.n	80a56 <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80a26:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80a2a:	f005 0001 	and.w	r0, r5, #1
   80a2e:	9000      	str	r0, [sp, #0]
   80a30:	4638      	mov	r0, r7
   80a32:	4631      	mov	r1, r6
   80a34:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80a38:	bf14      	ite	ne
   80a3a:	2200      	movne	r2, #0
   80a3c:	2201      	moveq	r2, #1
   80a3e:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80a42:	f640 0405 	movw	r4, #2053	; 0x805
   80a46:	f2c0 0408 	movt	r4, #8
   80a4a:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80a4c:	f04f 0001 	mov.w	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80a50:	e001      	b.n	80a56 <pio_configure_pin_group+0xc2>

	default:
		return 0;
   80a52:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   80a56:	b003      	add	sp, #12
   80a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80a5a:	bf00      	nop

00080a5c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80a5e:	4604      	mov	r4, r0
   80a60:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80a62:	f640 038d 	movw	r3, #2189	; 0x88d
   80a66:	f2c0 0308 	movt	r3, #8
   80a6a:	4798      	blx	r3
   80a6c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80a6e:	4620      	mov	r0, r4
   80a70:	f640 0191 	movw	r1, #2193	; 0x891
   80a74:	f2c0 0108 	movt	r1, #8
   80a78:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
   80a7a:	4005      	ands	r5, r0
   80a7c:	d014      	beq.n	80aa8 <pio_handler_process+0x4c>
   80a7e:	4c0b      	ldr	r4, [pc, #44]	; (80aac <pio_handler_process+0x50>)
 * \brief Process an interrupt request on the given PIO controller.
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
   80a80:	4627      	mov	r7, r4
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80a82:	f854 0c0c 	ldr.w	r0, [r4, #-12]
   80a86:	42b0      	cmp	r0, r6
   80a88:	d10a      	bne.n	80aa0 <pio_handler_process+0x44>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80a8a:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80a8e:	4229      	tst	r1, r5
   80a90:	d006      	beq.n	80aa0 <pio_handler_process+0x44>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80a92:	6822      	ldr	r2, [r4, #0]
   80a94:	4630      	mov	r0, r6
   80a96:	4790      	blx	r2
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80a98:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80a9c:	ea25 0503 	bic.w	r5, r5, r3
   80aa0:	f104 0410 	add.w	r4, r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80aa4:	2d00      	cmp	r5, #0
   80aa6:	d1eb      	bne.n	80a80 <pio_handler_process+0x24>
   80aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80aaa:	bf00      	nop
   80aac:	20070460 	.word	0x20070460

00080ab0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80ab0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80ab2:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   80ab6:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80aba:	f04f 010b 	mov.w	r1, #11
   80abe:	f640 235d 	movw	r3, #2653	; 0xa5d
   80ac2:	f2c0 0308 	movt	r3, #8
   80ac6:	4798      	blx	r3
   80ac8:	bd08      	pop	{r3, pc}
   80aca:	bf00      	nop

00080acc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80acc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80ace:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   80ad2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80ad6:	f04f 010c 	mov.w	r1, #12
   80ada:	f640 235d 	movw	r3, #2653	; 0xa5d
   80ade:	f2c0 0308 	movt	r3, #8
   80ae2:	4798      	blx	r3
   80ae4:	bd08      	pop	{r3, pc}
   80ae6:	bf00      	nop

00080ae8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80ae8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80aea:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   80aee:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80af2:	f04f 010d 	mov.w	r1, #13
   80af6:	f640 235d 	movw	r3, #2653	; 0xa5d
   80afa:	f2c0 0308 	movt	r3, #8
   80afe:	4798      	blx	r3
   80b00:	bd08      	pop	{r3, pc}
   80b02:	bf00      	nop

00080b04 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80b04:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80b06:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
   80b0a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80b0e:	f04f 010e 	mov.w	r1, #14
   80b12:	f640 235d 	movw	r3, #2653	; 0xa5d
   80b16:	f2c0 0308 	movt	r3, #8
   80b1a:	4798      	blx	r3
   80b1c:	bd08      	pop	{r3, pc}
   80b1e:	bf00      	nop

00080b20 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80b20:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80b24:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80b2a:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   80b2e:	4308      	orrs	r0, r1
   80b30:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b32:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80b34:	f010 0f08 	tst.w	r0, #8
   80b38:	d007      	beq.n	80b4a <pmc_switch_mck_to_pllack+0x2a>
   80b3a:	e010      	b.n	80b5e <pmc_switch_mck_to_pllack+0x3e>
   80b3c:	f100 33ff 	add.w	r3, r0, #4294967295
   80b40:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80b42:	f010 0f08 	tst.w	r0, #8
   80b46:	d038      	beq.n	80bba <pmc_switch_mck_to_pllack+0x9a>
   80b48:	e009      	b.n	80b5e <pmc_switch_mck_to_pllack+0x3e>
   80b4a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   80b4e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80b52:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80b56:	6e91      	ldr	r1, [r2, #104]	; 0x68
   80b58:	f011 0f08 	tst.w	r1, #8
   80b5c:	d0ee      	beq.n	80b3c <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80b5e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80b62:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80b66:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   80b68:	f022 0303 	bic.w	r3, r2, #3
   80b6c:	f043 0002 	orr.w	r0, r3, #2
   80b70:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b72:	6e89      	ldr	r1, [r1, #104]	; 0x68
   80b74:	f011 0f08 	tst.w	r1, #8
   80b78:	d009      	beq.n	80b8e <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80b7a:	f04f 0000 	mov.w	r0, #0
   80b7e:	4770      	bx	lr
   80b80:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b84:	6e91      	ldr	r1, [r2, #104]	; 0x68
   80b86:	f011 0f08 	tst.w	r1, #8
   80b8a:	d013      	beq.n	80bb4 <pmc_switch_mck_to_pllack+0x94>
   80b8c:	e009      	b.n	80ba2 <pmc_switch_mck_to_pllack+0x82>
   80b8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80b92:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80b96:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80b9a:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80b9c:	f010 0f08 	tst.w	r0, #8
   80ba0:	d0ee      	beq.n	80b80 <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80ba2:	f04f 0000 	mov.w	r0, #0
   80ba6:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80ba8:	f04f 0001 	mov.w	r0, #1
   80bac:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80bae:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
   80bb2:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80bb4:	3b01      	subs	r3, #1
   80bb6:	d1f0      	bne.n	80b9a <pmc_switch_mck_to_pllack+0x7a>
   80bb8:	e7f9      	b.n	80bae <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80bba:	1e58      	subs	r0, r3, #1
   80bbc:	d1cb      	bne.n	80b56 <pmc_switch_mck_to_pllack+0x36>
   80bbe:	e7f3      	b.n	80ba8 <pmc_switch_mck_to_pllack+0x88>

00080bc0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80bc0:	b188      	cbz	r0, 80be6 <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80bc2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80bc6:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80bca:	6a08      	ldr	r0, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   80bcc:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   80bd0:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
   80bd4:	4002      	ands	r2, r0
   80bd6:	f04f 0302 	mov.w	r3, #2
   80bda:	f2c0 1337 	movt	r3, #311	; 0x137
   80bde:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80be2:	6208      	str	r0, [r1, #32]
   80be4:	4770      	bx	lr
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80be6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80bea:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80bee:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   80bf0:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
   80bf4:	f020 0203 	bic.w	r2, r0, #3
   80bf8:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
   80bfc:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80c00:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   80c04:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80c08:	6218      	str	r0, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80c0a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80c0e:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80c12:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80c14:	f013 0f01 	tst.w	r3, #1
   80c18:	d0fb      	beq.n	80c12 <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   80c1a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80c1e:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80c22:	6a08      	ldr	r0, [r1, #32]
   80c24:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
   80c28:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
   80c2c:	620b      	str	r3, [r1, #32]
   80c2e:	4770      	bx	lr

00080c30 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80c30:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80c34:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80c38:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80c3a:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80c3e:	4770      	bx	lr

00080c40 <pmc_disable_pllack>:
/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80c40:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80c44:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80c48:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80c4c:	629a      	str	r2, [r3, #40]	; 0x28
   80c4e:	4770      	bx	lr

00080c50 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80c50:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80c54:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80c58:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80c5a:	f000 0002 	and.w	r0, r0, #2
   80c5e:	4770      	bx	lr

00080c60 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80c60:	282c      	cmp	r0, #44	; 0x2c
   80c62:	d835      	bhi.n	80cd0 <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
   80c64:	281f      	cmp	r0, #31
   80c66:	d817      	bhi.n	80c98 <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80c68:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80c6c:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80c70:	698a      	ldr	r2, [r1, #24]
   80c72:	f04f 0301 	mov.w	r3, #1
   80c76:	fa03 f300 	lsl.w	r3, r3, r0
   80c7a:	401a      	ands	r2, r3
   80c7c:	4293      	cmp	r3, r2
   80c7e:	d02a      	beq.n	80cd6 <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
   80c80:	f04f 0101 	mov.w	r1, #1
   80c84:	fa01 f000 	lsl.w	r0, r1, r0
   80c88:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80c8c:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80c90:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80c92:	f04f 0000 	mov.w	r0, #0
   80c96:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80c98:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80c9c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80ca0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   80ca4:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80ca8:	f04f 0101 	mov.w	r1, #1
   80cac:	fa01 f100 	lsl.w	r1, r1, r0
   80cb0:	400a      	ands	r2, r1
   80cb2:	4291      	cmp	r1, r2
   80cb4:	d012      	beq.n	80cdc <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
   80cb6:	f04f 0301 	mov.w	r3, #1
   80cba:	fa03 f000 	lsl.w	r0, r3, r0
   80cbe:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80cc2:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80cc6:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   80cca:	f04f 0000 	mov.w	r0, #0
   80cce:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80cd0:	f04f 0001 	mov.w	r0, #1
   80cd4:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80cd6:	f04f 0000 	mov.w	r0, #0
   80cda:	4770      	bx	lr
   80cdc:	f04f 0000 	mov.w	r0, #0
}
   80ce0:	4770      	bx	lr
   80ce2:	bf00      	nop

00080ce4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80ce4:	e7fe      	b.n	80ce4 <Dummy_Handler>
   80ce6:	bf00      	nop

00080ce8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80ce8:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80cea:	f240 0300 	movw	r3, #0
   80cee:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80cf2:	f241 323c 	movw	r2, #4924	; 0x133c
   80cf6:	f2c0 0208 	movt	r2, #8
   80cfa:	429a      	cmp	r2, r3
   80cfc:	d003      	beq.n	80d06 <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   80cfe:	4840      	ldr	r0, [pc, #256]	; (80e00 <Reset_Handler+0x118>)
   80d00:	4940      	ldr	r1, [pc, #256]	; (80e04 <Reset_Handler+0x11c>)
   80d02:	4281      	cmp	r1, r0
   80d04:	d304      	bcc.n	80d10 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80d06:	4b40      	ldr	r3, [pc, #256]	; (80e08 <Reset_Handler+0x120>)
   80d08:	4a40      	ldr	r2, [pc, #256]	; (80e0c <Reset_Handler+0x124>)
   80d0a:	429a      	cmp	r2, r3
   80d0c:	d325      	bcc.n	80d5a <Reset_Handler+0x72>
   80d0e:	e042      	b.n	80d96 <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   80d10:	4d3f      	ldr	r5, [pc, #252]	; (80e10 <Reset_Handler+0x128>)
   80d12:	4c40      	ldr	r4, [pc, #256]	; (80e14 <Reset_Handler+0x12c>)
   80d14:	1b63      	subs	r3, r4, r5
   80d16:	f023 0503 	bic.w	r5, r3, #3
   80d1a:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   80d1e:	f240 0200 	movw	r2, #0
   80d22:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80d26:	f241 313c 	movw	r1, #4924	; 0x133c
   80d2a:	f2c0 0108 	movt	r1, #8
   80d2e:	f105 0004 	add.w	r0, r5, #4
   80d32:	f3c5 0480 	ubfx	r4, r5, #2, #1
   80d36:	585d      	ldr	r5, [r3, r1]
   80d38:	509d      	str	r5, [r3, r2]
   80d3a:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80d3e:	4283      	cmp	r3, r0
   80d40:	d155      	bne.n	80dee <Reset_Handler+0x106>
   80d42:	e7e0      	b.n	80d06 <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   80d44:	585d      	ldr	r5, [r3, r1]
   80d46:	509d      	str	r5, [r3, r2]
   80d48:	f103 0304 	add.w	r3, r3, #4
   80d4c:	585c      	ldr	r4, [r3, r1]
   80d4e:	509c      	str	r4, [r3, r2]
   80d50:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80d54:	4283      	cmp	r3, r0
   80d56:	d1f5      	bne.n	80d44 <Reset_Handler+0x5c>
   80d58:	e7d5      	b.n	80d06 <Reset_Handler+0x1e>
   80d5a:	4d2f      	ldr	r5, [pc, #188]	; (80e18 <Reset_Handler+0x130>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   80d5c:	492f      	ldr	r1, [pc, #188]	; (80e1c <Reset_Handler+0x134>)
   80d5e:	1b48      	subs	r0, r1, r5
   80d60:	f020 0403 	bic.w	r4, r0, #3
   80d64:	f240 4338 	movw	r3, #1080	; 0x438
   80d68:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80d6c:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80d6e:	f04f 0100 	mov.w	r1, #0
   80d72:	1b50      	subs	r0, r2, r5
   80d74:	f1a0 0004 	sub.w	r0, r0, #4
   80d78:	f3c0 0480 	ubfx	r4, r0, #2, #1
   80d7c:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80d80:	4295      	cmp	r5, r2
   80d82:	d12d      	bne.n	80de0 <Reset_Handler+0xf8>
   80d84:	e007      	b.n	80d96 <Reset_Handler+0xae>
   80d86:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
   80d8a:	6069      	str	r1, [r5, #4]
   80d8c:	f105 0508 	add.w	r5, r5, #8
   80d90:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80d92:	4295      	cmp	r5, r2
   80d94:	d1f7      	bne.n	80d86 <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80d96:	f240 0500 	movw	r5, #0
   80d9a:	f2c0 0508 	movt	r5, #8
   80d9e:	f025 4260 	bic.w	r2, r5, #3758096384	; 0xe0000000
   80da2:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   80da6:	f44f 406d 	mov.w	r0, #60672	; 0xed00
   80daa:	f2ce 0000 	movt	r0, #57344	; 0xe000
   80dae:	6081      	str	r1, [r0, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80db0:	f105 4460 	add.w	r4, r5, #3758096384	; 0xe0000000
   80db4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   80db8:	d207      	bcs.n	80dca <Reset_Handler+0xe2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80dba:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   80dbe:	f2ce 0300 	movt	r3, #57344	; 0xe000
   80dc2:	689d      	ldr	r5, [r3, #8]
   80dc4:	f045 5200 	orr.w	r2, r5, #536870912	; 0x20000000
   80dc8:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80dca:	f241 212d 	movw	r1, #4653	; 0x122d
   80dce:	f2c0 0108 	movt	r1, #8
   80dd2:	4788      	blx	r1

	/* Branch to main function */
	main();
   80dd4:	f240 5045 	movw	r0, #1349	; 0x545
   80dd8:	f2c0 0008 	movt	r0, #8
   80ddc:	4780      	blx	r0
   80dde:	e7fe      	b.n	80dde <Reset_Handler+0xf6>
   80de0:	2c00      	cmp	r4, #0
   80de2:	d0d0      	beq.n	80d86 <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80de4:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80de8:	4295      	cmp	r5, r2
   80dea:	d1cc      	bne.n	80d86 <Reset_Handler+0x9e>
   80dec:	e7d3      	b.n	80d96 <Reset_Handler+0xae>
   80dee:	2c00      	cmp	r4, #0
   80df0:	d0a8      	beq.n	80d44 <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   80df2:	585c      	ldr	r4, [r3, r1]
   80df4:	509c      	str	r4, [r3, r2]
   80df6:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80dfa:	4283      	cmp	r3, r0
   80dfc:	d1a2      	bne.n	80d44 <Reset_Handler+0x5c>
   80dfe:	e782      	b.n	80d06 <Reset_Handler+0x1e>
   80e00:	20070438 	.word	0x20070438
   80e04:	20070000 	.word	0x20070000
   80e08:	200704c4 	.word	0x200704c4
   80e0c:	20070438 	.word	0x20070438
   80e10:	20070004 	.word	0x20070004
   80e14:	2007043b 	.word	0x2007043b
   80e18:	20070434 	.word	0x20070434
   80e1c:	200704bf 	.word	0x200704bf

00080e20 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80e20:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80e24:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80e28:	6b18      	ldr	r0, [r3, #48]	; 0x30
   80e2a:	f000 0103 	and.w	r1, r0, #3
   80e2e:	2903      	cmp	r1, #3
   80e30:	f200 80b1 	bhi.w	80f96 <SystemCoreClockUpdate+0x176>
   80e34:	e8df f001 	tbb	[pc, r1]
   80e38:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80e3c:	f641 2010 	movw	r0, #6672	; 0x1a10
   80e40:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80e44:	6941      	ldr	r1, [r0, #20]
   80e46:	f011 0f80 	tst.w	r1, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80e4a:	f240 0300 	movw	r3, #0
   80e4e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80e52:	bf14      	ite	ne
   80e54:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80e58:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80e5c:	601a      	str	r2, [r3, #0]
   80e5e:	e09a      	b.n	80f96 <SystemCoreClockUpdate+0x176>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80e60:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80e64:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80e68:	6a18      	ldr	r0, [r3, #32]
   80e6a:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   80e6e:	d009      	beq.n	80e84 <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80e70:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   80e74:	f2c0 03b7 	movt	r3, #183	; 0xb7
   80e78:	f240 0200 	movw	r2, #0
   80e7c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80e80:	6013      	str	r3, [r2, #0]
   80e82:	e088      	b.n	80f96 <SystemCoreClockUpdate+0x176>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80e84:	f44f 6110 	mov.w	r1, #2304	; 0x900
   80e88:	f2c0 013d 	movt	r1, #61	; 0x3d
   80e8c:	f240 0200 	movw	r2, #0
   80e90:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80e94:	6011      	str	r1, [r2, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80e96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80e9a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80e9e:	6a18      	ldr	r0, [r3, #32]
   80ea0:	f000 0170 	and.w	r1, r0, #112	; 0x70
   80ea4:	2910      	cmp	r1, #16
   80ea6:	d002      	beq.n	80eae <SystemCoreClockUpdate+0x8e>
   80ea8:	2920      	cmp	r1, #32
   80eaa:	d174      	bne.n	80f96 <SystemCoreClockUpdate+0x176>
   80eac:	e009      	b.n	80ec2 <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80eae:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   80eb2:	f2c0 007a 	movt	r0, #122	; 0x7a
   80eb6:	f240 0100 	movw	r1, #0
   80eba:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80ebe:	6008      	str	r0, [r1, #0]
				break;
   80ec0:	e069      	b.n	80f96 <SystemCoreClockUpdate+0x176>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80ec2:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   80ec6:	f2c0 03b7 	movt	r3, #183	; 0xb7
   80eca:	f240 0200 	movw	r2, #0
   80ece:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80ed2:	6013      	str	r3, [r2, #0]
				break;
   80ed4:	e05f      	b.n	80f96 <SystemCoreClockUpdate+0x176>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80ed6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80eda:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80ede:	6a13      	ldr	r3, [r2, #32]
   80ee0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80ee4:	d009      	beq.n	80efa <SystemCoreClockUpdate+0xda>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80ee6:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   80eea:	f2c0 01b7 	movt	r1, #183	; 0xb7
   80eee:	f240 0200 	movw	r2, #0
   80ef2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80ef6:	6011      	str	r1, [r2, #0]
   80ef8:	e027      	b.n	80f4a <SystemCoreClockUpdate+0x12a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80efa:	f44f 6010 	mov.w	r0, #2304	; 0x900
   80efe:	f2c0 003d 	movt	r0, #61	; 0x3d
   80f02:	f240 0100 	movw	r1, #0
   80f06:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80f0a:	6008      	str	r0, [r1, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80f0c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80f10:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80f14:	6a13      	ldr	r3, [r2, #32]
   80f16:	f003 0070 	and.w	r0, r3, #112	; 0x70
   80f1a:	2810      	cmp	r0, #16
   80f1c:	d002      	beq.n	80f24 <SystemCoreClockUpdate+0x104>
   80f1e:	2820      	cmp	r0, #32
   80f20:	d113      	bne.n	80f4a <SystemCoreClockUpdate+0x12a>
   80f22:	e009      	b.n	80f38 <SystemCoreClockUpdate+0x118>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80f24:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   80f28:	f2c0 037a 	movt	r3, #122	; 0x7a
   80f2c:	f240 0000 	movw	r0, #0
   80f30:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80f34:	6003      	str	r3, [r0, #0]
				break;
   80f36:	e008      	b.n	80f4a <SystemCoreClockUpdate+0x12a>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80f38:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   80f3c:	f2c0 01b7 	movt	r1, #183	; 0xb7
   80f40:	f240 0200 	movw	r2, #0
   80f44:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80f48:	6011      	str	r1, [r2, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80f4a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80f4e:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80f52:	6b18      	ldr	r0, [r3, #48]	; 0x30
   80f54:	f000 0103 	and.w	r1, r0, #3
   80f58:	2902      	cmp	r1, #2
   80f5a:	d113      	bne.n	80f84 <SystemCoreClockUpdate+0x164>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80f5c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80f60:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80f64:	6a88      	ldr	r0, [r1, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80f66:	6a89      	ldr	r1, [r1, #40]	; 0x28
   80f68:	f240 0300 	movw	r3, #0
   80f6c:	f2c2 0307 	movt	r3, #8199	; 0x2007
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80f70:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80f74:	681a      	ldr	r2, [r3, #0]
   80f76:	fb00 2002 	mla	r0, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80f7a:	b2c9      	uxtb	r1, r1
   80f7c:	fbb0 f2f1 	udiv	r2, r0, r1
   80f80:	601a      	str	r2, [r3, #0]
   80f82:	e008      	b.n	80f96 <SystemCoreClockUpdate+0x176>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80f84:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
   80f88:	f6c0 634e 	movt	r3, #3662	; 0xe4e
   80f8c:	f240 0200 	movw	r2, #0
   80f90:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80f94:	6013      	str	r3, [r2, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80f96:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80f9a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80f9e:	6b10      	ldr	r0, [r2, #48]	; 0x30
   80fa0:	f000 0170 	and.w	r1, r0, #112	; 0x70
   80fa4:	2970      	cmp	r1, #112	; 0x70
   80fa6:	d10e      	bne.n	80fc6 <SystemCoreClockUpdate+0x1a6>
		SystemCoreClock /= 3U;
   80fa8:	f240 0300 	movw	r3, #0
   80fac:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80fb0:	6818      	ldr	r0, [r3, #0]
   80fb2:	f64a 22ab 	movw	r2, #43691	; 0xaaab
   80fb6:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
   80fba:	fba2 0100 	umull	r0, r1, r2, r0
   80fbe:	ea4f 0051 	mov.w	r0, r1, lsr #1
   80fc2:	6018      	str	r0, [r3, #0]
   80fc4:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80fc6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80fca:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80fd0:	f240 0000 	movw	r0, #0
   80fd4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80fd8:	f3c2 1102 	ubfx	r1, r2, #4, #3
   80fdc:	6803      	ldr	r3, [r0, #0]
   80fde:	fa23 f301 	lsr.w	r3, r3, r1
   80fe2:	6003      	str	r3, [r0, #0]
   80fe4:	4770      	bx	lr
   80fe6:	bf00      	nop

00080fe8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   80fe8:	f64e 23bf 	movw	r3, #60095	; 0xeabf
   80fec:	f2c0 1321 	movt	r3, #289	; 0x121
   80ff0:	4298      	cmp	r0, r3
   80ff2:	d80c      	bhi.n	8100e <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   80ff4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   80ff8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80ffc:	f04f 0000 	mov.w	r0, #0
   81000:	6018      	str	r0, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   81002:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   81006:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8100a:	6008      	str	r0, [r1, #0]
   8100c:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   8100e:	f24f 017f 	movw	r1, #61567	; 0xf07f
   81012:	f2c0 21fa 	movt	r1, #762	; 0x2fa
   81016:	4288      	cmp	r0, r1
   81018:	d80c      	bhi.n	81034 <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   8101a:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   8101e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81022:	f44f 7180 	mov.w	r1, #256	; 0x100
   81026:	6001      	str	r1, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   81028:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   8102c:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81030:	6011      	str	r1, [r2, #0]
   81032:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   81034:	f648 73ff 	movw	r3, #36863	; 0x8fff
   81038:	f2c0 33d0 	movt	r3, #976	; 0x3d0
   8103c:	4298      	cmp	r0, r3
   8103e:	d80c      	bhi.n	8105a <system_init_flash+0x72>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   81040:	f44f 6120 	mov.w	r1, #2560	; 0xa00
   81044:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81048:	f44f 7200 	mov.w	r2, #512	; 0x200
   8104c:	600a      	str	r2, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   8104e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   81052:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81056:	601a      	str	r2, [r3, #0]
   81058:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   8105a:	f24b 31ff 	movw	r1, #46079	; 0xb3ff
   8105e:	f2c0 41c4 	movt	r1, #1220	; 0x4c4
   81062:	4288      	cmp	r0, r1
   81064:	d80c      	bhi.n	81080 <system_init_flash+0x98>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   81066:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   8106a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8106e:	f44f 7240 	mov.w	r2, #768	; 0x300
   81072:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   81074:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   81078:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8107c:	6002      	str	r2, [r0, #0]
   8107e:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   81080:	f644 237f 	movw	r3, #19071	; 0x4a7f
   81084:	f2c0 535d 	movt	r3, #1373	; 0x55d
   81088:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   8108a:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   8108e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81092:	bf94      	ite	ls
   81094:	f44f 6280 	movls.w	r2, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   81098:	f44f 62a0 	movhi.w	r2, #1280	; 0x500
   8109c:	6002      	str	r2, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   8109e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   810a2:	f2c4 010e 	movt	r1, #16398	; 0x400e
   810a6:	600a      	str	r2, [r1, #0]
   810a8:	4770      	bx	lr
   810aa:	bf00      	nop

000810ac <ADCSetup>:
	   adc_enable_channel(ADC, ADC_CHANNEL_7);

	   adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
   */
          // the a/d channels. Only includes the ones connected to A0-11
		  {
   810ac:	b570      	push	{r4, r5, r6, lr}
   810ae:	b08c      	sub	sp, #48	; 0x30
   810b0:	4606      	mov	r6, r0
          int ADC_Channels[] = {ADC_CHANNEL_7,ADC_CHANNEL_6,ADC_CHANNEL_5,ADC_CHANNEL_4,
   810b2:	466c      	mov	r4, sp
   810b4:	f241 25e0 	movw	r5, #4832	; 0x12e0
   810b8:	f2c0 0508 	movt	r5, #8
   810bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   810be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   810c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   810c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   810c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   810c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	          ADC_CHANNEL_3,ADC_CHANNEL_2,ADC_CHANNEL_1,ADC_CHANNEL_0,ADC_CHANNEL_10,
          ADC_CHANNEL_11,ADC_CHANNEL_12,ADC_CHANNEL_13};


          /* Enable the specified peripheral clock (ADC clock) */
          if (pmc_enable_periph_clk(ID_ADC) == 0) {
   810cc:	f04f 0025 	mov.w	r0, #37	; 0x25
   810d0:	f640 4361 	movw	r3, #3169	; 0xc61
   810d4:	f2c0 0308 	movt	r3, #8
   810d8:	4798      	blx	r3
   810da:	2800      	cmp	r0, #0
   810dc:	d13e      	bne.n	8115c <ADCSetup+0xb0>
	          adc_init(ADC, sysclk_get_main_hz(), 14000000, 8 );
   810de:	f04f 0400 	mov.w	r4, #0
   810e2:	f2c4 040c 	movt	r4, #16396	; 0x400c
   810e6:	4620      	mov	r0, r4
   810e8:	f44f 41f4 	mov.w	r1, #31232	; 0x7a00
   810ec:	f6c0 2103 	movt	r1, #2563	; 0xa03
   810f0:	f649 7280 	movw	r2, #40832	; 0x9f80
   810f4:	f2c0 02d5 	movt	r2, #213	; 0xd5
   810f8:	f04f 0308 	mov.w	r3, #8
   810fc:	f240 15a5 	movw	r5, #421	; 0x1a5
   81100:	f2c0 0508 	movt	r5, #8
   81104:	47a8      	blx	r5
	          adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1);
   81106:	4620      	mov	r0, r4
   81108:	f04f 0100 	mov.w	r1, #0
   8110c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   81110:	f04f 0301 	mov.w	r3, #1
   81114:	f240 2505 	movw	r5, #517	; 0x205
   81118:	f2c0 0508 	movt	r5, #8
   8111c:	47a8      	blx	r5
	          adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);
   8111e:	4620      	mov	r0, r4
   81120:	f04f 0100 	mov.w	r1, #0
   81124:	f240 12e5 	movw	r2, #485	; 0x1e5
   81128:	f2c0 0208 	movt	r2, #8
   8112c:	4790      	blx	r2
	          adc_enable_channel(ADC, ADC_Channels[DuePinNr]);
   8112e:	a80c      	add	r0, sp, #48	; 0x30
   81130:	eb00 0686 	add.w	r6, r0, r6, lsl #2
   81134:	4620      	mov	r0, r4
   81136:	f816 1c30 	ldrb.w	r1, [r6, #-48]
   8113a:	f240 232d 	movw	r3, #557	; 0x22d
   8113e:	f2c0 0308 	movt	r3, #8
   81142:	4798      	blx	r3
	          adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
   81144:	4620      	mov	r0, r4
   81146:	f04f 0100 	mov.w	r1, #0
   8114a:	460a      	mov	r2, r1
   8114c:	f240 13f5 	movw	r3, #501	; 0x1f5
   81150:	f2c0 0308 	movt	r3, #8
   81154:	4798      	blx	r3
	          return 1;
   81156:	f04f 0001 	mov.w	r0, #1
   8115a:	e001      	b.n	81160 <ADCSetup+0xb4>
          }
          return 0; // if the clock wasn't enabled for some reason
   8115c:	f04f 0000 	mov.w	r0, #0
   }
   81160:	b00c      	add	sp, #48	; 0x30
   81162:	bd70      	pop	{r4, r5, r6, pc}

00081164 <__register_exitproc>:
   81164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81168:	4698      	mov	r8, r3
   8116a:	4b23      	ldr	r3, [pc, #140]	; (811f8 <__register_exitproc+0x94>)
   8116c:	4606      	mov	r6, r0
   8116e:	681c      	ldr	r4, [r3, #0]
   81170:	460f      	mov	r7, r1
   81172:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   81176:	4691      	mov	r9, r2
   81178:	b918      	cbnz	r0, 81182 <__register_exitproc+0x1e>
   8117a:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   8117e:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   81182:	6841      	ldr	r1, [r0, #4]
   81184:	291f      	cmp	r1, #31
   81186:	dd16      	ble.n	811b6 <__register_exitproc+0x52>
   81188:	481c      	ldr	r0, [pc, #112]	; (811fc <__register_exitproc+0x98>)
   8118a:	b918      	cbnz	r0, 81194 <__register_exitproc+0x30>
   8118c:	f04f 30ff 	mov.w	r0, #4294967295
   81190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81194:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81198:	f3af 8000 	nop.w
   8119c:	2800      	cmp	r0, #0
   8119e:	d0f5      	beq.n	8118c <__register_exitproc+0x28>
   811a0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   811a4:	2500      	movs	r5, #0
   811a6:	6045      	str	r5, [r0, #4]
   811a8:	6002      	str	r2, [r0, #0]
   811aa:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   811ae:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   811b2:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   811b6:	b1b6      	cbz	r6, 811e6 <__register_exitproc+0x82>
   811b8:	6844      	ldr	r4, [r0, #4]
   811ba:	2201      	movs	r2, #1
   811bc:	fa02 f204 	lsl.w	r2, r2, r4
   811c0:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   811c4:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   811c8:	4311      	orrs	r1, r2
   811ca:	2e02      	cmp	r6, #2
   811cc:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
   811d0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   811d4:	461c      	mov	r4, r3
   811d6:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
   811da:	d104      	bne.n	811e6 <__register_exitproc+0x82>
   811dc:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   811e0:	431a      	orrs	r2, r3
   811e2:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   811e6:	6841      	ldr	r1, [r0, #4]
   811e8:	1c8b      	adds	r3, r1, #2
   811ea:	1c4a      	adds	r2, r1, #1
   811ec:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
   811f0:	6042      	str	r2, [r0, #4]
   811f2:	2000      	movs	r0, #0
   811f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   811f8:	00081310 	.word	0x00081310
   811fc:	00000000 	.word	0x00000000

00081200 <__libc_fini_array>:
   81200:	b570      	push	{r4, r5, r6, lr}
   81202:	4b08      	ldr	r3, [pc, #32]	; (81224 <__libc_fini_array+0x24>)
   81204:	4c08      	ldr	r4, [pc, #32]	; (81228 <__libc_fini_array+0x28>)
   81206:	2500      	movs	r5, #0
   81208:	1ae0      	subs	r0, r4, r3
   8120a:	1084      	asrs	r4, r0, #2
   8120c:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   81210:	3d04      	subs	r5, #4
   81212:	b11c      	cbz	r4, 8121c <__libc_fini_array+0x1c>
   81214:	5972      	ldr	r2, [r6, r5]
   81216:	4790      	blx	r2
   81218:	3c01      	subs	r4, #1
   8121a:	e7f9      	b.n	81210 <__libc_fini_array+0x10>
   8121c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   81220:	f000 b884 	b.w	8132c <_fini>
   81224:	00081338 	.word	0x00081338
   81228:	0008133c 	.word	0x0008133c

0008122c <__libc_init_array>:
   8122c:	b538      	push	{r3, r4, r5, lr}
   8122e:	4d0e      	ldr	r5, [pc, #56]	; (81268 <__libc_init_array+0x3c>)
   81230:	4b0e      	ldr	r3, [pc, #56]	; (8126c <__libc_init_array+0x40>)
   81232:	2400      	movs	r4, #0
   81234:	1ae8      	subs	r0, r5, r3
   81236:	1085      	asrs	r5, r0, #2
   81238:	42ac      	cmp	r4, r5
   8123a:	d005      	beq.n	81248 <__libc_init_array+0x1c>
   8123c:	490b      	ldr	r1, [pc, #44]	; (8126c <__libc_init_array+0x40>)
   8123e:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   81242:	4790      	blx	r2
   81244:	3401      	adds	r4, #1
   81246:	e7f7      	b.n	81238 <__libc_init_array+0xc>
   81248:	f000 f866 	bl	81318 <_init>
   8124c:	4908      	ldr	r1, [pc, #32]	; (81270 <__libc_init_array+0x44>)
   8124e:	4a09      	ldr	r2, [pc, #36]	; (81274 <__libc_init_array+0x48>)
   81250:	1a54      	subs	r4, r2, r1
   81252:	10a5      	asrs	r5, r4, #2
   81254:	2400      	movs	r4, #0
   81256:	42ac      	cmp	r4, r5
   81258:	d005      	beq.n	81266 <__libc_init_array+0x3a>
   8125a:	4b05      	ldr	r3, [pc, #20]	; (81270 <__libc_init_array+0x44>)
   8125c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   81260:	4780      	blx	r0
   81262:	3401      	adds	r4, #1
   81264:	e7f7      	b.n	81256 <__libc_init_array+0x2a>
   81266:	bd38      	pop	{r3, r4, r5, pc}
   81268:	00081324 	.word	0x00081324
   8126c:	00081324 	.word	0x00081324
   81270:	00081324 	.word	0x00081324
   81274:	0008132c 	.word	0x0008132c

00081278 <register_fini>:
   81278:	4b02      	ldr	r3, [pc, #8]	; (81284 <register_fini+0xc>)
   8127a:	b113      	cbz	r3, 81282 <register_fini+0xa>
   8127c:	4802      	ldr	r0, [pc, #8]	; (81288 <register_fini+0x10>)
   8127e:	f000 b805 	b.w	8128c <atexit>
   81282:	4770      	bx	lr
   81284:	00000000 	.word	0x00000000
   81288:	00081201 	.word	0x00081201

0008128c <atexit>:
   8128c:	4601      	mov	r1, r0
   8128e:	2000      	movs	r0, #0
   81290:	4602      	mov	r2, r0
   81292:	4603      	mov	r3, r0
   81294:	f7ff bf66 	b.w	81164 <__register_exitproc>
   81298:	0c040800 	.word	0x0c040800
   8129c:	0e060a02 	.word	0x0e060a02
   812a0:	0d050901 	.word	0x0d050901
   812a4:	0f070b03 	.word	0x0f070b03
   812a8:	4f525245 	.word	0x4f525245
   812ac:	00000052 	.word	0x00000052
   812b0:	00004b4f 	.word	0x00004b4f
   812b4:	68676972 	.word	0x68676972
   812b8:	00000074 	.word	0x00000074
   812bc:	00007075 	.word	0x00007075
   812c0:	6e776f64 	.word	0x6e776f64
   812c4:	00000000 	.word	0x00000000
   812c8:	7466656c 	.word	0x7466656c
   812cc:	00000000 	.word	0x00000000
   812d0:	656c6573 	.word	0x656c6573
   812d4:	00007463 	.word	0x00007463
   812d8:	656e6f6e 	.word	0x656e6f6e
   812dc:	00000000 	.word	0x00000000
   812e0:	00000007 	.word	0x00000007
   812e4:	00000006 	.word	0x00000006
   812e8:	00000005 	.word	0x00000005
   812ec:	00000004 	.word	0x00000004
   812f0:	00000003 	.word	0x00000003
   812f4:	00000002 	.word	0x00000002
   812f8:	00000001 	.word	0x00000001
   812fc:	00000000 	.word	0x00000000
   81300:	0000000a 	.word	0x0000000a
   81304:	0000000b 	.word	0x0000000b
   81308:	0000000c 	.word	0x0000000c
   8130c:	0000000d 	.word	0x0000000d

00081310 <_global_impure_ptr>:
   81310:	20070010 00000043                       ... C...

00081318 <_init>:
   81318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8131a:	bf00      	nop
   8131c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8131e:	bc08      	pop	{r3}
   81320:	469e      	mov	lr, r3
   81322:	4770      	bx	lr

00081324 <__init_array_start>:
   81324:	00081279 	.word	0x00081279

00081328 <__frame_dummy_init_array_entry>:
   81328:	0008016d                                m...

0008132c <_fini>:
   8132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8132e:	bf00      	nop
   81330:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81332:	bc08      	pop	{r3}
   81334:	469e      	mov	lr, r3
   81336:	4770      	bx	lr

00081338 <__fini_array_start>:
   81338:	00080145 	.word	0x00080145
