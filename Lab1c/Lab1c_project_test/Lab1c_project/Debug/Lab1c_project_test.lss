
Lab1c_project_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003aa8  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000850  20070000  00083aa8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000150  20070850  000842f8  00010850  2**2
                  ALLOC
  3 .stack        00002000  200709a0  00084448  00010850  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010850  2**0
                  CONTENTS, READONLY
  5 .comment      00000071  00000000  00000000  00010879  2**0
                  CONTENTS, READONLY
  6 .debug_info   00022920  00000000  00000000  000108ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005df6  00000000  00000000  0003320a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00008d24  00000000  00000000  00039000  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000010a8  00000000  00000000  00041d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c78  00000000  00000000  00042dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001880f  00000000  00000000  00043a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015639  00000000  00000000  0005c257  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000685c9  00000000  00000000  00071890  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000022bc  00000000  00000000  000d9e5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200729a0 	.word	0x200729a0
   80004:	00080d7d 	.word	0x00080d7d
   80008:	00080d79 	.word	0x00080d79
   8000c:	00080d79 	.word	0x00080d79
   80010:	00080d79 	.word	0x00080d79
   80014:	00080d79 	.word	0x00080d79
   80018:	00080d79 	.word	0x00080d79
	...
   8002c:	00080d79 	.word	0x00080d79
   80030:	00080d79 	.word	0x00080d79
   80034:	00000000 	.word	0x00000000
   80038:	00080d79 	.word	0x00080d79
   8003c:	00080d79 	.word	0x00080d79
   80040:	00080d79 	.word	0x00080d79
   80044:	00080d79 	.word	0x00080d79
   80048:	00080d79 	.word	0x00080d79
   8004c:	00080d79 	.word	0x00080d79
   80050:	00080d79 	.word	0x00080d79
   80054:	00080d79 	.word	0x00080d79
   80058:	00080d79 	.word	0x00080d79
   8005c:	00080d79 	.word	0x00080d79
   80060:	00080d79 	.word	0x00080d79
   80064:	00080d79 	.word	0x00080d79
   80068:	00000000 	.word	0x00000000
   8006c:	00080a91 	.word	0x00080a91
   80070:	00080aad 	.word	0x00080aad
   80074:	00080ac9 	.word	0x00080ac9
   80078:	00080ae5 	.word	0x00080ae5
	...
   80084:	00080d79 	.word	0x00080d79
   80088:	00080d79 	.word	0x00080d79
   8008c:	00080d79 	.word	0x00080d79
   80090:	00080d79 	.word	0x00080d79
   80094:	00080d79 	.word	0x00080d79
   80098:	00080d79 	.word	0x00080d79
   8009c:	00080d79 	.word	0x00080d79
   800a0:	00080d79 	.word	0x00080d79
   800a4:	00000000 	.word	0x00000000
   800a8:	00080d79 	.word	0x00080d79
   800ac:	00080d79 	.word	0x00080d79
   800b0:	00080d79 	.word	0x00080d79
   800b4:	00080d79 	.word	0x00080d79
   800b8:	00080d79 	.word	0x00080d79
   800bc:	00080d79 	.word	0x00080d79
   800c0:	00080d79 	.word	0x00080d79
   800c4:	00080d79 	.word	0x00080d79
   800c8:	00080d79 	.word	0x00080d79
   800cc:	00080d79 	.word	0x00080d79
   800d0:	00080d79 	.word	0x00080d79
   800d4:	00080d79 	.word	0x00080d79
   800d8:	00080d79 	.word	0x00080d79
   800dc:	00080d79 	.word	0x00080d79
   800e0:	00080d79 	.word	0x00080d79
   800e4:	00080d79 	.word	0x00080d79
   800e8:	00080d79 	.word	0x00080d79
   800ec:	00080d79 	.word	0x00080d79
   800f0:	00080d79 	.word	0x00080d79

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a19      	subs	r1, r3, r0
   800fc:	2906      	cmp	r1, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4a04      	ldr	r2, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2a00      	cmp	r2, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4790      	blx	r2
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	00083aa8 	.word	0x00083aa8
   80110:	00083aab 	.word	0x00083aab
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a19      	subs	r1, r3, r0
   80120:	108a      	asrs	r2, r1, #2
   80122:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	00083aa8 	.word	0x00083aa8
   8013c:	00083aa8 	.word	0x00083aa8
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4804      	ldr	r0, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b110      	cbz	r0, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2101      	movs	r1, #1
   8015c:	7021      	strb	r1, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	20070850 	.word	0x20070850
   80164:	00000000 	.word	0x00000000
   80168:	00083aa8 	.word	0x00083aa8

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6801      	ldr	r1, [r0, #0]
   8017e:	b111      	cbz	r1, 80186 <frame_dummy+0x1a>
   80180:	4a07      	ldr	r2, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b102      	cbz	r2, 80186 <frame_dummy+0x1a>
   80184:	4790      	blx	r2
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	00083aa8 	.word	0x00083aa8
   80198:	20070854 	.word	0x20070854
   8019c:	00083aa8 	.word	0x00083aa8
   801a0:	00000000 	.word	0x00000000

000801a4 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   801a4:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   801a6:	f04f 0401 	mov.w	r4, #1
   801aa:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   801ac:	f04f 0400 	mov.w	r4, #0
   801b0:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   801b2:	f240 2502 	movw	r5, #514	; 0x202
   801b6:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   801ba:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   801be:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   801c2:	6845      	ldr	r5, [r0, #4]
   801c4:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   801c6:	ea4f 0242 	mov.w	r2, r2, lsl #1
   801ca:	fbb1 f1f2 	udiv	r1, r1, r2
   801ce:	f101 32ff 	add.w	r2, r1, #4294967295
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   801d2:	ea4f 6102 	mov.w	r1, r2, lsl #24
   801d6:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
   801da:	6043      	str	r3, [r0, #4]
	return 0;
}
   801dc:	4620      	mov	r0, r4
   801de:	bc30      	pop	{r4, r5}
   801e0:	4770      	bx	lr
   801e2:	bf00      	nop

000801e4 <adc_set_resolution>:
 * \param resolution ADC resolution.
 *
 */
void adc_set_resolution(Adc *p_adc,const enum adc_resolution_t resolution)
{
	p_adc->ADC_MR |= (resolution << 4) & ADC_MR_LOWRES;
   801e4:	6843      	ldr	r3, [r0, #4]
   801e6:	ea4f 1101 	mov.w	r1, r1, lsl #4
   801ea:	f001 0210 	and.w	r2, r1, #16
   801ee:	4313      	orrs	r3, r2
   801f0:	6043      	str	r3, [r0, #4]
   801f2:	4770      	bx	lr

000801f4 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   801f4:	6843      	ldr	r3, [r0, #4]
   801f6:	4319      	orrs	r1, r3
   801f8:	ea4f 12c2 	mov.w	r2, r2, lsl #7
   801fc:	b2d3      	uxtb	r3, r2
   801fe:	4319      	orrs	r1, r3
   80200:	6041      	str	r1, [r0, #4]
   80202:	4770      	bx	lr

00080204 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   80204:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80206:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   80208:	4322      	orrs	r2, r4
   8020a:	ea4f 6101 	mov.w	r1, r1, lsl #24
   8020e:	f001 6470 	and.w	r4, r1, #251658240	; 0xf000000
   80212:	4322      	orrs	r2, r4
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80214:	ea4f 7303 	mov.w	r3, r3, lsl #28
   80218:	f003 5140 	and.w	r1, r3, #805306368	; 0x30000000
   8021c:	430a      	orrs	r2, r1
   8021e:	6042      	str	r2, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   80220:	bc10      	pop	{r4}
   80222:	4770      	bx	lr

00080224 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   80224:	f04f 0302 	mov.w	r3, #2
   80228:	6003      	str	r3, [r0, #0]
   8022a:	4770      	bx	lr

0008022c <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   8022c:	f04f 0301 	mov.w	r3, #1
   80230:	fa03 f101 	lsl.w	r1, r3, r1
   80234:	6101      	str	r1, [r0, #16]
   80236:	4770      	bx	lr

00080238 <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
   80238:	6a00      	ldr	r0, [r0, #32]
}
   8023a:	4770      	bx	lr

0008023c <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
   8023c:	b410      	push	{r4}
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8023e:	ea4f 1181 	mov.w	r1, r1, lsl #6
   80242:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   80244:	f04f 0402 	mov.w	r4, #2
   80248:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   8024a:	f04f 30ff 	mov.w	r0, #4294967295
   8024e:	6298      	str	r0, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80250:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   80252:	605a      	str	r2, [r3, #4]
}
   80254:	bc10      	pop	{r4}
   80256:	4770      	bx	lr

00080258 <tc_set_block_mode>:
 * \param ul_blockmode Block mode register value to set.
 *
 */
void tc_set_block_mode(Tc *p_tc, uint32_t ul_blockmode)
{
	p_tc->TC_BMR = ul_blockmode;
   80258:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   8025c:	4770      	bx	lr
   8025e:	bf00      	nop

00080260 <tc_start>:
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   80260:	ea4f 1181 	mov.w	r1, r1, lsl #6
   80264:	f04f 0305 	mov.w	r3, #5
   80268:	5043      	str	r3, [r0, r1]
   8026a:	4770      	bx	lr

0008026c <tc_stop>:
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   8026c:	ea4f 1181 	mov.w	r1, r1, lsl #6
   80270:	f04f 0302 	mov.w	r3, #2
   80274:	5043      	str	r3, [r0, r1]
   80276:	4770      	bx	lr

00080278 <tc_read_cv>:
uint32_t tc_read_cv(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
   80278:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   8027c:	6908      	ldr	r0, [r1, #16]
}
   8027e:	4770      	bx	lr

00080280 <Delay>:
	tc_stop(TC0,0);		/* Making sure the timer is not running */
}

void Delay(uint32_t us)
/* A Delay of us microseconds */
{
   80280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80282:	4604      	mov	r4, r0
	tc_start(TC0,0);
   80284:	f04f 0000 	mov.w	r0, #0
   80288:	f2c4 0008 	movt	r0, #16392	; 0x4008
   8028c:	f04f 0100 	mov.w	r1, #0
   80290:	f240 2361 	movw	r3, #609	; 0x261
   80294:	f2c0 0308 	movt	r3, #8
   80298:	4798      	blx	r3
	while (tc_read_cv(TC0,0) < us*42);	/* TIMER_CLOCK1 runs on MCK/2 */
   8029a:	f04f 072a 	mov.w	r7, #42	; 0x2a
   8029e:	fb07 f704 	mul.w	r7, r7, r4
   802a2:	f04f 0400 	mov.w	r4, #0
   802a6:	f2c4 0408 	movt	r4, #16392	; 0x4008
   802aa:	f04f 0600 	mov.w	r6, #0
   802ae:	f240 2579 	movw	r5, #633	; 0x279
   802b2:	f2c0 0508 	movt	r5, #8
   802b6:	4620      	mov	r0, r4
   802b8:	4631      	mov	r1, r6
   802ba:	47a8      	blx	r5
   802bc:	42b8      	cmp	r0, r7
   802be:	d3fa      	bcc.n	802b6 <Delay+0x36>
	tc_stop(TC0,0);
   802c0:	f04f 0000 	mov.w	r0, #0
   802c4:	f2c4 0008 	movt	r0, #16392	; 0x4008
   802c8:	f04f 0100 	mov.w	r1, #0
   802cc:	f240 226d 	movw	r2, #621	; 0x26d
   802d0:	f2c0 0208 	movt	r2, #8
   802d4:	4790      	blx	r2
   802d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000802d8 <delay_init>:
#include <string.h>
#include "asf.h"
#include "LCDShield.h"

void delay_init(void)		/* Initializes the timer used for delays */
{
   802d8:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC0);
   802da:	f04f 001b 	mov.w	r0, #27
   802de:	f640 4341 	movw	r3, #3137	; 0xc41
   802e2:	f2c0 0308 	movt	r3, #8
   802e6:	4798      	blx	r3
	tc_init(TC0,0,0);		 /* TC0, channel 0, TCLK1 och capturemode */
   802e8:	f04f 0400 	mov.w	r4, #0
   802ec:	f2c4 0408 	movt	r4, #16392	; 0x4008
   802f0:	4620      	mov	r0, r4
   802f2:	f04f 0100 	mov.w	r1, #0
   802f6:	460a      	mov	r2, r1
   802f8:	f240 233d 	movw	r3, #573	; 0x23d
   802fc:	f2c0 0308 	movt	r3, #8
   80300:	4798      	blx	r3
	tc_set_block_mode(TC0,0);
   80302:	4620      	mov	r0, r4
   80304:	f04f 0100 	mov.w	r1, #0
   80308:	f240 2259 	movw	r2, #601	; 0x259
   8030c:	f2c0 0208 	movt	r2, #8
   80310:	4790      	blx	r2
	tc_stop(TC0,0);			/* making sure the timer does not run  */
   80312:	4620      	mov	r0, r4
   80314:	f04f 0100 	mov.w	r1, #0
   80318:	f240 236d 	movw	r3, #621	; 0x26d
   8031c:	f2c0 0308 	movt	r3, #8
   80320:	4798      	blx	r3
   80322:	bd10      	pop	{r4, pc}

00080324 <delay>:
}


void delay(uint32_t us)		/* A simple implementation for a delay in us (not calibrated) */
{
   80324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80326:	4604      	mov	r4, r0
	tc_start(TC0,0);
   80328:	f04f 0000 	mov.w	r0, #0
   8032c:	f2c4 0008 	movt	r0, #16392	; 0x4008
   80330:	f04f 0100 	mov.w	r1, #0
   80334:	f240 2361 	movw	r3, #609	; 0x261
   80338:	f2c0 0308 	movt	r3, #8
   8033c:	4798      	blx	r3
	while (tc_read_cv(TC0,0) < us*42);
   8033e:	f04f 072a 	mov.w	r7, #42	; 0x2a
   80342:	fb07 f704 	mul.w	r7, r7, r4
   80346:	f04f 0400 	mov.w	r4, #0
   8034a:	f2c4 0408 	movt	r4, #16392	; 0x4008
   8034e:	f04f 0600 	mov.w	r6, #0
   80352:	f240 2579 	movw	r5, #633	; 0x279
   80356:	f2c0 0508 	movt	r5, #8
   8035a:	4620      	mov	r0, r4
   8035c:	4631      	mov	r1, r6
   8035e:	47a8      	blx	r5
   80360:	42b8      	cmp	r0, r7
   80362:	d3fa      	bcc.n	8035a <delay+0x36>
	tc_stop(TC0,0);
   80364:	f04f 0000 	mov.w	r0, #0
   80368:	f2c4 0008 	movt	r0, #16392	; 0x4008
   8036c:	f04f 0100 	mov.w	r1, #0
   80370:	f240 226d 	movw	r2, #621	; 0x26d
   80374:	f2c0 0208 	movt	r2, #8
   80378:	4790      	blx	r2
   8037a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0008037c <LCDwrite>:
*	type = 0 controls the display
*	type = 1 writes the content of the byte (usually interpreted as ASCII-code) to the display
*
*	LCDwrite returns the actual pinout value on PIOC 26-23, which is the reverse order compared to the Due pin order of D4-D7
*/
{
   8037c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80380:	b084      	sub	sp, #16
   80382:	4607      	mov	r7, r0
   80384:	460d      	mov	r5, r1
	/* In it's infinite wisdom the shield has the data pins in mirrored order compared to the Due board */
	uint8_t mirror_pin[16]={0b0000,0b1000,0b0100,0b1100,0b0010,0b1010,0b0110,0b1110,0b0001,0b1001,0b0101,0b1101,0b0011,0b1011,0b0111,0b1111};
   80386:	f643 0354 	movw	r3, #14420	; 0x3854
   8038a:	f2c0 0308 	movt	r3, #8
   8038e:	466c      	mov	r4, sp
   80390:	6818      	ldr	r0, [r3, #0]
   80392:	6859      	ldr	r1, [r3, #4]
   80394:	689a      	ldr	r2, [r3, #8]
   80396:	68db      	ldr	r3, [r3, #12]
   80398:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	byte_orig = byte;

	/* write the first 4 bits to the shield. */
	byte = byte>>4;
	byte = mirror_pin[byte];
   8039a:	eb04 1017 	add.w	r0, r4, r7, lsr #4
   8039e:	f810 1c10 	ldrb.w	r1, [r0, #-16]
	byte32 = (uint32_t)byte << 23;
   803a2:	ea4f 56c1 	mov.w	r6, r1, lsl #23
	mirrored_output = byte<<4;
   803a6:	ea4f 1301 	mov.w	r3, r1, lsl #4
   803aa:	fa5f f883 	uxtb.w	r8, r3
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
   803ae:	b13d      	cbz	r5, 803c0 <LCDwrite+0x44>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   803b0:	f44f 5290 	mov.w	r2, #4608	; 0x1200
   803b4:	f2c4 020e 	movt	r2, #16398	; 0x400e
   803b8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   803bc:	6310      	str	r0, [r2, #48]	; 0x30
   803be:	e006      	b.n	803ce <LCDwrite+0x52>
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   803c0:	f44f 5590 	mov.w	r5, #4608	; 0x1200
   803c4:	f2c4 050e 	movt	r5, #16398	; 0x400e
   803c8:	f44f 0480 	mov.w	r4, #4194304	; 0x400000
   803cc:	636c      	str	r4, [r5, #52]	; 0x34
__always_inline static void arch_ioport_set_port_level(ioport_port_t port,
		ioport_port_mask_t mask, ioport_port_mask_t level)
{
	Pio *base = arch_ioport_port_to_base(port);

	base->PIO_SODR = mask & level;
   803ce:	f006 61f0 	and.w	r1, r6, #125829120	; 0x7800000
   803d2:	f44f 5490 	mov.w	r4, #4608	; 0x1200
   803d6:	f2c4 040e 	movt	r4, #16398	; 0x400e
   803da:	6321      	str	r1, [r4, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
   803dc:	ea6f 0606 	mvn.w	r6, r6
   803e0:	f006 63f0 	and.w	r3, r6, #125829120	; 0x7800000
   803e4:	6363      	str	r3, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   803e6:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
   803ea:	6326      	str	r6, [r4, #48]	; 0x30
	
	ioport_set_pin_level(LCD_RS, type);
	ioport_set_port_level(IOPORT_PIOC, LCD_mask_D4_D7, byte32);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delay(1);
   803ec:	f04f 0001 	mov.w	r0, #1
   803f0:	f240 3525 	movw	r5, #805	; 0x325
   803f4:	f2c0 0508 	movt	r5, #8
   803f8:	47a8      	blx	r5
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   803fa:	6366      	str	r6, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	
	delay(100);
   803fc:	f04f 0064 	mov.w	r0, #100	; 0x64
   80400:	47a8      	blx	r5
	
	/* write the second 4 bits to the shield. */
	byte = byte_orig;
	byte = byte & 0x0f;
	byte = mirror_pin[byte];
   80402:	f007 070f 	and.w	r7, r7, #15
   80406:	aa04      	add	r2, sp, #16
   80408:	19d0      	adds	r0, r2, r7
   8040a:	f810 1c10 	ldrb.w	r1, [r0, #-16]
	byte32 = (uint32_t)byte<<23;
   8040e:	ea4f 53c1 	mov.w	r3, r1, lsl #23
	mirrored_output = mirrored_output + byte;
   80412:	eb08 0701 	add.w	r7, r8, r1
   80416:	b2ff      	uxtb	r7, r7
__always_inline static void arch_ioport_set_port_level(ioport_port_t port,
		ioport_port_mask_t mask, ioport_port_mask_t level)
{
	Pio *base = arch_ioport_port_to_base(port);

	base->PIO_SODR = mask & level;
   80418:	f003 62f0 	and.w	r2, r3, #125829120	; 0x7800000
   8041c:	6322      	str	r2, [r4, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
   8041e:	ea6f 0003 	mvn.w	r0, r3
   80422:	f000 61f0 	and.w	r1, r0, #125829120	; 0x7800000
   80426:	6361      	str	r1, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80428:	6326      	str	r6, [r4, #48]	; 0x30

	ioport_set_port_level(IOPORT_PIOC, LCD_mask_D4_D7, byte32);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delay(1);
   8042a:	f04f 0001 	mov.w	r0, #1
   8042e:	47a8      	blx	r5
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80430:	6366      	str	r6, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	delay(100);
   80432:	f04f 0064 	mov.w	r0, #100	; 0x64
   80436:	47a8      	blx	r5
	
	return mirrored_output;
}
   80438:	4638      	mov	r0, r7
   8043a:	b004      	add	sp, #16
   8043c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00080440 <LCDInit>:
	tc_stop(TC0,0);
}


int LCDInit(void)		/* Initializes the display on the LCD shield, returns 1 if everything is ok */
{
   80440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80444:	f44f 5490 	mov.w	r4, #4608	; 0x1200
   80448:	f2c4 040e 	movt	r4, #16398	; 0x400e
   8044c:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
   80450:	6127      	str	r7, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80452:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80456:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
   8045a:	6125      	str	r5, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8045c:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, enum ioport_direction group_direction)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (group_direction == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = mask;
   80460:	f04f 63f0 	mov.w	r3, #125829120	; 0x7800000
   80464:	6123      	str	r3, [r4, #16]
	} else if (group_direction == IOPORT_DIR_INPUT) {
		base->PIO_ODR = mask;
	}

	base->PIO_OWER = mask;
   80466:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8046a:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_dir(LCD_Enable, IOPORT_DIR_OUTPUT);
	ioport_set_port_dir(IOPORT_PIOC, LCD_mask_D4_D7, IOPORT_DIR_OUTPUT);
	
	ioport_set_pin_level(LCD_Enable, LOW);
	
	delay(30000);		/* wait > 15 ms */
   8046c:	f247 5030 	movw	r0, #30000	; 0x7530
   80470:	f240 3625 	movw	r6, #805	; 0x325
   80474:	f2c0 0608 	movt	r6, #8
   80478:	47b0      	blx	r6
   8047a:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8047c:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
   80480:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   80484:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
   80488:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8048c:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
   80490:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   80494:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
   80498:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8049a:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, HIGH);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delay(1);		/* delay 1 us */
   8049c:	f04f 0001 	mov.w	r0, #1
   804a0:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   804a2:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	
	delay(4100);	/* wait for more than 4,1 ms */
   804a4:	f241 0004 	movw	r0, #4100	; 0x1004
   804a8:	47b0      	blx	r6
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   804aa:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   804ae:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   804b2:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   804b6:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   804b8:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, HIGH);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delay(1);		/* delay 1 us */
   804ba:	f04f 0001 	mov.w	r0, #1
   804be:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   804c0:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);

	delay(100);	/* wait 100 us */
   804c2:	f04f 0064 	mov.w	r0, #100	; 0x64
   804c6:	47b0      	blx	r6
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   804c8:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   804cc:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   804d0:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   804d4:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   804d6:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, HIGH);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delay(1);		/* delay 1 us */
   804d8:	f04f 0001 	mov.w	r0, #1
   804dc:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   804de:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	
	delay(100);	/* wait 100 us */
   804e0:	f04f 0064 	mov.w	r0, #100	; 0x64
   804e4:	47b0      	blx	r6
   804e6:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   804ea:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   804ee:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   804f2:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   804f4:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, LOW);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delay(1);
   804f6:	f04f 0001 	mov.w	r0, #1
   804fa:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   804fc:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	
	delay(100);
   804fe:	f04f 0064 	mov.w	r0, #100	; 0x64
   80502:	47b0      	blx	r6

	LCDwrite(0b00101000, LOW);		/* Two rows, small font */
   80504:	f04f 0028 	mov.w	r0, #40	; 0x28
   80508:	f04f 0100 	mov.w	r1, #0
   8050c:	f240 347d 	movw	r4, #893	; 0x37d
   80510:	f2c0 0408 	movt	r4, #8
   80514:	47a0      	blx	r4
	LCDwrite(0b00001000, LOW);		/* Display off */
   80516:	f04f 0008 	mov.w	r0, #8
   8051a:	f04f 0100 	mov.w	r1, #0
   8051e:	47a0      	blx	r4
	LCDwrite(0b00000001, LOW);		/* Display clear */
   80520:	f04f 0001 	mov.w	r0, #1
   80524:	f04f 0100 	mov.w	r1, #0
   80528:	47a0      	blx	r4
	
	delay(3000);
   8052a:	f640 30b8 	movw	r0, #3000	; 0xbb8
   8052e:	47b0      	blx	r6
	
	LCDwrite(0b00000110, LOW);		/* Entry mode set: move cursor right, no display shift */
   80530:	f04f 0006 	mov.w	r0, #6
   80534:	f04f 0100 	mov.w	r1, #0
   80538:	47a0      	blx	r4
	LCDwrite(0b00001111 ,LOW);		/* Display on, cursor on, blinking on */
   8053a:	f04f 000f 	mov.w	r0, #15
   8053e:	f04f 0100 	mov.w	r1, #0
   80542:	47a0      	blx	r4

	all_ok = 1;					/* simple return statement showing that the initialization of the LCD has completed */
	return all_ok;
}
   80544:	f04f 0001 	mov.w	r0, #1
   80548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0008054c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8054c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8054e:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   80552:	f2c0 5001 	movt	r0, #1281	; 0x501
   80556:	f241 037d 	movw	r3, #4221	; 0x107d
   8055a:	f2c0 0308 	movt	r3, #8
   8055e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80560:	f04f 0000 	mov.w	r0, #0
   80564:	f04f 013e 	mov.w	r1, #62	; 0x3e
   80568:	f640 32a1 	movw	r2, #2977	; 0xba1
   8056c:	f2c0 0208 	movt	r2, #8
   80570:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80572:	f640 4411 	movw	r4, #3089	; 0xc11
   80576:	f2c0 0408 	movt	r4, #8
   8057a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8057c:	2800      	cmp	r0, #0
   8057e:	d0fc      	beq.n	8057a <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80580:	f640 4021 	movw	r0, #3105	; 0xc21
   80584:	f2c0 0008 	movt	r0, #8
   80588:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8058a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   8058e:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80592:	f643 7301 	movw	r3, #16129	; 0x3f01
   80596:	f2c2 030d 	movt	r3, #8205	; 0x200d
   8059a:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8059c:	f640 4431 	movw	r4, #3121	; 0xc31
   805a0:	f2c0 0408 	movt	r4, #8
   805a4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   805a6:	2800      	cmp	r0, #0
   805a8:	d0fc      	beq.n	805a4 <sysclk_init+0x58>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   805aa:	f04f 0010 	mov.w	r0, #16
   805ae:	f640 3201 	movw	r2, #2817	; 0xb01
   805b2:	f2c0 0208 	movt	r2, #8
   805b6:	4790      	blx	r2
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   805b8:	f640 60b5 	movw	r0, #3765	; 0xeb5
   805bc:	f2c0 0008 	movt	r0, #8
   805c0:	4780      	blx	r0
   805c2:	bd10      	pop	{r4, pc}

000805c4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   805c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   805c8:	460c      	mov	r4, r1
   805ca:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   805cc:	bb48      	cbnz	r0, 80622 <_read+0x5e>
		return -1;
	}

	for (; len > 0; --len) {
   805ce:	2a00      	cmp	r2, #0
   805d0:	dd2b      	ble.n	8062a <_read+0x66>

int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
   805d2:	188f      	adds	r7, r1, r2
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   805d4:	f640 1698 	movw	r6, #2456	; 0x998
   805d8:	f2c2 0607 	movt	r6, #8199	; 0x2007
   805dc:	f640 1590 	movw	r5, #2448	; 0x990
   805e0:	f2c2 0507 	movt	r5, #8199	; 0x2007
   805e4:	ea6f 0901 	mvn.w	r9, r1
   805e8:	eb07 0009 	add.w	r0, r7, r9
   805ec:	f000 0901 	and.w	r9, r0, #1
   805f0:	6830      	ldr	r0, [r6, #0]
   805f2:	682b      	ldr	r3, [r5, #0]
   805f4:	4798      	blx	r3
		ptr++;
   805f6:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   805fa:	42bc      	cmp	r4, r7
   805fc:	d119      	bne.n	80632 <_read+0x6e>
   805fe:	e00d      	b.n	8061c <_read+0x58>
		ptr_get(stdio_base, ptr);
   80600:	6830      	ldr	r0, [r6, #0]
   80602:	682b      	ldr	r3, [r5, #0]
   80604:	4621      	mov	r1, r4
   80606:	4798      	blx	r3
		ptr++;
   80608:	f104 0401 	add.w	r4, r4, #1
   8060c:	4621      	mov	r1, r4
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   8060e:	6830      	ldr	r0, [r6, #0]
   80610:	682a      	ldr	r2, [r5, #0]
   80612:	4790      	blx	r2
		ptr++;
   80614:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80618:	42bc      	cmp	r4, r7
   8061a:	d1f1      	bne.n	80600 <_read+0x3c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8061c:	4640      	mov	r0, r8
   8061e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80622:	f04f 30ff 	mov.w	r0, #4294967295
   80626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	for (; len > 0; --len) {
   8062a:	f04f 0000 	mov.w	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   8062e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80632:	f1b9 0f00 	cmp.w	r9, #0
   80636:	d0e3      	beq.n	80600 <_read+0x3c>
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   80638:	6830      	ldr	r0, [r6, #0]
   8063a:	682a      	ldr	r2, [r5, #0]
   8063c:	4621      	mov	r1, r4
   8063e:	4790      	blx	r2
		ptr++;
   80640:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80644:	42bc      	cmp	r4, r7
   80646:	d1db      	bne.n	80600 <_read+0x3c>
   80648:	e7e8      	b.n	8061c <_read+0x58>
   8064a:	bf00      	nop

0008064c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   8064c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80650:	460d      	mov	r5, r1
   80652:	4690      	mov	r8, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80654:	f100 30ff 	add.w	r0, r0, #4294967295
   80658:	2802      	cmp	r0, #2
   8065a:	d824      	bhi.n	806a6 <_write+0x5a>
		return -1;
	}

	for (; len != 0; --len) {
   8065c:	b332      	cbz	r2, 806ac <_write+0x60>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8065e:	f640 1698 	movw	r6, #2456	; 0x998
   80662:	f2c2 0607 	movt	r6, #8199	; 0x2007
   80666:	f640 1794 	movw	r7, #2452	; 0x994
   8066a:	f2c2 0707 	movt	r7, #8199	; 0x2007
   8066e:	f04f 0400 	mov.w	r4, #0
   80672:	f102 39ff 	add.w	r9, r2, #4294967295
   80676:	f009 0901 	and.w	r9, r9, #1
   8067a:	6830      	ldr	r0, [r6, #0]
   8067c:	683b      	ldr	r3, [r7, #0]
   8067e:	5d09      	ldrb	r1, [r1, r4]
   80680:	4798      	blx	r3
   80682:	42a0      	cmp	r0, r4
   80684:	da1a      	bge.n	806bc <_write+0x70>
   80686:	e014      	b.n	806b2 <_write+0x66>
   80688:	6830      	ldr	r0, [r6, #0]
   8068a:	683b      	ldr	r3, [r7, #0]
   8068c:	5d29      	ldrb	r1, [r5, r4]
   8068e:	4798      	blx	r3
   80690:	2800      	cmp	r0, #0
   80692:	db0e      	blt.n	806b2 <_write+0x66>
			return -1;
		}
		++nChars;
   80694:	f104 0401 	add.w	r4, r4, #1
	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80698:	6830      	ldr	r0, [r6, #0]
   8069a:	683a      	ldr	r2, [r7, #0]
   8069c:	5d29      	ldrb	r1, [r5, r4]
   8069e:	4790      	blx	r2
   806a0:	2800      	cmp	r0, #0
   806a2:	da1d      	bge.n	806e0 <_write+0x94>
   806a4:	e005      	b.n	806b2 <_write+0x66>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   806a6:	f04f 34ff 	mov.w	r4, #4294967295
   806aa:	e004      	b.n	806b6 <_write+0x6a>
	}

	for (; len != 0; --len) {
   806ac:	f04f 0400 	mov.w	r4, #0
   806b0:	e001      	b.n	806b6 <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   806b2:	f04f 34ff 	mov.w	r4, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   806b6:	4620      	mov	r0, r4
   806b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   806bc:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   806c0:	45a0      	cmp	r8, r4
   806c2:	d0f8      	beq.n	806b6 <_write+0x6a>
   806c4:	f1b9 0f00 	cmp.w	r9, #0
   806c8:	d0de      	beq.n	80688 <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   806ca:	6830      	ldr	r0, [r6, #0]
   806cc:	683a      	ldr	r2, [r7, #0]
   806ce:	5d29      	ldrb	r1, [r5, r4]
   806d0:	4790      	blx	r2
   806d2:	2800      	cmp	r0, #0
   806d4:	dbed      	blt.n	806b2 <_write+0x66>
			return -1;
		}
		++nChars;
   806d6:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   806da:	45a0      	cmp	r8, r4
   806dc:	d1d4      	bne.n	80688 <_write+0x3c>
   806de:	e7ea      	b.n	806b6 <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   806e0:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   806e4:	45a0      	cmp	r8, r4
   806e6:	d1cf      	bne.n	80688 <_write+0x3c>
   806e8:	e7e5      	b.n	806b6 <_write+0x6a>
   806ea:	bf00      	nop

000806ec <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   806ec:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   806ee:	f641 2350 	movw	r3, #6736	; 0x1a50
   806f2:	f2c4 030e 	movt	r3, #16398	; 0x400e
   806f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   806fa:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   806fc:	f04f 000b 	mov.w	r0, #11
   80700:	f640 4441 	movw	r4, #3137	; 0xc41
   80704:	f2c0 0408 	movt	r4, #8
   80708:	47a0      	blx	r4
   8070a:	f04f 000c 	mov.w	r0, #12
   8070e:	47a0      	blx	r4
   80710:	f04f 000d 	mov.w	r0, #13
   80714:	47a0      	blx	r4
   80716:	f04f 000e 	mov.w	r0, #14
   8071a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8071c:	f04f 003b 	mov.w	r0, #59	; 0x3b
   80720:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80724:	f640 0475 	movw	r4, #2165	; 0x875
   80728:	f2c0 0408 	movt	r4, #8
   8072c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8072e:	f04f 0055 	mov.w	r0, #85	; 0x55
   80732:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80736:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80738:	f04f 0056 	mov.w	r0, #86	; 0x56
   8073c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80740:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80742:	f04f 0068 	mov.w	r0, #104	; 0x68
   80746:	f04f 0179 	mov.w	r1, #121	; 0x79
   8074a:	f6c2 0100 	movt	r1, #10240	; 0x2800
   8074e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80750:	f04f 005c 	mov.w	r0, #92	; 0x5c
   80754:	f04f 0101 	mov.w	r1, #1
   80758:	f6c2 0100 	movt	r1, #10240	; 0x2800
   8075c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8075e:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   80762:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80766:	f44f 7140 	mov.w	r1, #768	; 0x300
   8076a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8076e:	f640 1375 	movw	r3, #2421	; 0x975
   80772:	f2c0 0308 	movt	r3, #8
   80776:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80778:	f04f 002b 	mov.w	r0, #43	; 0x2b
   8077c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80780:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80782:	f04f 002a 	mov.w	r0, #42	; 0x2a
   80786:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8078a:	47a0      	blx	r4
   8078c:	bd10      	pop	{r4, pc}
   8078e:	bf00      	nop

00080790 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80790:	b10a      	cbz	r2, 80796 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   80792:	6641      	str	r1, [r0, #100]	; 0x64
   80794:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80796:	6601      	str	r1, [r0, #96]	; 0x60
   80798:	4770      	bx	lr
   8079a:	bf00      	nop

0008079c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8079c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8079e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   807a2:	d016      	beq.n	807d2 <pio_set_peripheral+0x36>
   807a4:	d804      	bhi.n	807b0 <pio_set_peripheral+0x14>
   807a6:	b1c9      	cbz	r1, 807dc <pio_set_peripheral+0x40>
   807a8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   807ac:	d115      	bne.n	807da <pio_set_peripheral+0x3e>
   807ae:	e009      	b.n	807c4 <pio_set_peripheral+0x28>
   807b0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   807b4:	d012      	beq.n	807dc <pio_set_peripheral+0x40>
   807b6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   807ba:	d00f      	beq.n	807dc <pio_set_peripheral+0x40>
   807bc:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   807c0:	d10b      	bne.n	807da <pio_set_peripheral+0x3e>
   807c2:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   807c4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   807c6:	6f01      	ldr	r1, [r0, #112]	; 0x70
   807c8:	400b      	ands	r3, r1
   807ca:	ea23 0302 	bic.w	r3, r3, r2
   807ce:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   807d0:	e003      	b.n	807da <pio_set_peripheral+0x3e>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   807d2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   807d4:	ea42 0103 	orr.w	r1, r2, r3
   807d8:	6701      	str	r1, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   807da:	6042      	str	r2, [r0, #4]
   807dc:	4770      	bx	lr
   807de:	bf00      	nop

000807e0 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   807e0:	6441      	str	r1, [r0, #68]	; 0x44
   807e2:	4770      	bx	lr

000807e4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   807e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   807e6:	4604      	mov	r4, r0
   807e8:	460d      	mov	r5, r1
   807ea:	4616      	mov	r6, r2
   807ec:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   807ee:	f240 73e1 	movw	r3, #2017	; 0x7e1
   807f2:	f2c0 0308 	movt	r3, #8
   807f6:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   807f8:	4620      	mov	r0, r4
   807fa:	4629      	mov	r1, r5
   807fc:	9a06      	ldr	r2, [sp, #24]
   807fe:	f240 7391 	movw	r3, #1937	; 0x791
   80802:	f2c0 0308 	movt	r3, #8
   80806:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80808:	b10f      	cbz	r7, 8080e <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
   8080a:	6525      	str	r5, [r4, #80]	; 0x50
   8080c:	e000      	b.n	80810 <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8080e:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80810:	b10e      	cbz	r6, 80816 <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
   80812:	6325      	str	r5, [r4, #48]	; 0x30
   80814:	e000      	b.n	80818 <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80816:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80818:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   8081a:	6025      	str	r5, [r4, #0]
   8081c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8081e:	bf00      	nop

00080820 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   80820:	b570      	push	{r4, r5, r6, lr}
   80822:	4604      	mov	r4, r0
   80824:	460d      	mov	r5, r1
   80826:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   80828:	f240 73e1 	movw	r3, #2017	; 0x7e1
   8082c:	f2c0 0308 	movt	r3, #8
   80830:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   80832:	4620      	mov	r0, r4
   80834:	4629      	mov	r1, r5
   80836:	f006 0201 	and.w	r2, r6, #1
   8083a:	f240 7391 	movw	r3, #1937	; 0x791
   8083e:	f2c0 0308 	movt	r3, #8
   80842:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80844:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
   80848:	bf14      	ite	ne
   8084a:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8084c:	6265      	streq	r5, [r4, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8084e:	f016 0f02 	tst.w	r6, #2
   80852:	d002      	beq.n	8085a <pio_set_input+0x3a>
		p_pio->PIO_SCIFSR = ul_mask;
   80854:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   80858:	e004      	b.n	80864 <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8085a:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_SCIFSR = ul_mask;
   8085e:	bf18      	it	ne
   80860:	f8c4 5080 	strne.w	r5, [r4, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80864:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   80866:	6025      	str	r5, [r4, #0]
   80868:	bd70      	pop	{r4, r5, r6, pc}
   8086a:	bf00      	nop

0008086c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8086c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8086e:	4770      	bx	lr

00080870 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80870:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80872:	4770      	bx	lr

00080874 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80874:	b5f0      	push	{r4, r5, r6, r7, lr}
   80876:	b083      	sub	sp, #12
   80878:	460d      	mov	r5, r1
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8087a:	ea4f 1650 	mov.w	r6, r0, lsr #5
   8087e:	f506 1100 	add.w	r1, r6, #2097152	; 0x200000
   80882:	f201 7207 	addw	r2, r1, #1799	; 0x707
   80886:	ea4f 2642 	mov.w	r6, r2, lsl #9

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8088a:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
   8088e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80892:	d042      	beq.n	8091a <pio_configure_pin+0xa6>
   80894:	d806      	bhi.n	808a4 <pio_configure_pin+0x30>
   80896:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8089a:	d00a      	beq.n	808b2 <pio_configure_pin+0x3e>
   8089c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   808a0:	d164      	bne.n	8096c <pio_configure_pin+0xf8>
   808a2:	e020      	b.n	808e6 <pio_configure_pin+0x72>
   808a4:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   808a8:	d046      	beq.n	80938 <pio_configure_pin+0xc4>
   808aa:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   808ae:	d15d      	bne.n	8096c <pio_configure_pin+0xf8>
   808b0:	e042      	b.n	80938 <pio_configure_pin+0xc4>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   808b2:	f000 071f 	and.w	r7, r0, #31
   808b6:	f04f 0401 	mov.w	r4, #1
   808ba:	fa04 f707 	lsl.w	r7, r4, r7
   808be:	4630      	mov	r0, r6
   808c0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   808c4:	463a      	mov	r2, r7
   808c6:	f240 739d 	movw	r3, #1949	; 0x79d
   808ca:	f2c0 0308 	movt	r3, #8
   808ce:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   808d0:	4630      	mov	r0, r6
   808d2:	4639      	mov	r1, r7
   808d4:	ea05 0204 	and.w	r2, r5, r4
   808d8:	f240 7391 	movw	r3, #1937	; 0x791
   808dc:	f2c0 0308 	movt	r3, #8
   808e0:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   808e2:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   808e4:	e044      	b.n	80970 <pio_configure_pin+0xfc>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   808e6:	f000 001f 	and.w	r0, r0, #31
   808ea:	f04f 0401 	mov.w	r4, #1
   808ee:	fa04 f700 	lsl.w	r7, r4, r0
   808f2:	4630      	mov	r0, r6
   808f4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   808f8:	463a      	mov	r2, r7
   808fa:	f240 739d 	movw	r3, #1949	; 0x79d
   808fe:	f2c0 0308 	movt	r3, #8
   80902:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80904:	4630      	mov	r0, r6
   80906:	4639      	mov	r1, r7
   80908:	ea05 0204 	and.w	r2, r5, r4
   8090c:	f240 7391 	movw	r3, #1937	; 0x791
   80910:	f2c0 0308 	movt	r3, #8
   80914:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80916:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   80918:	e02a      	b.n	80970 <pio_configure_pin+0xfc>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8091a:	f000 021f 	and.w	r2, r0, #31
   8091e:	f04f 0401 	mov.w	r4, #1
   80922:	4630      	mov	r0, r6
   80924:	fa04 f102 	lsl.w	r1, r4, r2
   80928:	462a      	mov	r2, r5
   8092a:	f640 0321 	movw	r3, #2081	; 0x821
   8092e:	f2c0 0308 	movt	r3, #8
   80932:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80934:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80936:	e01b      	b.n	80970 <pio_configure_pin+0xfc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80938:	f000 021f 	and.w	r2, r0, #31
   8093c:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80940:	f005 5360 	and.w	r3, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80944:	ea05 0104 	and.w	r1, r5, r4
   80948:	9100      	str	r1, [sp, #0]
   8094a:	4630      	mov	r0, r6
   8094c:	fa04 f102 	lsl.w	r1, r4, r2
   80950:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80954:	bf14      	ite	ne
   80956:	2200      	movne	r2, #0
   80958:	2201      	moveq	r2, #1
   8095a:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8095e:	f240 75e5 	movw	r5, #2021	; 0x7e5
   80962:	f2c0 0508 	movt	r5, #8
   80966:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80968:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8096a:	e001      	b.n	80970 <pio_configure_pin+0xfc>

	default:
		return 0;
   8096c:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   80970:	b003      	add	sp, #12
   80972:	bdf0      	pop	{r4, r5, r6, r7, pc}

00080974 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80974:	b5f0      	push	{r4, r5, r6, r7, lr}
   80976:	b083      	sub	sp, #12
   80978:	4607      	mov	r7, r0
   8097a:	460e      	mov	r6, r1
   8097c:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8097e:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   80982:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80986:	d036      	beq.n	809f6 <pio_configure_pin_group+0x82>
   80988:	d806      	bhi.n	80998 <pio_configure_pin_group+0x24>
   8098a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8098e:	d00a      	beq.n	809a6 <pio_configure_pin_group+0x32>
   80990:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80994:	d14d      	bne.n	80a32 <pio_configure_pin_group+0xbe>
   80996:	e01a      	b.n	809ce <pio_configure_pin_group+0x5a>
   80998:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   8099c:	d033      	beq.n	80a06 <pio_configure_pin_group+0x92>
   8099e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   809a2:	d146      	bne.n	80a32 <pio_configure_pin_group+0xbe>
   809a4:	e02f      	b.n	80a06 <pio_configure_pin_group+0x92>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   809a6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809aa:	4632      	mov	r2, r6
   809ac:	f240 739d 	movw	r3, #1949	; 0x79d
   809b0:	f2c0 0308 	movt	r3, #8
   809b4:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   809b6:	4638      	mov	r0, r7
   809b8:	4631      	mov	r1, r6
   809ba:	f005 0201 	and.w	r2, r5, #1
   809be:	f240 7391 	movw	r3, #1937	; 0x791
   809c2:	f2c0 0308 	movt	r3, #8
   809c6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   809c8:	f04f 0001 	mov.w	r0, #1
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   809cc:	e033      	b.n	80a36 <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   809ce:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   809d2:	4632      	mov	r2, r6
   809d4:	f240 739d 	movw	r3, #1949	; 0x79d
   809d8:	f2c0 0308 	movt	r3, #8
   809dc:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   809de:	4638      	mov	r0, r7
   809e0:	4631      	mov	r1, r6
   809e2:	f005 0201 	and.w	r2, r5, #1
   809e6:	f240 7391 	movw	r3, #1937	; 0x791
   809ea:	f2c0 0308 	movt	r3, #8
   809ee:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   809f0:	f04f 0001 	mov.w	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   809f4:	e01f      	b.n	80a36 <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   809f6:	f640 0321 	movw	r3, #2081	; 0x821
   809fa:	f2c0 0308 	movt	r3, #8
   809fe:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80a00:	f04f 0001 	mov.w	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80a04:	e017      	b.n	80a36 <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80a06:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80a0a:	f005 0001 	and.w	r0, r5, #1
   80a0e:	9000      	str	r0, [sp, #0]
   80a10:	4638      	mov	r0, r7
   80a12:	4631      	mov	r1, r6
   80a14:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80a18:	bf14      	ite	ne
   80a1a:	2200      	movne	r2, #0
   80a1c:	2201      	moveq	r2, #1
   80a1e:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80a22:	f240 74e5 	movw	r4, #2021	; 0x7e5
   80a26:	f2c0 0408 	movt	r4, #8
   80a2a:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80a2c:	f04f 0001 	mov.w	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80a30:	e001      	b.n	80a36 <pio_configure_pin_group+0xc2>

	default:
		return 0;
   80a32:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   80a36:	b003      	add	sp, #12
   80a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80a3a:	bf00      	nop

00080a3c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80a3e:	4604      	mov	r4, r0
   80a40:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80a42:	f640 036d 	movw	r3, #2157	; 0x86d
   80a46:	f2c0 0308 	movt	r3, #8
   80a4a:	4798      	blx	r3
   80a4c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80a4e:	4620      	mov	r0, r4
   80a50:	f640 0171 	movw	r1, #2161	; 0x871
   80a54:	f2c0 0108 	movt	r1, #8
   80a58:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
   80a5a:	4005      	ands	r5, r0
   80a5c:	d014      	beq.n	80a88 <pio_handler_process+0x4c>
   80a5e:	4c0b      	ldr	r4, [pc, #44]	; (80a8c <pio_handler_process+0x50>)
 * \brief Process an interrupt request on the given PIO controller.
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
   80a60:	4627      	mov	r7, r4
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80a62:	f854 0c0c 	ldr.w	r0, [r4, #-12]
   80a66:	42b0      	cmp	r0, r6
   80a68:	d10a      	bne.n	80a80 <pio_handler_process+0x44>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80a6a:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80a6e:	4229      	tst	r1, r5
   80a70:	d006      	beq.n	80a80 <pio_handler_process+0x44>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80a72:	6822      	ldr	r2, [r4, #0]
   80a74:	4630      	mov	r0, r6
   80a76:	4790      	blx	r2
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80a78:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80a7c:	ea25 0503 	bic.w	r5, r5, r3
   80a80:	f104 0410 	add.w	r4, r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80a84:	2d00      	cmp	r5, #0
   80a86:	d1eb      	bne.n	80a60 <pio_handler_process+0x24>
   80a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80a8a:	bf00      	nop
   80a8c:	20070878 	.word	0x20070878

00080a90 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80a90:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80a92:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   80a96:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80a9a:	f04f 010b 	mov.w	r1, #11
   80a9e:	f640 233d 	movw	r3, #2621	; 0xa3d
   80aa2:	f2c0 0308 	movt	r3, #8
   80aa6:	4798      	blx	r3
   80aa8:	bd08      	pop	{r3, pc}
   80aaa:	bf00      	nop

00080aac <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80aac:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80aae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   80ab2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80ab6:	f04f 010c 	mov.w	r1, #12
   80aba:	f640 233d 	movw	r3, #2621	; 0xa3d
   80abe:	f2c0 0308 	movt	r3, #8
   80ac2:	4798      	blx	r3
   80ac4:	bd08      	pop	{r3, pc}
   80ac6:	bf00      	nop

00080ac8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80ac8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80aca:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   80ace:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80ad2:	f04f 010d 	mov.w	r1, #13
   80ad6:	f640 233d 	movw	r3, #2621	; 0xa3d
   80ada:	f2c0 0308 	movt	r3, #8
   80ade:	4798      	blx	r3
   80ae0:	bd08      	pop	{r3, pc}
   80ae2:	bf00      	nop

00080ae4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80ae4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80ae6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
   80aea:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80aee:	f04f 010e 	mov.w	r1, #14
   80af2:	f640 233d 	movw	r3, #2621	; 0xa3d
   80af6:	f2c0 0308 	movt	r3, #8
   80afa:	4798      	blx	r3
   80afc:	bd08      	pop	{r3, pc}
   80afe:	bf00      	nop

00080b00 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80b00:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80b04:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80b0a:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   80b0e:	4308      	orrs	r0, r1
   80b10:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b12:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80b14:	f010 0f08 	tst.w	r0, #8
   80b18:	d007      	beq.n	80b2a <pmc_switch_mck_to_pllack+0x2a>
   80b1a:	e010      	b.n	80b3e <pmc_switch_mck_to_pllack+0x3e>
   80b1c:	f100 33ff 	add.w	r3, r0, #4294967295
   80b20:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80b22:	f010 0f08 	tst.w	r0, #8
   80b26:	d038      	beq.n	80b9a <pmc_switch_mck_to_pllack+0x9a>
   80b28:	e009      	b.n	80b3e <pmc_switch_mck_to_pllack+0x3e>
   80b2a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   80b2e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80b32:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80b36:	6e91      	ldr	r1, [r2, #104]	; 0x68
   80b38:	f011 0f08 	tst.w	r1, #8
   80b3c:	d0ee      	beq.n	80b1c <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80b3e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80b42:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80b46:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   80b48:	f022 0303 	bic.w	r3, r2, #3
   80b4c:	f043 0002 	orr.w	r0, r3, #2
   80b50:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b52:	6e89      	ldr	r1, [r1, #104]	; 0x68
   80b54:	f011 0f08 	tst.w	r1, #8
   80b58:	d009      	beq.n	80b6e <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80b5a:	f04f 0000 	mov.w	r0, #0
   80b5e:	4770      	bx	lr
   80b60:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b64:	6e91      	ldr	r1, [r2, #104]	; 0x68
   80b66:	f011 0f08 	tst.w	r1, #8
   80b6a:	d013      	beq.n	80b94 <pmc_switch_mck_to_pllack+0x94>
   80b6c:	e009      	b.n	80b82 <pmc_switch_mck_to_pllack+0x82>
   80b6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80b72:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80b76:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80b7a:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80b7c:	f010 0f08 	tst.w	r0, #8
   80b80:	d0ee      	beq.n	80b60 <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80b82:	f04f 0000 	mov.w	r0, #0
   80b86:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80b88:	f04f 0001 	mov.w	r0, #1
   80b8c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80b8e:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
   80b92:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80b94:	3b01      	subs	r3, #1
   80b96:	d1f0      	bne.n	80b7a <pmc_switch_mck_to_pllack+0x7a>
   80b98:	e7f9      	b.n	80b8e <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80b9a:	1e58      	subs	r0, r3, #1
   80b9c:	d1cb      	bne.n	80b36 <pmc_switch_mck_to_pllack+0x36>
   80b9e:	e7f3      	b.n	80b88 <pmc_switch_mck_to_pllack+0x88>

00080ba0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80ba0:	b188      	cbz	r0, 80bc6 <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80ba2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80ba6:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80baa:	6a08      	ldr	r0, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   80bac:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   80bb0:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
   80bb4:	4002      	ands	r2, r0
   80bb6:	f04f 0302 	mov.w	r3, #2
   80bba:	f2c0 1337 	movt	r3, #311	; 0x137
   80bbe:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80bc2:	6208      	str	r0, [r1, #32]
   80bc4:	4770      	bx	lr
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80bc6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80bca:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80bce:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   80bd0:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
   80bd4:	f020 0203 	bic.w	r2, r0, #3
   80bd8:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
   80bdc:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80be0:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   80be4:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80be8:	6218      	str	r0, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80bea:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80bee:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80bf2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80bf4:	f013 0f01 	tst.w	r3, #1
   80bf8:	d0fb      	beq.n	80bf2 <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   80bfa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80bfe:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80c02:	6a08      	ldr	r0, [r1, #32]
   80c04:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
   80c08:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
   80c0c:	620b      	str	r3, [r1, #32]
   80c0e:	4770      	bx	lr

00080c10 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80c10:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80c14:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80c18:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80c1a:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80c1e:	4770      	bx	lr

00080c20 <pmc_disable_pllack>:
/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80c20:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80c24:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80c28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80c2c:	629a      	str	r2, [r3, #40]	; 0x28
   80c2e:	4770      	bx	lr

00080c30 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80c30:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80c34:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80c38:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80c3a:	f000 0002 	and.w	r0, r0, #2
   80c3e:	4770      	bx	lr

00080c40 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80c40:	282c      	cmp	r0, #44	; 0x2c
   80c42:	d835      	bhi.n	80cb0 <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
   80c44:	281f      	cmp	r0, #31
   80c46:	d817      	bhi.n	80c78 <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80c48:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80c4c:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80c50:	698a      	ldr	r2, [r1, #24]
   80c52:	f04f 0301 	mov.w	r3, #1
   80c56:	fa03 f300 	lsl.w	r3, r3, r0
   80c5a:	401a      	ands	r2, r3
   80c5c:	4293      	cmp	r3, r2
   80c5e:	d02a      	beq.n	80cb6 <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
   80c60:	f04f 0101 	mov.w	r1, #1
   80c64:	fa01 f000 	lsl.w	r0, r1, r0
   80c68:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80c6c:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80c70:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80c72:	f04f 0000 	mov.w	r0, #0
   80c76:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80c78:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80c7c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80c80:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   80c84:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80c88:	f04f 0101 	mov.w	r1, #1
   80c8c:	fa01 f100 	lsl.w	r1, r1, r0
   80c90:	400a      	ands	r2, r1
   80c92:	4291      	cmp	r1, r2
   80c94:	d012      	beq.n	80cbc <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
   80c96:	f04f 0301 	mov.w	r3, #1
   80c9a:	fa03 f000 	lsl.w	r0, r3, r0
   80c9e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80ca2:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80ca6:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   80caa:	f04f 0000 	mov.w	r0, #0
   80cae:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80cb0:	f04f 0001 	mov.w	r0, #1
   80cb4:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80cb6:	f04f 0000 	mov.w	r0, #0
   80cba:	4770      	bx	lr
   80cbc:	f04f 0000 	mov.w	r0, #0
}
   80cc0:	4770      	bx	lr
   80cc2:	bf00      	nop

00080cc4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80cc4:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80cc6:	f04f 03ac 	mov.w	r3, #172	; 0xac
   80cca:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80ccc:	680a      	ldr	r2, [r1, #0]
   80cce:	684c      	ldr	r4, [r1, #4]
   80cd0:	fbb2 f3f4 	udiv	r3, r2, r4
   80cd4:	ea4f 1313 	mov.w	r3, r3, lsr #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80cd8:	f103 34ff 	add.w	r4, r3, #4294967295
   80cdc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80ce0:	4294      	cmp	r4, r2
   80ce2:	d80c      	bhi.n	80cfe <uart_init+0x3a>
		return 1;

	p_uart->UART_BRGR = cd;
   80ce4:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80ce6:	6889      	ldr	r1, [r1, #8]
   80ce8:	6041      	str	r1, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80cea:	f240 2302 	movw	r3, #514	; 0x202
   80cee:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80cf2:	f04f 0250 	mov.w	r2, #80	; 0x50
   80cf6:	6002      	str	r2, [r0, #0]

	return 0;
   80cf8:	f04f 0000 	mov.w	r0, #0
   80cfc:	e001      	b.n	80d02 <uart_init+0x3e>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80cfe:	f04f 0001 	mov.w	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80d02:	bc10      	pop	{r4}
   80d04:	4770      	bx	lr
   80d06:	bf00      	nop

00080d08 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80d08:	6943      	ldr	r3, [r0, #20]
   80d0a:	f013 0f02 	tst.w	r3, #2
   80d0e:	d003      	beq.n	80d18 <uart_write+0x10>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80d10:	61c1      	str	r1, [r0, #28]
	return 0;
   80d12:	f04f 0000 	mov.w	r0, #0
   80d16:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80d18:	f04f 0001 	mov.w	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80d1c:	4770      	bx	lr
   80d1e:	bf00      	nop

00080d20 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80d20:	6943      	ldr	r3, [r0, #20]
   80d22:	f013 0f01 	tst.w	r3, #1
   80d26:	d004      	beq.n	80d32 <uart_read+0x12>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80d28:	6980      	ldr	r0, [r0, #24]
   80d2a:	7008      	strb	r0, [r1, #0]
	return 0;
   80d2c:	f04f 0000 	mov.w	r0, #0
   80d30:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80d32:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80d36:	4770      	bx	lr

00080d38 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80d38:	6943      	ldr	r3, [r0, #20]
   80d3a:	f013 0f02 	tst.w	r3, #2
   80d3e:	d007      	beq.n	80d50 <usart_write+0x18>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80d40:	ea4f 51c1 	mov.w	r1, r1, lsl #23
   80d44:	ea4f 52d1 	mov.w	r2, r1, lsr #23
   80d48:	61c2      	str	r2, [r0, #28]
	return 0;
   80d4a:	f04f 0000 	mov.w	r0, #0
   80d4e:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80d50:	f04f 0001 	mov.w	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80d54:	4770      	bx	lr
   80d56:	bf00      	nop

00080d58 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80d58:	6943      	ldr	r3, [r0, #20]
   80d5a:	f013 0f01 	tst.w	r3, #1
   80d5e:	d008      	beq.n	80d72 <usart_read+0x1a>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80d60:	6980      	ldr	r0, [r0, #24]
   80d62:	ea4f 52c0 	mov.w	r2, r0, lsl #23
   80d66:	ea4f 53d2 	mov.w	r3, r2, lsr #23
   80d6a:	600b      	str	r3, [r1, #0]

	return 0;
   80d6c:	f04f 0000 	mov.w	r0, #0
   80d70:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80d72:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80d76:	4770      	bx	lr

00080d78 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80d78:	e7fe      	b.n	80d78 <Dummy_Handler>
   80d7a:	bf00      	nop

00080d7c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80d7c:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80d7e:	f240 0300 	movw	r3, #0
   80d82:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80d86:	f643 22a8 	movw	r2, #15016	; 0x3aa8
   80d8a:	f2c0 0208 	movt	r2, #8
   80d8e:	429a      	cmp	r2, r3
   80d90:	d003      	beq.n	80d9a <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   80d92:	4840      	ldr	r0, [pc, #256]	; (80e94 <Reset_Handler+0x118>)
   80d94:	4940      	ldr	r1, [pc, #256]	; (80e98 <Reset_Handler+0x11c>)
   80d96:	4281      	cmp	r1, r0
   80d98:	d304      	bcc.n	80da4 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80d9a:	4b40      	ldr	r3, [pc, #256]	; (80e9c <Reset_Handler+0x120>)
   80d9c:	4a40      	ldr	r2, [pc, #256]	; (80ea0 <Reset_Handler+0x124>)
   80d9e:	429a      	cmp	r2, r3
   80da0:	d325      	bcc.n	80dee <Reset_Handler+0x72>
   80da2:	e042      	b.n	80e2a <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   80da4:	4d3f      	ldr	r5, [pc, #252]	; (80ea4 <Reset_Handler+0x128>)
   80da6:	4c40      	ldr	r4, [pc, #256]	; (80ea8 <Reset_Handler+0x12c>)
   80da8:	1b63      	subs	r3, r4, r5
   80daa:	f023 0503 	bic.w	r5, r3, #3
   80dae:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   80db2:	f240 0200 	movw	r2, #0
   80db6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80dba:	f643 21a8 	movw	r1, #15016	; 0x3aa8
   80dbe:	f2c0 0108 	movt	r1, #8
   80dc2:	f105 0004 	add.w	r0, r5, #4
   80dc6:	f3c5 0480 	ubfx	r4, r5, #2, #1
   80dca:	585d      	ldr	r5, [r3, r1]
   80dcc:	509d      	str	r5, [r3, r2]
   80dce:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80dd2:	4283      	cmp	r3, r0
   80dd4:	d155      	bne.n	80e82 <Reset_Handler+0x106>
   80dd6:	e7e0      	b.n	80d9a <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   80dd8:	585d      	ldr	r5, [r3, r1]
   80dda:	509d      	str	r5, [r3, r2]
   80ddc:	f103 0304 	add.w	r3, r3, #4
   80de0:	585c      	ldr	r4, [r3, r1]
   80de2:	509c      	str	r4, [r3, r2]
   80de4:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80de8:	4283      	cmp	r3, r0
   80dea:	d1f5      	bne.n	80dd8 <Reset_Handler+0x5c>
   80dec:	e7d5      	b.n	80d9a <Reset_Handler+0x1e>
   80dee:	4d2f      	ldr	r5, [pc, #188]	; (80eac <Reset_Handler+0x130>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   80df0:	492f      	ldr	r1, [pc, #188]	; (80eb0 <Reset_Handler+0x134>)
   80df2:	1b48      	subs	r0, r1, r5
   80df4:	f020 0403 	bic.w	r4, r0, #3
   80df8:	f640 0350 	movw	r3, #2128	; 0x850
   80dfc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80e00:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80e02:	f04f 0100 	mov.w	r1, #0
   80e06:	1b50      	subs	r0, r2, r5
   80e08:	f1a0 0004 	sub.w	r0, r0, #4
   80e0c:	f3c0 0480 	ubfx	r4, r0, #2, #1
   80e10:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80e14:	4295      	cmp	r5, r2
   80e16:	d12d      	bne.n	80e74 <Reset_Handler+0xf8>
   80e18:	e007      	b.n	80e2a <Reset_Handler+0xae>
   80e1a:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
   80e1e:	6069      	str	r1, [r5, #4]
   80e20:	f105 0508 	add.w	r5, r5, #8
   80e24:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80e26:	4295      	cmp	r5, r2
   80e28:	d1f7      	bne.n	80e1a <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80e2a:	f240 0500 	movw	r5, #0
   80e2e:	f2c0 0508 	movt	r5, #8
   80e32:	f025 4260 	bic.w	r2, r5, #3758096384	; 0xe0000000
   80e36:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   80e3a:	f44f 406d 	mov.w	r0, #60672	; 0xed00
   80e3e:	f2ce 0000 	movt	r0, #57344	; 0xe000
   80e42:	6081      	str	r1, [r0, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80e44:	f105 4460 	add.w	r4, r5, #3758096384	; 0xe0000000
   80e48:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   80e4c:	d207      	bcs.n	80e5e <Reset_Handler+0xe2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80e4e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   80e52:	f2ce 0300 	movt	r3, #57344	; 0xe000
   80e56:	689d      	ldr	r5, [r3, #8]
   80e58:	f045 5200 	orr.w	r2, r5, #536870912	; 0x20000000
   80e5c:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80e5e:	f642 01d5 	movw	r1, #10453	; 0x28d5
   80e62:	f2c0 0108 	movt	r1, #8
   80e66:	4788      	blx	r1

	/* Branch to main function */
	main();
   80e68:	f241 40d1 	movw	r0, #5329	; 0x14d1
   80e6c:	f2c0 0008 	movt	r0, #8
   80e70:	4780      	blx	r0
   80e72:	e7fe      	b.n	80e72 <Reset_Handler+0xf6>
   80e74:	2c00      	cmp	r4, #0
   80e76:	d0d0      	beq.n	80e1a <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80e78:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80e7c:	4295      	cmp	r5, r2
   80e7e:	d1cc      	bne.n	80e1a <Reset_Handler+0x9e>
   80e80:	e7d3      	b.n	80e2a <Reset_Handler+0xae>
   80e82:	2c00      	cmp	r4, #0
   80e84:	d0a8      	beq.n	80dd8 <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   80e86:	585c      	ldr	r4, [r3, r1]
   80e88:	509c      	str	r4, [r3, r2]
   80e8a:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80e8e:	4283      	cmp	r3, r0
   80e90:	d1a2      	bne.n	80dd8 <Reset_Handler+0x5c>
   80e92:	e782      	b.n	80d9a <Reset_Handler+0x1e>
   80e94:	20070850 	.word	0x20070850
   80e98:	20070000 	.word	0x20070000
   80e9c:	200709a0 	.word	0x200709a0
   80ea0:	20070850 	.word	0x20070850
   80ea4:	20070004 	.word	0x20070004
   80ea8:	20070853 	.word	0x20070853
   80eac:	2007084c 	.word	0x2007084c
   80eb0:	2007099b 	.word	0x2007099b

00080eb4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80eb4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80eb8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80ebc:	6b18      	ldr	r0, [r3, #48]	; 0x30
   80ebe:	f000 0103 	and.w	r1, r0, #3
   80ec2:	2903      	cmp	r1, #3
   80ec4:	f200 80b1 	bhi.w	8102a <SystemCoreClockUpdate+0x176>
   80ec8:	e8df f001 	tbb	[pc, r1]
   80ecc:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80ed0:	f641 2010 	movw	r0, #6672	; 0x1a10
   80ed4:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80ed8:	6941      	ldr	r1, [r0, #20]
   80eda:	f011 0f80 	tst.w	r1, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80ede:	f240 0300 	movw	r3, #0
   80ee2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80ee6:	bf14      	ite	ne
   80ee8:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80eec:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80ef0:	601a      	str	r2, [r3, #0]
   80ef2:	e09a      	b.n	8102a <SystemCoreClockUpdate+0x176>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80ef4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80ef8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80efc:	6a18      	ldr	r0, [r3, #32]
   80efe:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   80f02:	d009      	beq.n	80f18 <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80f04:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   80f08:	f2c0 03b7 	movt	r3, #183	; 0xb7
   80f0c:	f240 0200 	movw	r2, #0
   80f10:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80f14:	6013      	str	r3, [r2, #0]
   80f16:	e088      	b.n	8102a <SystemCoreClockUpdate+0x176>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80f18:	f44f 6110 	mov.w	r1, #2304	; 0x900
   80f1c:	f2c0 013d 	movt	r1, #61	; 0x3d
   80f20:	f240 0200 	movw	r2, #0
   80f24:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80f28:	6011      	str	r1, [r2, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80f2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80f2e:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80f32:	6a18      	ldr	r0, [r3, #32]
   80f34:	f000 0170 	and.w	r1, r0, #112	; 0x70
   80f38:	2910      	cmp	r1, #16
   80f3a:	d002      	beq.n	80f42 <SystemCoreClockUpdate+0x8e>
   80f3c:	2920      	cmp	r1, #32
   80f3e:	d174      	bne.n	8102a <SystemCoreClockUpdate+0x176>
   80f40:	e009      	b.n	80f56 <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80f42:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   80f46:	f2c0 007a 	movt	r0, #122	; 0x7a
   80f4a:	f240 0100 	movw	r1, #0
   80f4e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80f52:	6008      	str	r0, [r1, #0]
				break;
   80f54:	e069      	b.n	8102a <SystemCoreClockUpdate+0x176>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80f56:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   80f5a:	f2c0 03b7 	movt	r3, #183	; 0xb7
   80f5e:	f240 0200 	movw	r2, #0
   80f62:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80f66:	6013      	str	r3, [r2, #0]
				break;
   80f68:	e05f      	b.n	8102a <SystemCoreClockUpdate+0x176>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80f6a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80f6e:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80f72:	6a13      	ldr	r3, [r2, #32]
   80f74:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80f78:	d009      	beq.n	80f8e <SystemCoreClockUpdate+0xda>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80f7a:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   80f7e:	f2c0 01b7 	movt	r1, #183	; 0xb7
   80f82:	f240 0200 	movw	r2, #0
   80f86:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80f8a:	6011      	str	r1, [r2, #0]
   80f8c:	e027      	b.n	80fde <SystemCoreClockUpdate+0x12a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80f8e:	f44f 6010 	mov.w	r0, #2304	; 0x900
   80f92:	f2c0 003d 	movt	r0, #61	; 0x3d
   80f96:	f240 0100 	movw	r1, #0
   80f9a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80f9e:	6008      	str	r0, [r1, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80fa0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80fa4:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80fa8:	6a13      	ldr	r3, [r2, #32]
   80faa:	f003 0070 	and.w	r0, r3, #112	; 0x70
   80fae:	2810      	cmp	r0, #16
   80fb0:	d002      	beq.n	80fb8 <SystemCoreClockUpdate+0x104>
   80fb2:	2820      	cmp	r0, #32
   80fb4:	d113      	bne.n	80fde <SystemCoreClockUpdate+0x12a>
   80fb6:	e009      	b.n	80fcc <SystemCoreClockUpdate+0x118>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80fb8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   80fbc:	f2c0 037a 	movt	r3, #122	; 0x7a
   80fc0:	f240 0000 	movw	r0, #0
   80fc4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80fc8:	6003      	str	r3, [r0, #0]
				break;
   80fca:	e008      	b.n	80fde <SystemCoreClockUpdate+0x12a>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80fcc:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   80fd0:	f2c0 01b7 	movt	r1, #183	; 0xb7
   80fd4:	f240 0200 	movw	r2, #0
   80fd8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80fdc:	6011      	str	r1, [r2, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80fde:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80fe2:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80fe6:	6b18      	ldr	r0, [r3, #48]	; 0x30
   80fe8:	f000 0103 	and.w	r1, r0, #3
   80fec:	2902      	cmp	r1, #2
   80fee:	d113      	bne.n	81018 <SystemCoreClockUpdate+0x164>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80ff0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80ff4:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80ff8:	6a88      	ldr	r0, [r1, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80ffa:	6a89      	ldr	r1, [r1, #40]	; 0x28
   80ffc:	f240 0300 	movw	r3, #0
   81000:	f2c2 0307 	movt	r3, #8199	; 0x2007
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81004:	f3c0 400a 	ubfx	r0, r0, #16, #11
   81008:	681a      	ldr	r2, [r3, #0]
   8100a:	fb00 2002 	mla	r0, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8100e:	b2c9      	uxtb	r1, r1
   81010:	fbb0 f2f1 	udiv	r2, r0, r1
   81014:	601a      	str	r2, [r3, #0]
   81016:	e008      	b.n	8102a <SystemCoreClockUpdate+0x176>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81018:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
   8101c:	f6c0 634e 	movt	r3, #3662	; 0xe4e
   81020:	f240 0200 	movw	r2, #0
   81024:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81028:	6013      	str	r3, [r2, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8102a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8102e:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81032:	6b10      	ldr	r0, [r2, #48]	; 0x30
   81034:	f000 0170 	and.w	r1, r0, #112	; 0x70
   81038:	2970      	cmp	r1, #112	; 0x70
   8103a:	d10e      	bne.n	8105a <SystemCoreClockUpdate+0x1a6>
		SystemCoreClock /= 3U;
   8103c:	f240 0300 	movw	r3, #0
   81040:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81044:	6818      	ldr	r0, [r3, #0]
   81046:	f64a 22ab 	movw	r2, #43691	; 0xaaab
   8104a:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
   8104e:	fba2 0100 	umull	r0, r1, r2, r0
   81052:	ea4f 0051 	mov.w	r0, r1, lsr #1
   81056:	6018      	str	r0, [r3, #0]
   81058:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8105a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8105e:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81064:	f240 0000 	movw	r0, #0
   81068:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8106c:	f3c2 1102 	ubfx	r1, r2, #4, #3
   81070:	6803      	ldr	r3, [r0, #0]
   81072:	fa23 f301 	lsr.w	r3, r3, r1
   81076:	6003      	str	r3, [r0, #0]
   81078:	4770      	bx	lr
   8107a:	bf00      	nop

0008107c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   8107c:	f64e 23bf 	movw	r3, #60095	; 0xeabf
   81080:	f2c0 1321 	movt	r3, #289	; 0x121
   81084:	4298      	cmp	r0, r3
   81086:	d80c      	bhi.n	810a2 <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   81088:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   8108c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81090:	f04f 0000 	mov.w	r0, #0
   81094:	6018      	str	r0, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   81096:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   8109a:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8109e:	6008      	str	r0, [r1, #0]
   810a0:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   810a2:	f24f 017f 	movw	r1, #61567	; 0xf07f
   810a6:	f2c0 21fa 	movt	r1, #762	; 0x2fa
   810aa:	4288      	cmp	r0, r1
   810ac:	d80c      	bhi.n	810c8 <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   810ae:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   810b2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   810b6:	f44f 7180 	mov.w	r1, #256	; 0x100
   810ba:	6001      	str	r1, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   810bc:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   810c0:	f2c4 020e 	movt	r2, #16398	; 0x400e
   810c4:	6011      	str	r1, [r2, #0]
   810c6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   810c8:	f648 73ff 	movw	r3, #36863	; 0x8fff
   810cc:	f2c0 33d0 	movt	r3, #976	; 0x3d0
   810d0:	4298      	cmp	r0, r3
   810d2:	d80c      	bhi.n	810ee <system_init_flash+0x72>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   810d4:	f44f 6120 	mov.w	r1, #2560	; 0xa00
   810d8:	f2c4 010e 	movt	r1, #16398	; 0x400e
   810dc:	f44f 7200 	mov.w	r2, #512	; 0x200
   810e0:	600a      	str	r2, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   810e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   810e6:	f2c4 030e 	movt	r3, #16398	; 0x400e
   810ea:	601a      	str	r2, [r3, #0]
   810ec:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   810ee:	f24b 31ff 	movw	r1, #46079	; 0xb3ff
   810f2:	f2c0 41c4 	movt	r1, #1220	; 0x4c4
   810f6:	4288      	cmp	r0, r1
   810f8:	d80c      	bhi.n	81114 <system_init_flash+0x98>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   810fa:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   810fe:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81102:	f44f 7240 	mov.w	r2, #768	; 0x300
   81106:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   81108:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   8110c:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81110:	6002      	str	r2, [r0, #0]
   81112:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   81114:	f644 237f 	movw	r3, #19071	; 0x4a7f
   81118:	f2c0 535d 	movt	r3, #1373	; 0x55d
   8111c:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   8111e:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   81122:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81126:	bf94      	ite	ls
   81128:	f44f 6280 	movls.w	r2, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   8112c:	f44f 62a0 	movhi.w	r2, #1280	; 0x500
   81130:	6002      	str	r2, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   81132:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   81136:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8113a:	600a      	str	r2, [r1, #0]
   8113c:	4770      	bx	lr
   8113e:	bf00      	nop

00081140 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   81140:	f640 03dc 	movw	r3, #2268	; 0x8dc
   81144:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81148:	6819      	ldr	r1, [r3, #0]
   8114a:	b941      	cbnz	r1, 8115e <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
   8114c:	f640 03dc 	movw	r3, #2268	; 0x8dc
   81150:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81154:	f642 12a0 	movw	r2, #10656	; 0x29a0
   81158:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8115c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8115e:	f640 01dc 	movw	r1, #2268	; 0x8dc
   81162:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81166:	680b      	ldr	r3, [r1, #0]

	heap += incr;
   81168:	1818      	adds	r0, r3, r0
   8116a:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap;
}
   8116c:	4618      	mov	r0, r3
   8116e:	4770      	bx	lr

00081170 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81170:	f04f 30ff 	mov.w	r0, #4294967295
   81174:	4770      	bx	lr
   81176:	bf00      	nop

00081178 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   81178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8117c:	604b      	str	r3, [r1, #4]

	return 0;
}
   8117e:	f04f 0000 	mov.w	r0, #0
   81182:	4770      	bx	lr

00081184 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81184:	f04f 0001 	mov.w	r0, #1
   81188:	4770      	bx	lr
   8118a:	bf00      	nop

0008118c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   8118c:	f04f 0000 	mov.w	r0, #0
   81190:	4770      	bx	lr
   81192:	bf00      	nop

00081194 <ADCSetup>:


/*
*	Sets all available A/D channels to an array
*/
{
   81194:	b570      	push	{r4, r5, r6, lr}
   81196:	b08c      	sub	sp, #48	; 0x30
   81198:	4606      	mov	r6, r0
	int ADC_Channels[] = {ADC_CHANNEL_7,ADC_CHANNEL_6,ADC_CHANNEL_5,ADC_CHANNEL_4,
   8119a:	466c      	mov	r4, sp
   8119c:	f643 0564 	movw	r5, #14436	; 0x3864
   811a0:	f2c0 0508 	movt	r5, #8
   811a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   811a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   811a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   811aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   811ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   811b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ADC_CHANNEL_3,ADC_CHANNEL_2,ADC_CHANNEL_1,ADC_CHANNEL_0,ADC_CHANNEL_10,
	ADC_CHANNEL_11,ADC_CHANNEL_12,ADC_CHANNEL_13};


	/* Enable the specified peripheral clock (ADC clock) */
	if (pmc_enable_periph_clk(ID_ADC) == 0) {
   811b4:	f04f 0025 	mov.w	r0, #37	; 0x25
   811b8:	f640 4341 	movw	r3, #3137	; 0xc41
   811bc:	f2c0 0308 	movt	r3, #8
   811c0:	4798      	blx	r3
   811c2:	2800      	cmp	r0, #0
   811c4:	d13e      	bne.n	81244 <ADCSetup+0xb0>
		adc_init(ADC, sysclk_get_main_hz(), 14000000, 8 );
   811c6:	f04f 0400 	mov.w	r4, #0
   811ca:	f2c4 040c 	movt	r4, #16396	; 0x400c
   811ce:	4620      	mov	r0, r4
   811d0:	f44f 41f4 	mov.w	r1, #31232	; 0x7a00
   811d4:	f6c0 2103 	movt	r1, #2563	; 0xa03
   811d8:	f649 7280 	movw	r2, #40832	; 0x9f80
   811dc:	f2c0 02d5 	movt	r2, #213	; 0xd5
   811e0:	f04f 0308 	mov.w	r3, #8
   811e4:	f240 15a5 	movw	r5, #421	; 0x1a5
   811e8:	f2c0 0508 	movt	r5, #8
   811ec:	47a8      	blx	r5
		adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1);
   811ee:	4620      	mov	r0, r4
   811f0:	f04f 0100 	mov.w	r1, #0
   811f4:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   811f8:	f04f 0301 	mov.w	r3, #1
   811fc:	f240 2505 	movw	r5, #517	; 0x205
   81200:	f2c0 0508 	movt	r5, #8
   81204:	47a8      	blx	r5
		adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);
   81206:	4620      	mov	r0, r4
   81208:	f04f 0100 	mov.w	r1, #0
   8120c:	f240 12e5 	movw	r2, #485	; 0x1e5
   81210:	f2c0 0208 	movt	r2, #8
   81214:	4790      	blx	r2
		adc_enable_channel(ADC, ADC_Channels[DuePinNr]);
   81216:	a80c      	add	r0, sp, #48	; 0x30
   81218:	eb00 0686 	add.w	r6, r0, r6, lsl #2
   8121c:	4620      	mov	r0, r4
   8121e:	f816 1c30 	ldrb.w	r1, [r6, #-48]
   81222:	f240 232d 	movw	r3, #557	; 0x22d
   81226:	f2c0 0308 	movt	r3, #8
   8122a:	4798      	blx	r3
		adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
   8122c:	4620      	mov	r0, r4
   8122e:	f04f 0100 	mov.w	r1, #0
   81232:	460a      	mov	r2, r1
   81234:	f240 13f5 	movw	r3, #501	; 0x1f5
   81238:	f2c0 0308 	movt	r3, #8
   8123c:	4798      	blx	r3
		return 1;
   8123e:	f04f 0001 	mov.w	r0, #1
   81242:	e001      	b.n	81248 <ADCSetup+0xb4>
	}
	return 0;
   81244:	f04f 0000 	mov.w	r0, #0
}
   81248:	b00c      	add	sp, #48	; 0x30
   8124a:	bd70      	pop	{r4, r5, r6, pc}

0008124c <setUp>:
#include "myADC.h"
#include "Delay.h"
#include "asf.h"

void setUp(void)
{
   8124c:	4770      	bx	lr
   8124e:	bf00      	nop

00081250 <tearDown>:
	
}

void tearDown(void)
{
   81250:	4770      	bx	lr
   81252:	bf00      	nop

00081254 <test_ADConverterIsInitialisedCorrectly>:
	
}

void test_ADConverterIsInitialisedCorrectly(void)
{
   81254:	b510      	push	{r4, lr}
   81256:	b082      	sub	sp, #8
	/* Define a pointer to the address of the ADC Channel Status Register */
	uint32_t *const p_ADC_CHSR = (uint32_t *) (0x400C0018U);
	
	TEST_ASSERT_EQUAL_INT32(1, ADCSetup(0));
   81258:	f04f 0000 	mov.w	r0, #0
   8125c:	f241 1395 	movw	r3, #4501	; 0x1195
   81260:	f2c0 0308 	movt	r3, #8
   81264:	4798      	blx	r3
   81266:	4601      	mov	r1, r0
   81268:	f04f 0094 	mov.w	r0, #148	; 0x94
   8126c:	9000      	str	r0, [sp, #0]
   8126e:	f04f 0001 	mov.w	r0, #1
   81272:	f04f 0200 	mov.w	r2, #0
   81276:	f04f 031f 	mov.w	r3, #31
   8127a:	f242 24cd 	movw	r4, #8909	; 0x22cd
   8127e:	f2c0 0408 	movt	r4, #8
   81282:	47a0      	blx	r4
	
	/* Insert test assertion(s) here, checking that the corresponding ADC channel is enabled */
	TEST_ASSERT_BIT_HIGH(7, *p_ADC_CHSR);
   81284:	f04f 0118 	mov.w	r1, #24
   81288:	f2c4 010c 	movt	r1, #16396	; 0x400c
   8128c:	680a      	ldr	r2, [r1, #0]
   8128e:	f04f 0322 	mov.w	r3, #34	; 0x22
   81292:	9300      	str	r3, [sp, #0]
   81294:	f04f 0080 	mov.w	r0, #128	; 0x80
   81298:	f04f 31ff 	mov.w	r1, #4294967295
   8129c:	f04f 0300 	mov.w	r3, #0
   812a0:	f242 14c9 	movw	r4, #8649	; 0x21c9
   812a4:	f2c0 0408 	movt	r4, #8
   812a8:	47a0      	blx	r4
}
   812aa:	b002      	add	sp, #8
   812ac:	bd10      	pop	{r4, pc}
   812ae:	bf00      	nop

000812b0 <test_CheckIfValueIsNotZero>:

void test_CheckIfValueIsNotZero(void)
{
   812b0:	b510      	push	{r4, lr}
	
	adc_start(ADC);
   812b2:	f04f 0400 	mov.w	r4, #0
   812b6:	f2c4 040c 	movt	r4, #16396	; 0x400c
   812ba:	4620      	mov	r0, r4
   812bc:	f240 2325 	movw	r3, #549	; 0x225
   812c0:	f2c0 0308 	movt	r3, #8
   812c4:	4798      	blx	r3
	Delay(1000000);
   812c6:	f244 2040 	movw	r0, #16960	; 0x4240
   812ca:	f2c0 000f 	movt	r0, #15
   812ce:	f240 2181 	movw	r1, #641	; 0x281
   812d2:	f2c0 0108 	movt	r1, #8
   812d6:	4788      	blx	r1
	TEST_ASSERT_TRUE(adc_get_latest_value(ADC) != 0);
   812d8:	4620      	mov	r0, r4
   812da:	f240 2239 	movw	r2, #569	; 0x239
   812de:	f2c0 0208 	movt	r2, #8
   812e2:	4790      	blx	r2
   812e4:	b950      	cbnz	r0, 812fc <test_CheckIfValueIsNotZero+0x4c>
   812e6:	f643 0094 	movw	r0, #14484	; 0x3894
   812ea:	f2c0 0008 	movt	r0, #8
   812ee:	f04f 012a 	mov.w	r1, #42	; 0x2a
   812f2:	f242 33cd 	movw	r3, #9165	; 0x23cd
   812f6:	f2c0 0308 	movt	r3, #8
   812fa:	4798      	blx	r3
   812fc:	bd10      	pop	{r4, pc}
   812fe:	bf00      	nop

00081300 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   81300:	b5f0      	push	{r4, r5, r6, r7, lr}
   81302:	b083      	sub	sp, #12
   81304:	4604      	mov	r4, r0
   81306:	460d      	mov	r5, r1
	uint32_t val = 0;
   81308:	f04f 0300 	mov.w	r3, #0
   8130c:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8130e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   81312:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81316:	4284      	cmp	r4, r0
   81318:	d10d      	bne.n	81336 <usart_serial_getchar+0x36>
		while (uart_read((Uart*)p_usart, data));
   8131a:	f44f 6600 	mov.w	r6, #2048	; 0x800
   8131e:	f2c4 060e 	movt	r6, #16398	; 0x400e
   81322:	f640 5721 	movw	r7, #3361	; 0xd21
   81326:	f2c0 0708 	movt	r7, #8
   8132a:	4630      	mov	r0, r6
   8132c:	4629      	mov	r1, r5
   8132e:	47b8      	blx	r7
   81330:	2800      	cmp	r0, #0
   81332:	d1fa      	bne.n	8132a <usart_serial_getchar+0x2a>
   81334:	e02b      	b.n	8138e <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81336:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   8133a:	f2c4 0109 	movt	r1, #16393	; 0x4009
   8133e:	428c      	cmp	r4, r1
   81340:	d10f      	bne.n	81362 <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
   81342:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   81346:	f2c4 0609 	movt	r6, #16393	; 0x4009
   8134a:	f640 5759 	movw	r7, #3417	; 0xd59
   8134e:	f2c0 0708 	movt	r7, #8
   81352:	4630      	mov	r0, r6
   81354:	a901      	add	r1, sp, #4
   81356:	47b8      	blx	r7
   81358:	2800      	cmp	r0, #0
   8135a:	d1fa      	bne.n	81352 <usart_serial_getchar+0x52>
		*data = (uint8_t)(val & 0xFF);
   8135c:	9801      	ldr	r0, [sp, #4]
   8135e:	7028      	strb	r0, [r5, #0]
   81360:	e02b      	b.n	813ba <usart_serial_getchar+0xba>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81362:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   81366:	f2c4 0209 	movt	r2, #16393	; 0x4009
   8136a:	4294      	cmp	r4, r2
   8136c:	d10f      	bne.n	8138e <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
   8136e:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   81372:	f2c4 0409 	movt	r4, #16393	; 0x4009
   81376:	f640 5659 	movw	r6, #3417	; 0xd59
   8137a:	f2c0 0608 	movt	r6, #8
   8137e:	4620      	mov	r0, r4
   81380:	a901      	add	r1, sp, #4
   81382:	47b0      	blx	r6
   81384:	2800      	cmp	r0, #0
   81386:	d1fa      	bne.n	8137e <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   81388:	9b01      	ldr	r3, [sp, #4]
   8138a:	702b      	strb	r3, [r5, #0]
   8138c:	e02a      	b.n	813e4 <usart_serial_getchar+0xe4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8138e:	f04f 0100 	mov.w	r1, #0
   81392:	f2c4 010a 	movt	r1, #16394	; 0x400a
   81396:	428c      	cmp	r4, r1
   81398:	d10f      	bne.n	813ba <usart_serial_getchar+0xba>
		while (usart_read(p_usart, &val));
   8139a:	f04f 0400 	mov.w	r4, #0
   8139e:	f2c4 040a 	movt	r4, #16394	; 0x400a
   813a2:	f640 5659 	movw	r6, #3417	; 0xd59
   813a6:	f2c0 0608 	movt	r6, #8
   813aa:	4620      	mov	r0, r4
   813ac:	a901      	add	r1, sp, #4
   813ae:	47b0      	blx	r6
   813b0:	2800      	cmp	r0, #0
   813b2:	d1fa      	bne.n	813aa <usart_serial_getchar+0xaa>
		*data = (uint8_t)(val & 0xFF);
   813b4:	9801      	ldr	r0, [sp, #4]
   813b6:	7028      	strb	r0, [r5, #0]
   813b8:	e014      	b.n	813e4 <usart_serial_getchar+0xe4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   813ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   813be:	f2c4 020a 	movt	r2, #16394	; 0x400a
   813c2:	4294      	cmp	r4, r2
   813c4:	d10e      	bne.n	813e4 <usart_serial_getchar+0xe4>
		while (usart_read(p_usart, &val));
   813c6:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   813ca:	f2c4 040a 	movt	r4, #16394	; 0x400a
   813ce:	f640 5659 	movw	r6, #3417	; 0xd59
   813d2:	f2c0 0608 	movt	r6, #8
   813d6:	4620      	mov	r0, r4
   813d8:	a901      	add	r1, sp, #4
   813da:	47b0      	blx	r6
   813dc:	2800      	cmp	r0, #0
   813de:	d1fa      	bne.n	813d6 <usart_serial_getchar+0xd6>
		*data = (uint8_t)(val & 0xFF);
   813e0:	9b01      	ldr	r3, [sp, #4]
   813e2:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   813e4:	b003      	add	sp, #12
   813e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000813e8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   813e8:	b570      	push	{r4, r5, r6, lr}
   813ea:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   813ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
   813f0:	f2c4 030e 	movt	r3, #16398	; 0x400e
   813f4:	4298      	cmp	r0, r3
   813f6:	d10f      	bne.n	81418 <usart_serial_putchar+0x30>
		while (uart_write((Uart*)p_usart, c)!=0);
   813f8:	f44f 6500 	mov.w	r5, #2048	; 0x800
   813fc:	f2c4 050e 	movt	r5, #16398	; 0x400e
   81400:	f640 5609 	movw	r6, #3337	; 0xd09
   81404:	f2c0 0608 	movt	r6, #8
   81408:	4628      	mov	r0, r5
   8140a:	4621      	mov	r1, r4
   8140c:	47b0      	blx	r6
   8140e:	2800      	cmp	r0, #0
   81410:	d1fa      	bne.n	81408 <usart_serial_putchar+0x20>
		return 1;
   81412:	f04f 0001 	mov.w	r0, #1
   81416:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81418:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   8141c:	f2c4 0109 	movt	r1, #16393	; 0x4009
   81420:	4288      	cmp	r0, r1
   81422:	d10f      	bne.n	81444 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   81424:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   81428:	f2c4 0509 	movt	r5, #16393	; 0x4009
   8142c:	f640 5639 	movw	r6, #3385	; 0xd39
   81430:	f2c0 0608 	movt	r6, #8
   81434:	4628      	mov	r0, r5
   81436:	4621      	mov	r1, r4
   81438:	47b0      	blx	r6
   8143a:	2800      	cmp	r0, #0
   8143c:	d1fa      	bne.n	81434 <usart_serial_putchar+0x4c>
		return 1;
   8143e:	f04f 0001 	mov.w	r0, #1
   81442:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81444:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   81448:	f2c4 0209 	movt	r2, #16393	; 0x4009
   8144c:	4290      	cmp	r0, r2
   8144e:	d10f      	bne.n	81470 <usart_serial_putchar+0x88>
		while (usart_write(p_usart, c)!=0);
   81450:	f44f 4540 	mov.w	r5, #49152	; 0xc000
   81454:	f2c4 0509 	movt	r5, #16393	; 0x4009
   81458:	f640 5639 	movw	r6, #3385	; 0xd39
   8145c:	f2c0 0608 	movt	r6, #8
   81460:	4628      	mov	r0, r5
   81462:	4621      	mov	r1, r4
   81464:	47b0      	blx	r6
   81466:	2800      	cmp	r0, #0
   81468:	d1fa      	bne.n	81460 <usart_serial_putchar+0x78>
		return 1;
   8146a:	f04f 0001 	mov.w	r0, #1
   8146e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81470:	f04f 0300 	mov.w	r3, #0
   81474:	f2c4 030a 	movt	r3, #16394	; 0x400a
   81478:	4298      	cmp	r0, r3
   8147a:	d10f      	bne.n	8149c <usart_serial_putchar+0xb4>
		while (usart_write(p_usart, c)!=0);
   8147c:	f04f 0500 	mov.w	r5, #0
   81480:	f2c4 050a 	movt	r5, #16394	; 0x400a
   81484:	f640 5639 	movw	r6, #3385	; 0xd39
   81488:	f2c0 0608 	movt	r6, #8
   8148c:	4628      	mov	r0, r5
   8148e:	4621      	mov	r1, r4
   81490:	47b0      	blx	r6
   81492:	2800      	cmp	r0, #0
   81494:	d1fa      	bne.n	8148c <usart_serial_putchar+0xa4>
		return 1;
   81496:	f04f 0001 	mov.w	r0, #1
   8149a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8149c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   814a0:	f2c4 010a 	movt	r1, #16394	; 0x400a
   814a4:	4288      	cmp	r0, r1
   814a6:	d10f      	bne.n	814c8 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
   814a8:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   814ac:	f2c4 050a 	movt	r5, #16394	; 0x400a
   814b0:	f640 5639 	movw	r6, #3385	; 0xd39
   814b4:	f2c0 0608 	movt	r6, #8
   814b8:	4628      	mov	r0, r5
   814ba:	4621      	mov	r1, r4
   814bc:	47b0      	blx	r6
   814be:	2800      	cmp	r0, #0
   814c0:	d1fa      	bne.n	814b8 <usart_serial_putchar+0xd0>
		return 1;
   814c2:	f04f 0001 	mov.w	r0, #1
   814c6:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   814c8:	f04f 0000 	mov.w	r0, #0
}
   814cc:	bd70      	pop	{r4, r5, r6, pc}
   814ce:	bf00      	nop

000814d0 <main>:
	tearDown();
	setUp();
}

int main(void)
{
   814d0:	b530      	push	{r4, r5, lr}
   814d2:	b085      	sub	sp, #20
	/* Initialize the Arduino Due system */
	sysclk_init();
   814d4:	f240 534d 	movw	r3, #1357	; 0x54d
   814d8:	f2c0 0308 	movt	r3, #8
   814dc:	4798      	blx	r3
	board_init();
   814de:	f240 60ed 	movw	r0, #1773	; 0x6ed
   814e2:	f2c0 0008 	movt	r0, #8
   814e6:	4780      	blx	r0
   814e8:	f04f 000b 	mov.w	r0, #11
   814ec:	f640 4441 	movw	r4, #3137	; 0xc41
   814f0:	f2c0 0408 	movt	r4, #8
   814f4:	47a0      	blx	r4
   814f6:	f04f 000c 	mov.w	r0, #12
   814fa:	47a0      	blx	r4
   814fc:	f04f 000d 	mov.w	r0, #13
   81500:	47a0      	blx	r4
   81502:	f04f 000e 	mov.w	r0, #14
   81506:	47a0      	blx	r4
	/* initialize the I/O-port used for transmitting data to the LCD-shield */
	ioport_init();
	/* Initialize the timer used for delays */
	delay_init();
   81508:	f240 21d9 	movw	r1, #729	; 0x2d9
   8150c:	f2c0 0108 	movt	r1, #8
   81510:	4788      	blx	r1
	LCDInit();
   81512:	f240 4241 	movw	r2, #1089	; 0x441
   81516:	f2c0 0208 	movt	r2, #8
   8151a:	4790      	blx	r2
   8151c:	f04f 0008 	mov.w	r0, #8
   81520:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   81522:	f44f 6500 	mov.w	r5, #2048	; 0x800
   81526:	f2c4 050e 	movt	r5, #16398	; 0x400e
   8152a:	f640 1398 	movw	r3, #2456	; 0x998
   8152e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81532:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   81534:	f640 1094 	movw	r0, #2452	; 0x994
   81538:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8153c:	f241 31e9 	movw	r1, #5097	; 0x13e9
   81540:	f2c0 0108 	movt	r1, #8
   81544:	6001      	str	r1, [r0, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   81546:	f640 1390 	movw	r3, #2448	; 0x990
   8154a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8154e:	f241 3201 	movw	r2, #4865	; 0x1301
   81552:	f2c0 0208 	movt	r2, #8
   81556:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   81558:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   8155c:	f2c0 5001 	movt	r0, #1281	; 0x501
   81560:	9000      	str	r0, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
   81562:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   81566:	9101      	str	r1, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
   81568:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8156c:	9302      	str	r3, [sp, #8]
   8156e:	f04f 0008 	mov.w	r0, #8
   81572:	47a0      	blx	r4
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   81574:	4628      	mov	r0, r5
   81576:	4669      	mov	r1, sp
   81578:	f640 44c5 	movw	r4, #3269	; 0xcc5
   8157c:	f2c0 0408 	movt	r4, #8
   81580:	47a0      	blx	r4
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81582:	f240 0510 	movw	r5, #16
   81586:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8158a:	682a      	ldr	r2, [r5, #0]
   8158c:	6890      	ldr	r0, [r2, #8]
   8158e:	f04f 0100 	mov.w	r1, #0
   81592:	f642 1431 	movw	r4, #10545	; 0x2931
   81596:	f2c0 0408 	movt	r4, #8
   8159a:	47a0      	blx	r4
	setbuf(stdin, NULL);
   8159c:	6828      	ldr	r0, [r5, #0]
   8159e:	6840      	ldr	r0, [r0, #4]
   815a0:	f04f 0100 	mov.w	r1, #0
   815a4:	47a0      	blx	r4
	
	configure_console();
	
	Unity.TestFile = "test/testmyADC.c";
   815a6:	f640 01e0 	movw	r1, #2272	; 0x8e0
   815aa:	f2c2 0107 	movt	r1, #8199	; 0x2007
   815ae:	f643 03b0 	movw	r3, #14512	; 0x38b0
   815b2:	f2c0 0308 	movt	r3, #8
   815b6:	600b      	str	r3, [r1, #0]
	UnityBegin();
   815b8:	f242 52e5 	movw	r2, #9701	; 0x25e5
   815bc:	f2c0 0208 	movt	r2, #8
   815c0:	4790      	blx	r2
	
	// Runs tests
	RUN_TEST(test_ADConverterIsInitialisedCorrectly, 10);
   815c2:	f241 2055 	movw	r0, #4693	; 0x1255
   815c6:	f2c0 0008 	movt	r0, #8
   815ca:	f643 01c4 	movw	r1, #14532	; 0x38c4
   815ce:	f2c0 0108 	movt	r1, #8
   815d2:	f04f 020a 	mov.w	r2, #10
   815d6:	f242 5475 	movw	r4, #9589	; 0x2575
   815da:	f2c0 0408 	movt	r4, #8
   815de:	47a0      	blx	r4
	RUN_TEST(test_CheckIfValueIsNotZero, 20);
   815e0:	f241 20b1 	movw	r0, #4785	; 0x12b1
   815e4:	f2c0 0008 	movt	r0, #8
   815e8:	f643 01ec 	movw	r1, #14572	; 0x38ec
   815ec:	f2c0 0108 	movt	r1, #8
   815f0:	f04f 0214 	mov.w	r2, #20
   815f4:	47a0      	blx	r4
	
	UnityEnd();
   815f6:	f242 50fd 	movw	r0, #9725	; 0x25fd
   815fa:	f2c0 0008 	movt	r0, #8
   815fe:	4780      	blx	r0
	return 0;
}
   81600:	f04f 0000 	mov.w	r0, #0
   81604:	b005      	add	sp, #20
   81606:	bd30      	pop	{r4, r5, pc}

00081608 <UnityPrintNumber>:
}

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumber(const _U_SINT number_to_print)
{
   81608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    _U_SINT divisor = 1;
    _U_SINT next_divisor;
    _U_SINT number = number_to_print;

    if (number < 0)
   8160c:	1e07      	subs	r7, r0, #0
   8160e:	da4b      	bge.n	816a8 <UnityPrintNumber+0xa0>
    {
        UNITY_OUTPUT_CHAR('-');
   81610:	f240 0310 	movw	r3, #16
   81614:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81618:	6818      	ldr	r0, [r3, #0]
   8161a:	6882      	ldr	r2, [r0, #8]
   8161c:	6891      	ldr	r1, [r2, #8]
   8161e:	f101 34ff 	add.w	r4, r1, #4294967295
   81622:	6094      	str	r4, [r2, #8]
   81624:	2c00      	cmp	r4, #0
   81626:	da26      	bge.n	81676 <UnityPrintNumber+0x6e>
   81628:	6882      	ldr	r2, [r0, #8]
   8162a:	6895      	ldr	r5, [r2, #8]
   8162c:	6996      	ldr	r6, [r2, #24]
   8162e:	42b5      	cmp	r5, r6
   81630:	db19      	blt.n	81666 <UnityPrintNumber+0x5e>
   81632:	6810      	ldr	r0, [r2, #0]
   81634:	f04f 022d 	mov.w	r2, #45	; 0x2d
   81638:	7002      	strb	r2, [r0, #0]
   8163a:	f240 0110 	movw	r1, #16
   8163e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81642:	6808      	ldr	r0, [r1, #0]
   81644:	6882      	ldr	r2, [r0, #8]
   81646:	6814      	ldr	r4, [r2, #0]
   81648:	7825      	ldrb	r5, [r4, #0]
   8164a:	2d0a      	cmp	r5, #10
   8164c:	d003      	beq.n	81656 <UnityPrintNumber+0x4e>
   8164e:	f104 0401 	add.w	r4, r4, #1
   81652:	6014      	str	r4, [r2, #0]
   81654:	e01e      	b.n	81694 <UnityPrintNumber+0x8c>
   81656:	f04f 010a 	mov.w	r1, #10
   8165a:	f642 2649 	movw	r6, #10825	; 0x2a49
   8165e:	f2c0 0608 	movt	r6, #8
   81662:	47b0      	blx	r6
   81664:	e016      	b.n	81694 <UnityPrintNumber+0x8c>
   81666:	f04f 012d 	mov.w	r1, #45	; 0x2d
   8166a:	f642 2349 	movw	r3, #10825	; 0x2a49
   8166e:	f2c0 0308 	movt	r3, #8
   81672:	4798      	blx	r3
   81674:	e00e      	b.n	81694 <UnityPrintNumber+0x8c>
   81676:	6880      	ldr	r0, [r0, #8]
   81678:	6805      	ldr	r5, [r0, #0]
   8167a:	f04f 062d 	mov.w	r6, #45	; 0x2d
   8167e:	702e      	strb	r6, [r5, #0]
   81680:	f240 0310 	movw	r3, #16
   81684:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81688:	681a      	ldr	r2, [r3, #0]
   8168a:	6891      	ldr	r1, [r2, #8]
   8168c:	680c      	ldr	r4, [r1, #0]
   8168e:	f104 0401 	add.w	r4, r4, #1
   81692:	600c      	str	r4, [r1, #0]
        number = -number;
   81694:	f1c7 0700 	rsb	r7, r7, #0
   81698:	e006      	b.n	816a8 <UnityPrintNumber+0xa0>
    }

    // figure out initial divisor
    while (number / divisor > 9)
    {
        next_divisor = divisor * 10;
   8169a:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   8169e:	ea4f 0240 	mov.w	r2, r0, lsl #1
        if (next_divisor > divisor)
   816a2:	4294      	cmp	r4, r2
   816a4:	db03      	blt.n	816ae <UnityPrintNumber+0xa6>
   816a6:	e007      	b.n	816b8 <UnityPrintNumber+0xb0>
/// basically do an itoa using as little ram as possible
void UnityPrintNumber(const _U_SINT number_to_print)
{
    _U_SINT divisor = 1;
    _U_SINT next_divisor;
    _U_SINT number = number_to_print;
   816a8:	f04f 0401 	mov.w	r4, #1
   816ac:	e000      	b.n	816b0 <UnityPrintNumber+0xa8>
    // figure out initial divisor
    while (number / divisor > 9)
    {
        next_divisor = divisor * 10;
        if (next_divisor > divisor)
            divisor = next_divisor;
   816ae:	4614      	mov	r4, r2
        UNITY_OUTPUT_CHAR('-');
        number = -number;
    }

    // figure out initial divisor
    while (number / divisor > 9)
   816b0:	fb97 f3f4 	sdiv	r3, r7, r4
   816b4:	2b09      	cmp	r3, #9
   816b6:	dcf0      	bgt.n	8169a <UnityPrintNumber+0x92>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   816b8:	f240 0610 	movw	r6, #16
   816bc:	f2c2 0607 	movt	r6, #8199	; 0x2007
   816c0:	f246 6567 	movw	r5, #26215	; 0x6667
   816c4:	f2c6 6566 	movt	r5, #26214	; 0x6666
   816c8:	f642 2849 	movw	r8, #10825	; 0x2a49
   816cc:	f2c0 0808 	movt	r8, #8
   816d0:	f04f 090a 	mov.w	r9, #10
   816d4:	6830      	ldr	r0, [r6, #0]
   816d6:	6881      	ldr	r1, [r0, #8]
   816d8:	688b      	ldr	r3, [r1, #8]
   816da:	f103 32ff 	add.w	r2, r3, #4294967295
   816de:	608a      	str	r2, [r1, #8]
   816e0:	2a00      	cmp	r2, #0
   816e2:	da32      	bge.n	8174a <UnityPrintNumber+0x142>
   816e4:	6882      	ldr	r2, [r0, #8]
   816e6:	6891      	ldr	r1, [r2, #8]
   816e8:	6993      	ldr	r3, [r2, #24]
   816ea:	4299      	cmp	r1, r3
   816ec:	db1c      	blt.n	81728 <UnityPrintNumber+0x120>
   816ee:	6811      	ldr	r1, [r2, #0]
   816f0:	fb97 f3f4 	sdiv	r3, r7, r4
   816f4:	fb85 2003 	smull	r2, r0, r5, r3
   816f8:	ea4f 72e3 	mov.w	r2, r3, asr #31
   816fc:	ebc2 00a0 	rsb	r0, r2, r0, asr #2
   81700:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   81704:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   81708:	f103 0330 	add.w	r3, r3, #48	; 0x30
   8170c:	700b      	strb	r3, [r1, #0]
   8170e:	6830      	ldr	r0, [r6, #0]
   81710:	6882      	ldr	r2, [r0, #8]
   81712:	6813      	ldr	r3, [r2, #0]
   81714:	7819      	ldrb	r1, [r3, #0]
   81716:	290a      	cmp	r1, #10
   81718:	d003      	beq.n	81722 <UnityPrintNumber+0x11a>
   8171a:	f103 0301 	add.w	r3, r3, #1
   8171e:	6013      	str	r3, [r2, #0]
   81720:	e02a      	b.n	81778 <UnityPrintNumber+0x170>
   81722:	4649      	mov	r1, r9
   81724:	47c0      	blx	r8
   81726:	e027      	b.n	81778 <UnityPrintNumber+0x170>
   81728:	fb97 f3f4 	sdiv	r3, r7, r4
   8172c:	fb85 1e03 	smull	r1, lr, r5, r3
   81730:	ea4f 71e3 	mov.w	r1, r3, asr #31
   81734:	ebc1 01ae 	rsb	r1, r1, lr, asr #2
   81738:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8173c:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
   81740:	f103 0330 	add.w	r3, r3, #48	; 0x30
   81744:	b2d9      	uxtb	r1, r3
   81746:	47c0      	blx	r8
   81748:	e016      	b.n	81778 <UnityPrintNumber+0x170>
   8174a:	6880      	ldr	r0, [r0, #8]
   8174c:	6801      	ldr	r1, [r0, #0]
   8174e:	fb97 f3f4 	sdiv	r3, r7, r4
   81752:	fb85 2003 	smull	r2, r0, r5, r3
   81756:	ea4f 72e3 	mov.w	r2, r3, asr #31
   8175a:	ebc2 00a0 	rsb	r0, r2, r0, asr #2
   8175e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   81762:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   81766:	f103 0330 	add.w	r3, r3, #48	; 0x30
   8176a:	700b      	strb	r3, [r1, #0]
   8176c:	6831      	ldr	r1, [r6, #0]
   8176e:	6888      	ldr	r0, [r1, #8]
   81770:	6802      	ldr	r2, [r0, #0]
   81772:	f102 0201 	add.w	r2, r2, #1
   81776:	6002      	str	r2, [r0, #0]
        divisor /= 10;
   81778:	fb85 1004 	smull	r1, r0, r5, r4
   8177c:	ea4f 74e4 	mov.w	r4, r4, asr #31
   81780:	ebc4 04a0 	rsb	r4, r4, r0, asr #2
    }
    while (divisor > 0);
   81784:	2c00      	cmp	r4, #0
   81786:	dca5      	bgt.n	816d4 <UnityPrintNumber+0xcc>
}
   81788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0008178c <UnityPrintNumberUnsigned>:

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumberUnsigned(const _U_UINT number)
{
   8178c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81790:	4606      	mov	r6, r0
    _U_UINT divisor = 1;
   81792:	f04f 0401 	mov.w	r4, #1
    _U_UINT next_divisor;

    // figure out initial divisor
    while (number / divisor > 9)
   81796:	e006      	b.n	817a6 <UnityPrintNumberUnsigned+0x1a>
    {
        next_divisor = divisor * 10;
   81798:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   8179c:	ea4f 0140 	mov.w	r1, r0, lsl #1
        if (next_divisor > divisor)
   817a0:	428c      	cmp	r4, r1
   817a2:	d204      	bcs.n	817ae <UnityPrintNumberUnsigned+0x22>
            divisor = next_divisor;
   817a4:	460c      	mov	r4, r1
{
    _U_UINT divisor = 1;
    _U_UINT next_divisor;

    // figure out initial divisor
    while (number / divisor > 9)
   817a6:	fbb6 f3f4 	udiv	r3, r6, r4
   817aa:	2b09      	cmp	r3, #9
   817ac:	d8f4      	bhi.n	81798 <UnityPrintNumberUnsigned+0xc>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   817ae:	f240 0710 	movw	r7, #16
   817b2:	f2c2 0707 	movt	r7, #8199	; 0x2007
   817b6:	f64c 45cd 	movw	r5, #52429	; 0xcccd
   817ba:	f6cc 45cc 	movt	r5, #52428	; 0xcccc
   817be:	f642 2849 	movw	r8, #10825	; 0x2a49
   817c2:	f2c0 0808 	movt	r8, #8
   817c6:	f04f 090a 	mov.w	r9, #10
   817ca:	683b      	ldr	r3, [r7, #0]
   817cc:	6898      	ldr	r0, [r3, #8]
   817ce:	6882      	ldr	r2, [r0, #8]
   817d0:	f102 31ff 	add.w	r1, r2, #4294967295
   817d4:	6081      	str	r1, [r0, #8]
   817d6:	2900      	cmp	r1, #0
   817d8:	da2f      	bge.n	8183a <UnityPrintNumberUnsigned+0xae>
   817da:	689a      	ldr	r2, [r3, #8]
   817dc:	6890      	ldr	r0, [r2, #8]
   817de:	6991      	ldr	r1, [r2, #24]
   817e0:	4288      	cmp	r0, r1
   817e2:	db1a      	blt.n	8181a <UnityPrintNumberUnsigned+0x8e>
   817e4:	6811      	ldr	r1, [r2, #0]
   817e6:	fbb6 f3f4 	udiv	r3, r6, r4
   817ea:	fba5 0203 	umull	r0, r2, r5, r3
   817ee:	ea4f 00d2 	mov.w	r0, r2, lsr #3
   817f2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   817f6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   817fa:	f103 0330 	add.w	r3, r3, #48	; 0x30
   817fe:	700b      	strb	r3, [r1, #0]
   81800:	6838      	ldr	r0, [r7, #0]
   81802:	6882      	ldr	r2, [r0, #8]
   81804:	6813      	ldr	r3, [r2, #0]
   81806:	7819      	ldrb	r1, [r3, #0]
   81808:	290a      	cmp	r1, #10
   8180a:	d003      	beq.n	81814 <UnityPrintNumberUnsigned+0x88>
   8180c:	f103 0301 	add.w	r3, r3, #1
   81810:	6013      	str	r3, [r2, #0]
   81812:	e027      	b.n	81864 <UnityPrintNumberUnsigned+0xd8>
   81814:	4649      	mov	r1, r9
   81816:	47c0      	blx	r8
   81818:	e024      	b.n	81864 <UnityPrintNumberUnsigned+0xd8>
   8181a:	fbb6 f1f4 	udiv	r1, r6, r4
   8181e:	fba5 e001 	umull	lr, r0, r5, r1
   81822:	ea4f 00d0 	mov.w	r0, r0, lsr #3
   81826:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8182a:	eba1 0140 	sub.w	r1, r1, r0, lsl #1
   8182e:	f101 0130 	add.w	r1, r1, #48	; 0x30
   81832:	4618      	mov	r0, r3
   81834:	b2c9      	uxtb	r1, r1
   81836:	47c0      	blx	r8
   81838:	e014      	b.n	81864 <UnityPrintNumberUnsigned+0xd8>
   8183a:	689b      	ldr	r3, [r3, #8]
   8183c:	6819      	ldr	r1, [r3, #0]
   8183e:	fbb6 f3f4 	udiv	r3, r6, r4
   81842:	fba5 0203 	umull	r0, r2, r5, r3
   81846:	ea4f 00d2 	mov.w	r0, r2, lsr #3
   8184a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   8184e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   81852:	f103 0330 	add.w	r3, r3, #48	; 0x30
   81856:	700b      	strb	r3, [r1, #0]
   81858:	6839      	ldr	r1, [r7, #0]
   8185a:	6888      	ldr	r0, [r1, #8]
   8185c:	6802      	ldr	r2, [r0, #0]
   8185e:	f102 0201 	add.w	r2, r2, #1
   81862:	6002      	str	r2, [r0, #0]
        divisor /= 10;
   81864:	fba5 3404 	umull	r3, r4, r5, r4
    }
    while (divisor > 0);
   81868:	08e4      	lsrs	r4, r4, #3
   8186a:	d1ae      	bne.n	817ca <UnityPrintNumberUnsigned+0x3e>
}
   8186c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00081870 <UnityPrintNumberHex>:

//-----------------------------------------------
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
   81870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81874:	4606      	mov	r6, r0
   81876:	460c      	mov	r4, r1
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
   81878:	f240 0310 	movw	r3, #16
   8187c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81880:	6818      	ldr	r0, [r3, #0]
   81882:	6882      	ldr	r2, [r0, #8]
   81884:	6891      	ldr	r1, [r2, #8]
   81886:	f101 33ff 	add.w	r3, r1, #4294967295
   8188a:	6093      	str	r3, [r2, #8]
   8188c:	2b00      	cmp	r3, #0
   8188e:	da26      	bge.n	818de <UnityPrintNumberHex+0x6e>
   81890:	6882      	ldr	r2, [r0, #8]
   81892:	6891      	ldr	r1, [r2, #8]
   81894:	6993      	ldr	r3, [r2, #24]
   81896:	4299      	cmp	r1, r3
   81898:	db19      	blt.n	818ce <UnityPrintNumberHex+0x5e>
   8189a:	6810      	ldr	r0, [r2, #0]
   8189c:	f04f 0230 	mov.w	r2, #48	; 0x30
   818a0:	7002      	strb	r2, [r0, #0]
   818a2:	f240 0110 	movw	r1, #16
   818a6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   818aa:	6808      	ldr	r0, [r1, #0]
   818ac:	6882      	ldr	r2, [r0, #8]
   818ae:	6813      	ldr	r3, [r2, #0]
   818b0:	7819      	ldrb	r1, [r3, #0]
   818b2:	290a      	cmp	r1, #10
   818b4:	d003      	beq.n	818be <UnityPrintNumberHex+0x4e>
   818b6:	f103 0301 	add.w	r3, r3, #1
   818ba:	6013      	str	r3, [r2, #0]
   818bc:	e01e      	b.n	818fc <UnityPrintNumberHex+0x8c>
   818be:	f04f 010a 	mov.w	r1, #10
   818c2:	f642 2349 	movw	r3, #10825	; 0x2a49
   818c6:	f2c0 0308 	movt	r3, #8
   818ca:	4798      	blx	r3
   818cc:	e016      	b.n	818fc <UnityPrintNumberHex+0x8c>
   818ce:	f04f 0130 	mov.w	r1, #48	; 0x30
   818d2:	f642 2349 	movw	r3, #10825	; 0x2a49
   818d6:	f2c0 0308 	movt	r3, #8
   818da:	4798      	blx	r3
   818dc:	e00e      	b.n	818fc <UnityPrintNumberHex+0x8c>
   818de:	6880      	ldr	r0, [r0, #8]
   818e0:	6801      	ldr	r1, [r0, #0]
   818e2:	f04f 0230 	mov.w	r2, #48	; 0x30
   818e6:	700a      	strb	r2, [r1, #0]
   818e8:	f240 0310 	movw	r3, #16
   818ec:	f2c2 0307 	movt	r3, #8199	; 0x2007
   818f0:	6818      	ldr	r0, [r3, #0]
   818f2:	6881      	ldr	r1, [r0, #8]
   818f4:	680a      	ldr	r2, [r1, #0]
   818f6:	f102 0201 	add.w	r2, r2, #1
   818fa:	600a      	str	r2, [r1, #0]
    UNITY_OUTPUT_CHAR('x');
   818fc:	f240 0010 	movw	r0, #16
   81900:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81904:	6800      	ldr	r0, [r0, #0]
   81906:	6882      	ldr	r2, [r0, #8]
   81908:	6891      	ldr	r1, [r2, #8]
   8190a:	f101 33ff 	add.w	r3, r1, #4294967295
   8190e:	6093      	str	r3, [r2, #8]
   81910:	2b00      	cmp	r3, #0
   81912:	da28      	bge.n	81966 <UnityPrintNumberHex+0xf6>
   81914:	6882      	ldr	r2, [r0, #8]
   81916:	6891      	ldr	r1, [r2, #8]
   81918:	6993      	ldr	r3, [r2, #24]
   8191a:	4299      	cmp	r1, r3
   8191c:	db19      	blt.n	81952 <UnityPrintNumberHex+0xe2>
   8191e:	6810      	ldr	r0, [r2, #0]
   81920:	f04f 0278 	mov.w	r2, #120	; 0x78
   81924:	7002      	strb	r2, [r0, #0]
   81926:	f240 0110 	movw	r1, #16
   8192a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8192e:	6808      	ldr	r0, [r1, #0]
   81930:	6882      	ldr	r2, [r0, #8]
   81932:	6813      	ldr	r3, [r2, #0]
   81934:	7819      	ldrb	r1, [r3, #0]
   81936:	290a      	cmp	r1, #10
   81938:	d003      	beq.n	81942 <UnityPrintNumberHex+0xd2>
   8193a:	f103 0301 	add.w	r3, r3, #1
   8193e:	6013      	str	r3, [r2, #0]
   81940:	e00e      	b.n	81960 <UnityPrintNumberHex+0xf0>
   81942:	f04f 010a 	mov.w	r1, #10
   81946:	f642 2349 	movw	r3, #10825	; 0x2a49
   8194a:	f2c0 0308 	movt	r3, #8
   8194e:	4798      	blx	r3
   81950:	e006      	b.n	81960 <UnityPrintNumberHex+0xf0>
   81952:	f04f 0178 	mov.w	r1, #120	; 0x78
   81956:	f642 2349 	movw	r3, #10825	; 0x2a49
   8195a:	f2c0 0308 	movt	r3, #8
   8195e:	4798      	blx	r3

    while (nibbles > 0)
   81960:	b98c      	cbnz	r4, 81986 <UnityPrintNumberHex+0x116>
   81962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');
   81966:	6880      	ldr	r0, [r0, #8]
   81968:	6801      	ldr	r1, [r0, #0]
   8196a:	f04f 0278 	mov.w	r2, #120	; 0x78
   8196e:	700a      	strb	r2, [r1, #0]
   81970:	f240 0310 	movw	r3, #16
   81974:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81978:	6818      	ldr	r0, [r3, #0]
   8197a:	6881      	ldr	r1, [r0, #8]
   8197c:	680a      	ldr	r2, [r1, #0]
   8197e:	f102 0201 	add.w	r2, r2, #1
   81982:	600a      	str	r2, [r1, #0]
   81984:	e7ec      	b.n	81960 <UnityPrintNumberHex+0xf0>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   81986:	f240 0510 	movw	r5, #16
   8198a:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8198e:	f642 2749 	movw	r7, #10825	; 0x2a49
   81992:	46b9      	mov	r9, r7
   81994:	f2c0 0908 	movt	r9, #8
   81998:	f04f 080a 	mov.w	r8, #10
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
    {
        nibble = (number >> (--nibbles << 2)) & 0x0000000F;
   8199c:	f104 34ff 	add.w	r4, r4, #4294967295
   819a0:	b2e4      	uxtb	r4, r4
   819a2:	ea4f 0084 	mov.w	r0, r4, lsl #2
   819a6:	fa26 f200 	lsr.w	r2, r6, r0
   819aa:	f002 030f 	and.w	r3, r2, #15
        if (nibble <= 9)
   819ae:	2b09      	cmp	r3, #9
   819b0:	d82d      	bhi.n	81a0e <UnityPrintNumberHex+0x19e>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
   819b2:	6828      	ldr	r0, [r5, #0]
   819b4:	6881      	ldr	r1, [r0, #8]
   819b6:	688a      	ldr	r2, [r1, #8]
   819b8:	f102 32ff 	add.w	r2, r2, #4294967295
   819bc:	608a      	str	r2, [r1, #8]
   819be:	2a00      	cmp	r2, #0
   819c0:	da19      	bge.n	819f6 <UnityPrintNumberHex+0x186>
   819c2:	6882      	ldr	r2, [r0, #8]
   819c4:	6891      	ldr	r1, [r2, #8]
   819c6:	6997      	ldr	r7, [r2, #24]
   819c8:	42b9      	cmp	r1, r7
   819ca:	db10      	blt.n	819ee <UnityPrintNumberHex+0x17e>
   819cc:	6810      	ldr	r0, [r2, #0]
   819ce:	f103 0330 	add.w	r3, r3, #48	; 0x30
   819d2:	7003      	strb	r3, [r0, #0]
   819d4:	6828      	ldr	r0, [r5, #0]
   819d6:	6882      	ldr	r2, [r0, #8]
   819d8:	6813      	ldr	r3, [r2, #0]
   819da:	7819      	ldrb	r1, [r3, #0]
   819dc:	290a      	cmp	r1, #10
   819de:	d003      	beq.n	819e8 <UnityPrintNumberHex+0x178>
   819e0:	f103 0301 	add.w	r3, r3, #1
   819e4:	6013      	str	r3, [r2, #0]
   819e6:	e03f      	b.n	81a68 <UnityPrintNumberHex+0x1f8>
   819e8:	4641      	mov	r1, r8
   819ea:	47c8      	blx	r9
   819ec:	e03c      	b.n	81a68 <UnityPrintNumberHex+0x1f8>
   819ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
   819f2:	47c8      	blx	r9
   819f4:	e038      	b.n	81a68 <UnityPrintNumberHex+0x1f8>
   819f6:	6880      	ldr	r0, [r0, #8]
   819f8:	6801      	ldr	r1, [r0, #0]
   819fa:	f103 0330 	add.w	r3, r3, #48	; 0x30
   819fe:	700b      	strb	r3, [r1, #0]
   81a00:	682b      	ldr	r3, [r5, #0]
   81a02:	6898      	ldr	r0, [r3, #8]
   81a04:	6802      	ldr	r2, [r0, #0]
   81a06:	f102 0201 	add.w	r2, r2, #1
   81a0a:	6002      	str	r2, [r0, #0]
   81a0c:	e02c      	b.n	81a68 <UnityPrintNumberHex+0x1f8>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   81a0e:	6828      	ldr	r0, [r5, #0]
   81a10:	6881      	ldr	r1, [r0, #8]
   81a12:	688a      	ldr	r2, [r1, #8]
   81a14:	f102 32ff 	add.w	r2, r2, #4294967295
   81a18:	608a      	str	r2, [r1, #8]
   81a1a:	2a00      	cmp	r2, #0
   81a1c:	da19      	bge.n	81a52 <UnityPrintNumberHex+0x1e2>
   81a1e:	6882      	ldr	r2, [r0, #8]
   81a20:	6891      	ldr	r1, [r2, #8]
   81a22:	6997      	ldr	r7, [r2, #24]
   81a24:	42b9      	cmp	r1, r7
   81a26:	db10      	blt.n	81a4a <UnityPrintNumberHex+0x1da>
   81a28:	6810      	ldr	r0, [r2, #0]
   81a2a:	f103 0337 	add.w	r3, r3, #55	; 0x37
   81a2e:	7003      	strb	r3, [r0, #0]
   81a30:	6828      	ldr	r0, [r5, #0]
   81a32:	6882      	ldr	r2, [r0, #8]
   81a34:	6813      	ldr	r3, [r2, #0]
   81a36:	7819      	ldrb	r1, [r3, #0]
   81a38:	290a      	cmp	r1, #10
   81a3a:	d003      	beq.n	81a44 <UnityPrintNumberHex+0x1d4>
   81a3c:	f103 0301 	add.w	r3, r3, #1
   81a40:	6013      	str	r3, [r2, #0]
   81a42:	e011      	b.n	81a68 <UnityPrintNumberHex+0x1f8>
   81a44:	4641      	mov	r1, r8
   81a46:	47c8      	blx	r9
   81a48:	e00e      	b.n	81a68 <UnityPrintNumberHex+0x1f8>
   81a4a:	f103 0137 	add.w	r1, r3, #55	; 0x37
   81a4e:	47c8      	blx	r9
   81a50:	e00a      	b.n	81a68 <UnityPrintNumberHex+0x1f8>
   81a52:	6880      	ldr	r0, [r0, #8]
   81a54:	6801      	ldr	r1, [r0, #0]
   81a56:	f103 0337 	add.w	r3, r3, #55	; 0x37
   81a5a:	700b      	strb	r3, [r1, #0]
   81a5c:	682b      	ldr	r3, [r5, #0]
   81a5e:	6898      	ldr	r0, [r3, #8]
   81a60:	6802      	ldr	r2, [r0, #0]
   81a62:	f102 0201 	add.w	r2, r2, #1
   81a66:	6002      	str	r2, [r0, #0]
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
   81a68:	2c00      	cmp	r4, #0
   81a6a:	d197      	bne.n	8199c <UnityPrintNumberHex+0x12c>
   81a6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00081a70 <UnityPrintNumberByStyle>:
    }
}

//-----------------------------------------------
void UnityPrintNumberByStyle(const _U_SINT number, const UNITY_DISPLAY_STYLE_T style)
{
   81a70:	b508      	push	{r3, lr}
    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
   81a72:	f011 0f10 	tst.w	r1, #16
   81a76:	d005      	beq.n	81a84 <UnityPrintNumberByStyle+0x14>
    {
        UnityPrintNumber(number);
   81a78:	f241 6309 	movw	r3, #5641	; 0x1609
   81a7c:	f2c0 0308 	movt	r3, #8
   81a80:	4798      	blx	r3
   81a82:	bd08      	pop	{r3, pc}
    }
    else if ((style & UNITY_DISPLAY_RANGE_UINT) == UNITY_DISPLAY_RANGE_UINT)
   81a84:	f011 0f20 	tst.w	r1, #32
   81a88:	d010      	beq.n	81aac <UnityPrintNumberByStyle+0x3c>
    {
        UnityPrintNumberUnsigned(  (_U_UINT)number  &  UnitySizeMask[((_U_UINT)style & (_U_UINT)0x0F) - 1]  );
   81a8a:	f001 020f 	and.w	r2, r1, #15
   81a8e:	f102 31ff 	add.w	r1, r2, #4294967295
   81a92:	f643 2360 	movw	r3, #14944	; 0x3a60
   81a96:	f2c0 0308 	movt	r3, #8
   81a9a:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   81a9e:	4010      	ands	r0, r2
   81aa0:	f241 718d 	movw	r1, #6029	; 0x178d
   81aa4:	f2c0 0108 	movt	r1, #8
   81aa8:	4788      	blx	r1
   81aaa:	bd08      	pop	{r3, pc}
    }
    else
    {
        UnityPrintNumberHex((_U_UINT)number, (style & 0x000F) << 1);
   81aac:	f001 010f 	and.w	r1, r1, #15
   81ab0:	ea4f 0141 	mov.w	r1, r1, lsl #1
   81ab4:	f641 0371 	movw	r3, #6257	; 0x1871
   81ab8:	f2c0 0308 	movt	r3, #8
   81abc:	4798      	blx	r3
   81abe:	bd08      	pop	{r3, pc}

00081ac0 <UnityPrint>:
//-----------------------------------------------
// Pretty Printers & Test Result Output Handlers
//-----------------------------------------------

void UnityPrint(const char* string)
{
   81ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const char* pch = string;

    if (pch != NULL)
   81ac2:	4604      	mov	r4, r0
   81ac4:	2800      	cmp	r0, #0
   81ac6:	f000 813c 	beq.w	81d42 <UnityPrint+0x282>
    {
        while (*pch)
   81aca:	7803      	ldrb	r3, [r0, #0]
   81acc:	2b00      	cmp	r3, #0
   81ace:	f000 8138 	beq.w	81d42 <UnityPrint+0x282>

//-----------------------------------------------
// Pretty Printers & Test Result Output Handlers
//-----------------------------------------------

void UnityPrint(const char* string)
   81ad2:	f104 0401 	add.w	r4, r4, #1
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   81ad6:	f240 0510 	movw	r5, #16
   81ada:	f2c2 0507 	movt	r5, #8199	; 0x2007
                UnityPrintNumberHex((_U_SINT)*pch, 2);
   81ade:	f641 0671 	movw	r6, #6257	; 0x1871
   81ae2:	f2c0 0608 	movt	r6, #8
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   81ae6:	f642 2749 	movw	r7, #10825	; 0x2a49
   81aea:	f2c0 0708 	movt	r7, #8
    if (pch != NULL)
    {
        while (*pch)
        {
            // printable characters plus CR & LF are printed
            if ((*pch <= 126) && (*pch >= 32))
   81aee:	f1a3 0220 	sub.w	r2, r3, #32
   81af2:	b2d0      	uxtb	r0, r2
   81af4:	285e      	cmp	r0, #94	; 0x5e
   81af6:	d82e      	bhi.n	81b56 <UnityPrint+0x96>
            {
                UNITY_OUTPUT_CHAR(*pch);
   81af8:	6828      	ldr	r0, [r5, #0]
   81afa:	6882      	ldr	r2, [r0, #8]
   81afc:	6893      	ldr	r3, [r2, #8]
   81afe:	f103 31ff 	add.w	r1, r3, #4294967295
   81b02:	6091      	str	r1, [r2, #8]
   81b04:	2900      	cmp	r1, #0
   81b06:	da1a      	bge.n	81b3e <UnityPrint+0x7e>
   81b08:	6882      	ldr	r2, [r0, #8]
   81b0a:	6891      	ldr	r1, [r2, #8]
   81b0c:	6993      	ldr	r3, [r2, #24]
   81b0e:	4299      	cmp	r1, r3
   81b10:	db11      	blt.n	81b36 <UnityPrint+0x76>
   81b12:	6810      	ldr	r0, [r2, #0]
   81b14:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   81b18:	7002      	strb	r2, [r0, #0]
   81b1a:	6828      	ldr	r0, [r5, #0]
   81b1c:	6882      	ldr	r2, [r0, #8]
   81b1e:	6813      	ldr	r3, [r2, #0]
   81b20:	7819      	ldrb	r1, [r3, #0]
   81b22:	290a      	cmp	r1, #10
   81b24:	d003      	beq.n	81b2e <UnityPrint+0x6e>
   81b26:	f103 0301 	add.w	r3, r3, #1
   81b2a:	6013      	str	r3, [r2, #0]
   81b2c:	e104      	b.n	81d38 <UnityPrint+0x278>
   81b2e:	f04f 010a 	mov.w	r1, #10
   81b32:	47b8      	blx	r7
   81b34:	e100      	b.n	81d38 <UnityPrint+0x278>
   81b36:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   81b3a:	47b8      	blx	r7
   81b3c:	e0fc      	b.n	81d38 <UnityPrint+0x278>
   81b3e:	6880      	ldr	r0, [r0, #8]
   81b40:	6803      	ldr	r3, [r0, #0]
   81b42:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   81b46:	701a      	strb	r2, [r3, #0]
   81b48:	6829      	ldr	r1, [r5, #0]
   81b4a:	6888      	ldr	r0, [r1, #8]
   81b4c:	6803      	ldr	r3, [r0, #0]
   81b4e:	f103 0301 	add.w	r3, r3, #1
   81b52:	6003      	str	r3, [r0, #0]
   81b54:	e0f0      	b.n	81d38 <UnityPrint+0x278>
            }
            //write escaped carriage returns
            else if (*pch == 13)
   81b56:	2b0d      	cmp	r3, #13
   81b58:	d15c      	bne.n	81c14 <UnityPrint+0x154>
            {
                UNITY_OUTPUT_CHAR('\\');
   81b5a:	6828      	ldr	r0, [r5, #0]
   81b5c:	6882      	ldr	r2, [r0, #8]
   81b5e:	6893      	ldr	r3, [r2, #8]
   81b60:	f103 31ff 	add.w	r1, r3, #4294967295
   81b64:	6091      	str	r1, [r2, #8]
   81b66:	2900      	cmp	r1, #0
   81b68:	da1a      	bge.n	81ba0 <UnityPrint+0xe0>
   81b6a:	6882      	ldr	r2, [r0, #8]
   81b6c:	6891      	ldr	r1, [r2, #8]
   81b6e:	6993      	ldr	r3, [r2, #24]
   81b70:	4299      	cmp	r1, r3
   81b72:	db11      	blt.n	81b98 <UnityPrint+0xd8>
   81b74:	6810      	ldr	r0, [r2, #0]
   81b76:	f04f 025c 	mov.w	r2, #92	; 0x5c
   81b7a:	7002      	strb	r2, [r0, #0]
   81b7c:	6828      	ldr	r0, [r5, #0]
   81b7e:	6882      	ldr	r2, [r0, #8]
   81b80:	6813      	ldr	r3, [r2, #0]
   81b82:	7819      	ldrb	r1, [r3, #0]
   81b84:	290a      	cmp	r1, #10
   81b86:	d003      	beq.n	81b90 <UnityPrint+0xd0>
   81b88:	f103 0301 	add.w	r3, r3, #1
   81b8c:	6013      	str	r3, [r2, #0]
   81b8e:	e012      	b.n	81bb6 <UnityPrint+0xf6>
   81b90:	f04f 010a 	mov.w	r1, #10
   81b94:	47b8      	blx	r7
   81b96:	e00e      	b.n	81bb6 <UnityPrint+0xf6>
   81b98:	f04f 015c 	mov.w	r1, #92	; 0x5c
   81b9c:	47b8      	blx	r7
   81b9e:	e00a      	b.n	81bb6 <UnityPrint+0xf6>
   81ba0:	6880      	ldr	r0, [r0, #8]
   81ba2:	6803      	ldr	r3, [r0, #0]
   81ba4:	f04f 025c 	mov.w	r2, #92	; 0x5c
   81ba8:	701a      	strb	r2, [r3, #0]
   81baa:	6829      	ldr	r1, [r5, #0]
   81bac:	6888      	ldr	r0, [r1, #8]
   81bae:	6803      	ldr	r3, [r0, #0]
   81bb0:	f103 0301 	add.w	r3, r3, #1
   81bb4:	6003      	str	r3, [r0, #0]
                UNITY_OUTPUT_CHAR('r');
   81bb6:	6828      	ldr	r0, [r5, #0]
   81bb8:	6882      	ldr	r2, [r0, #8]
   81bba:	6893      	ldr	r3, [r2, #8]
   81bbc:	f103 31ff 	add.w	r1, r3, #4294967295
   81bc0:	6091      	str	r1, [r2, #8]
   81bc2:	2900      	cmp	r1, #0
   81bc4:	da1a      	bge.n	81bfc <UnityPrint+0x13c>
   81bc6:	6882      	ldr	r2, [r0, #8]
   81bc8:	6891      	ldr	r1, [r2, #8]
   81bca:	6993      	ldr	r3, [r2, #24]
   81bcc:	4299      	cmp	r1, r3
   81bce:	db11      	blt.n	81bf4 <UnityPrint+0x134>
   81bd0:	6810      	ldr	r0, [r2, #0]
   81bd2:	f04f 0272 	mov.w	r2, #114	; 0x72
   81bd6:	7002      	strb	r2, [r0, #0]
   81bd8:	6828      	ldr	r0, [r5, #0]
   81bda:	6882      	ldr	r2, [r0, #8]
   81bdc:	6813      	ldr	r3, [r2, #0]
   81bde:	7819      	ldrb	r1, [r3, #0]
   81be0:	290a      	cmp	r1, #10
   81be2:	d003      	beq.n	81bec <UnityPrint+0x12c>
   81be4:	f103 0301 	add.w	r3, r3, #1
   81be8:	6013      	str	r3, [r2, #0]
   81bea:	e0a5      	b.n	81d38 <UnityPrint+0x278>
   81bec:	f04f 010a 	mov.w	r1, #10
   81bf0:	47b8      	blx	r7
   81bf2:	e0a1      	b.n	81d38 <UnityPrint+0x278>
   81bf4:	f04f 0172 	mov.w	r1, #114	; 0x72
   81bf8:	47b8      	blx	r7
   81bfa:	e09d      	b.n	81d38 <UnityPrint+0x278>
   81bfc:	6880      	ldr	r0, [r0, #8]
   81bfe:	6803      	ldr	r3, [r0, #0]
   81c00:	f04f 0272 	mov.w	r2, #114	; 0x72
   81c04:	701a      	strb	r2, [r3, #0]
   81c06:	6829      	ldr	r1, [r5, #0]
   81c08:	6888      	ldr	r0, [r1, #8]
   81c0a:	6803      	ldr	r3, [r0, #0]
   81c0c:	f103 0301 	add.w	r3, r3, #1
   81c10:	6003      	str	r3, [r0, #0]
   81c12:	e091      	b.n	81d38 <UnityPrint+0x278>
            }
            //write escaped line feeds
            else if (*pch == 10)
   81c14:	2b0a      	cmp	r3, #10
   81c16:	d15c      	bne.n	81cd2 <UnityPrint+0x212>
            {
                UNITY_OUTPUT_CHAR('\\');
   81c18:	6828      	ldr	r0, [r5, #0]
   81c1a:	6882      	ldr	r2, [r0, #8]
   81c1c:	6893      	ldr	r3, [r2, #8]
   81c1e:	f103 31ff 	add.w	r1, r3, #4294967295
   81c22:	6091      	str	r1, [r2, #8]
   81c24:	2900      	cmp	r1, #0
   81c26:	da1a      	bge.n	81c5e <UnityPrint+0x19e>
   81c28:	6882      	ldr	r2, [r0, #8]
   81c2a:	6891      	ldr	r1, [r2, #8]
   81c2c:	6993      	ldr	r3, [r2, #24]
   81c2e:	4299      	cmp	r1, r3
   81c30:	db11      	blt.n	81c56 <UnityPrint+0x196>
   81c32:	6810      	ldr	r0, [r2, #0]
   81c34:	f04f 025c 	mov.w	r2, #92	; 0x5c
   81c38:	7002      	strb	r2, [r0, #0]
   81c3a:	6828      	ldr	r0, [r5, #0]
   81c3c:	6882      	ldr	r2, [r0, #8]
   81c3e:	6813      	ldr	r3, [r2, #0]
   81c40:	7819      	ldrb	r1, [r3, #0]
   81c42:	290a      	cmp	r1, #10
   81c44:	d003      	beq.n	81c4e <UnityPrint+0x18e>
   81c46:	f103 0301 	add.w	r3, r3, #1
   81c4a:	6013      	str	r3, [r2, #0]
   81c4c:	e012      	b.n	81c74 <UnityPrint+0x1b4>
   81c4e:	f04f 010a 	mov.w	r1, #10
   81c52:	47b8      	blx	r7
   81c54:	e00e      	b.n	81c74 <UnityPrint+0x1b4>
   81c56:	f04f 015c 	mov.w	r1, #92	; 0x5c
   81c5a:	47b8      	blx	r7
   81c5c:	e00a      	b.n	81c74 <UnityPrint+0x1b4>
   81c5e:	6880      	ldr	r0, [r0, #8]
   81c60:	6803      	ldr	r3, [r0, #0]
   81c62:	f04f 025c 	mov.w	r2, #92	; 0x5c
   81c66:	701a      	strb	r2, [r3, #0]
   81c68:	6829      	ldr	r1, [r5, #0]
   81c6a:	6888      	ldr	r0, [r1, #8]
   81c6c:	6803      	ldr	r3, [r0, #0]
   81c6e:	f103 0301 	add.w	r3, r3, #1
   81c72:	6003      	str	r3, [r0, #0]
                UNITY_OUTPUT_CHAR('n');
   81c74:	6828      	ldr	r0, [r5, #0]
   81c76:	6882      	ldr	r2, [r0, #8]
   81c78:	6893      	ldr	r3, [r2, #8]
   81c7a:	f103 31ff 	add.w	r1, r3, #4294967295
   81c7e:	6091      	str	r1, [r2, #8]
   81c80:	2900      	cmp	r1, #0
   81c82:	da1a      	bge.n	81cba <UnityPrint+0x1fa>
   81c84:	6882      	ldr	r2, [r0, #8]
   81c86:	6891      	ldr	r1, [r2, #8]
   81c88:	6993      	ldr	r3, [r2, #24]
   81c8a:	4299      	cmp	r1, r3
   81c8c:	db11      	blt.n	81cb2 <UnityPrint+0x1f2>
   81c8e:	6810      	ldr	r0, [r2, #0]
   81c90:	f04f 026e 	mov.w	r2, #110	; 0x6e
   81c94:	7002      	strb	r2, [r0, #0]
   81c96:	6828      	ldr	r0, [r5, #0]
   81c98:	6882      	ldr	r2, [r0, #8]
   81c9a:	6813      	ldr	r3, [r2, #0]
   81c9c:	7819      	ldrb	r1, [r3, #0]
   81c9e:	290a      	cmp	r1, #10
   81ca0:	d003      	beq.n	81caa <UnityPrint+0x1ea>
   81ca2:	f103 0301 	add.w	r3, r3, #1
   81ca6:	6013      	str	r3, [r2, #0]
   81ca8:	e046      	b.n	81d38 <UnityPrint+0x278>
   81caa:	f04f 010a 	mov.w	r1, #10
   81cae:	47b8      	blx	r7
   81cb0:	e042      	b.n	81d38 <UnityPrint+0x278>
   81cb2:	f04f 016e 	mov.w	r1, #110	; 0x6e
   81cb6:	47b8      	blx	r7
   81cb8:	e03e      	b.n	81d38 <UnityPrint+0x278>
   81cba:	6880      	ldr	r0, [r0, #8]
   81cbc:	6803      	ldr	r3, [r0, #0]
   81cbe:	f04f 026e 	mov.w	r2, #110	; 0x6e
   81cc2:	701a      	strb	r2, [r3, #0]
   81cc4:	6829      	ldr	r1, [r5, #0]
   81cc6:	6888      	ldr	r0, [r1, #8]
   81cc8:	6803      	ldr	r3, [r0, #0]
   81cca:	f103 0301 	add.w	r3, r3, #1
   81cce:	6003      	str	r3, [r0, #0]
   81cd0:	e032      	b.n	81d38 <UnityPrint+0x278>
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   81cd2:	6828      	ldr	r0, [r5, #0]
   81cd4:	6881      	ldr	r1, [r0, #8]
   81cd6:	688b      	ldr	r3, [r1, #8]
   81cd8:	f103 32ff 	add.w	r2, r3, #4294967295
   81cdc:	608a      	str	r2, [r1, #8]
   81cde:	2a00      	cmp	r2, #0
   81ce0:	da1a      	bge.n	81d18 <UnityPrint+0x258>
   81ce2:	6882      	ldr	r2, [r0, #8]
   81ce4:	6891      	ldr	r1, [r2, #8]
   81ce6:	6993      	ldr	r3, [r2, #24]
   81ce8:	4299      	cmp	r1, r3
   81cea:	db11      	blt.n	81d10 <UnityPrint+0x250>
   81cec:	6810      	ldr	r0, [r2, #0]
   81cee:	f04f 025c 	mov.w	r2, #92	; 0x5c
   81cf2:	7002      	strb	r2, [r0, #0]
   81cf4:	6828      	ldr	r0, [r5, #0]
   81cf6:	6882      	ldr	r2, [r0, #8]
   81cf8:	6813      	ldr	r3, [r2, #0]
   81cfa:	7819      	ldrb	r1, [r3, #0]
   81cfc:	290a      	cmp	r1, #10
   81cfe:	d003      	beq.n	81d08 <UnityPrint+0x248>
   81d00:	f103 0301 	add.w	r3, r3, #1
   81d04:	6013      	str	r3, [r2, #0]
   81d06:	e012      	b.n	81d2e <UnityPrint+0x26e>
   81d08:	f04f 010a 	mov.w	r1, #10
   81d0c:	47b8      	blx	r7
   81d0e:	e00e      	b.n	81d2e <UnityPrint+0x26e>
   81d10:	f04f 015c 	mov.w	r1, #92	; 0x5c
   81d14:	47b8      	blx	r7
   81d16:	e00a      	b.n	81d2e <UnityPrint+0x26e>
   81d18:	6880      	ldr	r0, [r0, #8]
   81d1a:	6801      	ldr	r1, [r0, #0]
   81d1c:	f04f 035c 	mov.w	r3, #92	; 0x5c
   81d20:	700b      	strb	r3, [r1, #0]
   81d22:	682a      	ldr	r2, [r5, #0]
   81d24:	6890      	ldr	r0, [r2, #8]
   81d26:	6801      	ldr	r1, [r0, #0]
   81d28:	f101 0101 	add.w	r1, r1, #1
   81d2c:	6001      	str	r1, [r0, #0]
                UnityPrintNumberHex((_U_SINT)*pch, 2);
   81d2e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   81d32:	f04f 0102 	mov.w	r1, #2
   81d36:	47b0      	blx	r6
{
    const char* pch = string;

    if (pch != NULL)
    {
        while (*pch)
   81d38:	f814 3b01 	ldrb.w	r3, [r4], #1
   81d3c:	2b00      	cmp	r3, #0
   81d3e:	f47f aed6 	bne.w	81aee <UnityPrint+0x2e>
   81d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00081d44 <UnityPrintMask>:
    }
}

//-----------------------------------------------
void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
{
   81d44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81d48:	4607      	mov	r7, r0
   81d4a:	4688      	mov	r8, r1
   81d4c:	f04f 0520 	mov.w	r5, #32
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
   81d50:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
                UNITY_OUTPUT_CHAR('0');
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
   81d54:	f240 0610 	movw	r6, #16
   81d58:	f2c2 0607 	movt	r6, #8199	; 0x2007
   81d5c:	f04f 0958 	mov.w	r9, #88	; 0x58
   81d60:	f642 2a49 	movw	sl, #10825	; 0x2a49
   81d64:	f2c0 0a08 	movt	sl, #8
   81d68:	f04f 0b0a 	mov.w	fp, #10
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
    _US32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
    {
        if (current_bit & mask)
   81d6c:	423c      	tst	r4, r7
   81d6e:	d05e      	beq.n	81e2e <UnityPrintMask+0xea>
        {
            if (current_bit & number)
   81d70:	ea14 0f08 	tst.w	r4, r8
   81d74:	d02d      	beq.n	81dd2 <UnityPrintMask+0x8e>
            {
                UNITY_OUTPUT_CHAR('1');
   81d76:	6830      	ldr	r0, [r6, #0]
   81d78:	6882      	ldr	r2, [r0, #8]
   81d7a:	6893      	ldr	r3, [r2, #8]
   81d7c:	f103 31ff 	add.w	r1, r3, #4294967295
   81d80:	6091      	str	r1, [r2, #8]
   81d82:	2900      	cmp	r1, #0
   81d84:	da19      	bge.n	81dba <UnityPrintMask+0x76>
   81d86:	6882      	ldr	r2, [r0, #8]
   81d88:	6891      	ldr	r1, [r2, #8]
   81d8a:	6993      	ldr	r3, [r2, #24]
   81d8c:	4299      	cmp	r1, r3
   81d8e:	db10      	blt.n	81db2 <UnityPrintMask+0x6e>
   81d90:	6810      	ldr	r0, [r2, #0]
   81d92:	f04f 0231 	mov.w	r2, #49	; 0x31
   81d96:	7002      	strb	r2, [r0, #0]
   81d98:	6830      	ldr	r0, [r6, #0]
   81d9a:	6882      	ldr	r2, [r0, #8]
   81d9c:	6813      	ldr	r3, [r2, #0]
   81d9e:	7819      	ldrb	r1, [r3, #0]
   81da0:	290a      	cmp	r1, #10
   81da2:	d003      	beq.n	81dac <UnityPrintMask+0x68>
   81da4:	f103 0301 	add.w	r3, r3, #1
   81da8:	6013      	str	r3, [r2, #0]
   81daa:	e06a      	b.n	81e82 <UnityPrintMask+0x13e>
   81dac:	4659      	mov	r1, fp
   81dae:	47d0      	blx	sl
   81db0:	e067      	b.n	81e82 <UnityPrintMask+0x13e>
   81db2:	f04f 0131 	mov.w	r1, #49	; 0x31
   81db6:	47d0      	blx	sl
   81db8:	e063      	b.n	81e82 <UnityPrintMask+0x13e>
   81dba:	6880      	ldr	r0, [r0, #8]
   81dbc:	6803      	ldr	r3, [r0, #0]
   81dbe:	f04f 0231 	mov.w	r2, #49	; 0x31
   81dc2:	701a      	strb	r2, [r3, #0]
   81dc4:	6831      	ldr	r1, [r6, #0]
   81dc6:	6888      	ldr	r0, [r1, #8]
   81dc8:	6803      	ldr	r3, [r0, #0]
   81dca:	f103 0301 	add.w	r3, r3, #1
   81dce:	6003      	str	r3, [r0, #0]
   81dd0:	e057      	b.n	81e82 <UnityPrintMask+0x13e>
            }
            else
            {
                UNITY_OUTPUT_CHAR('0');
   81dd2:	6830      	ldr	r0, [r6, #0]
   81dd4:	6882      	ldr	r2, [r0, #8]
   81dd6:	6893      	ldr	r3, [r2, #8]
   81dd8:	f103 31ff 	add.w	r1, r3, #4294967295
   81ddc:	6091      	str	r1, [r2, #8]
   81dde:	2900      	cmp	r1, #0
   81de0:	da19      	bge.n	81e16 <UnityPrintMask+0xd2>
   81de2:	6882      	ldr	r2, [r0, #8]
   81de4:	6891      	ldr	r1, [r2, #8]
   81de6:	6993      	ldr	r3, [r2, #24]
   81de8:	4299      	cmp	r1, r3
   81dea:	db10      	blt.n	81e0e <UnityPrintMask+0xca>
   81dec:	6810      	ldr	r0, [r2, #0]
   81dee:	f04f 0230 	mov.w	r2, #48	; 0x30
   81df2:	7002      	strb	r2, [r0, #0]
   81df4:	6830      	ldr	r0, [r6, #0]
   81df6:	6882      	ldr	r2, [r0, #8]
   81df8:	6813      	ldr	r3, [r2, #0]
   81dfa:	7819      	ldrb	r1, [r3, #0]
   81dfc:	290a      	cmp	r1, #10
   81dfe:	d003      	beq.n	81e08 <UnityPrintMask+0xc4>
   81e00:	f103 0301 	add.w	r3, r3, #1
   81e04:	6013      	str	r3, [r2, #0]
   81e06:	e03c      	b.n	81e82 <UnityPrintMask+0x13e>
   81e08:	4659      	mov	r1, fp
   81e0a:	47d0      	blx	sl
   81e0c:	e039      	b.n	81e82 <UnityPrintMask+0x13e>
   81e0e:	f04f 0130 	mov.w	r1, #48	; 0x30
   81e12:	47d0      	blx	sl
   81e14:	e035      	b.n	81e82 <UnityPrintMask+0x13e>
   81e16:	6880      	ldr	r0, [r0, #8]
   81e18:	6803      	ldr	r3, [r0, #0]
   81e1a:	f04f 0230 	mov.w	r2, #48	; 0x30
   81e1e:	701a      	strb	r2, [r3, #0]
   81e20:	6831      	ldr	r1, [r6, #0]
   81e22:	6888      	ldr	r0, [r1, #8]
   81e24:	6803      	ldr	r3, [r0, #0]
   81e26:	f103 0301 	add.w	r3, r3, #1
   81e2a:	6003      	str	r3, [r0, #0]
   81e2c:	e029      	b.n	81e82 <UnityPrintMask+0x13e>
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
   81e2e:	6830      	ldr	r0, [r6, #0]
   81e30:	6882      	ldr	r2, [r0, #8]
   81e32:	6893      	ldr	r3, [r2, #8]
   81e34:	f103 31ff 	add.w	r1, r3, #4294967295
   81e38:	6091      	str	r1, [r2, #8]
   81e3a:	2900      	cmp	r1, #0
   81e3c:	da17      	bge.n	81e6e <UnityPrintMask+0x12a>
   81e3e:	6882      	ldr	r2, [r0, #8]
   81e40:	6891      	ldr	r1, [r2, #8]
   81e42:	6993      	ldr	r3, [r2, #24]
   81e44:	4299      	cmp	r1, r3
   81e46:	db0f      	blt.n	81e68 <UnityPrintMask+0x124>
   81e48:	6812      	ldr	r2, [r2, #0]
   81e4a:	f882 9000 	strb.w	r9, [r2]
   81e4e:	6830      	ldr	r0, [r6, #0]
   81e50:	6882      	ldr	r2, [r0, #8]
   81e52:	6813      	ldr	r3, [r2, #0]
   81e54:	7819      	ldrb	r1, [r3, #0]
   81e56:	290a      	cmp	r1, #10
   81e58:	d003      	beq.n	81e62 <UnityPrintMask+0x11e>
   81e5a:	f103 0301 	add.w	r3, r3, #1
   81e5e:	6013      	str	r3, [r2, #0]
   81e60:	e00f      	b.n	81e82 <UnityPrintMask+0x13e>
   81e62:	4659      	mov	r1, fp
   81e64:	47d0      	blx	sl
   81e66:	e00c      	b.n	81e82 <UnityPrintMask+0x13e>
   81e68:	4649      	mov	r1, r9
   81e6a:	47d0      	blx	sl
   81e6c:	e009      	b.n	81e82 <UnityPrintMask+0x13e>
   81e6e:	6880      	ldr	r0, [r0, #8]
   81e70:	6802      	ldr	r2, [r0, #0]
   81e72:	f882 9000 	strb.w	r9, [r2]
   81e76:	6833      	ldr	r3, [r6, #0]
   81e78:	6899      	ldr	r1, [r3, #8]
   81e7a:	6808      	ldr	r0, [r1, #0]
   81e7c:	f100 0001 	add.w	r0, r0, #1
   81e80:	6008      	str	r0, [r1, #0]
        }
        current_bit = current_bit >> 1;
   81e82:	ea4f 0454 	mov.w	r4, r4, lsr #1
void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
{
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
    _US32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
   81e86:	3d01      	subs	r5, #1
   81e88:	f47f af70 	bne.w	81d6c <UnityPrintMask+0x28>
        {
            UNITY_OUTPUT_CHAR('X');
        }
        current_bit = current_bit >> 1;
    }
}
   81e8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00081e90 <UnityPrintFail>:
#endif

//-----------------------------------------------

void UnityPrintFail(void)
{
   81e90:	b508      	push	{r3, lr}
    UnityPrint("FAIL");
   81e92:	f643 1008 	movw	r0, #14600	; 0x3908
   81e96:	f2c0 0008 	movt	r0, #8
   81e9a:	f641 23c1 	movw	r3, #6849	; 0x1ac1
   81e9e:	f2c0 0308 	movt	r3, #8
   81ea2:	4798      	blx	r3
   81ea4:	bd08      	pop	{r3, pc}
   81ea6:	bf00      	nop

00081ea8 <UnityPrintOk>:
}

void UnityPrintOk(void)
{
   81ea8:	b508      	push	{r3, lr}
    UnityPrint("OK");
   81eaa:	f643 1010 	movw	r0, #14608	; 0x3910
   81eae:	f2c0 0008 	movt	r0, #8
   81eb2:	f641 23c1 	movw	r3, #6849	; 0x1ac1
   81eb6:	f2c0 0308 	movt	r3, #8
   81eba:	4798      	blx	r3
   81ebc:	bd08      	pop	{r3, pc}
   81ebe:	bf00      	nop

00081ec0 <UnityTestResultsBegin>:
}

//-----------------------------------------------
void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
   81ec0:	b538      	push	{r3, r4, r5, lr}
   81ec2:	460d      	mov	r5, r1
    UnityPrint(file);
   81ec4:	f641 23c1 	movw	r3, #6849	; 0x1ac1
   81ec8:	f2c0 0308 	movt	r3, #8
   81ecc:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   81ece:	f240 0010 	movw	r0, #16
   81ed2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81ed6:	6800      	ldr	r0, [r0, #0]
   81ed8:	6884      	ldr	r4, [r0, #8]
   81eda:	68a2      	ldr	r2, [r4, #8]
   81edc:	f102 31ff 	add.w	r1, r2, #4294967295
   81ee0:	60a1      	str	r1, [r4, #8]
   81ee2:	2900      	cmp	r1, #0
   81ee4:	da26      	bge.n	81f34 <UnityTestResultsBegin+0x74>
   81ee6:	6882      	ldr	r2, [r0, #8]
   81ee8:	6893      	ldr	r3, [r2, #8]
   81eea:	6991      	ldr	r1, [r2, #24]
   81eec:	428b      	cmp	r3, r1
   81eee:	db19      	blt.n	81f24 <UnityTestResultsBegin+0x64>
   81ef0:	6810      	ldr	r0, [r2, #0]
   81ef2:	f04f 023a 	mov.w	r2, #58	; 0x3a
   81ef6:	7002      	strb	r2, [r0, #0]
   81ef8:	f240 0110 	movw	r1, #16
   81efc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81f00:	6808      	ldr	r0, [r1, #0]
   81f02:	6882      	ldr	r2, [r0, #8]
   81f04:	6813      	ldr	r3, [r2, #0]
   81f06:	7819      	ldrb	r1, [r3, #0]
   81f08:	290a      	cmp	r1, #10
   81f0a:	d003      	beq.n	81f14 <UnityTestResultsBegin+0x54>
   81f0c:	f103 0301 	add.w	r3, r3, #1
   81f10:	6013      	str	r3, [r2, #0]
   81f12:	e01e      	b.n	81f52 <UnityTestResultsBegin+0x92>
   81f14:	f04f 010a 	mov.w	r1, #10
   81f18:	f642 2349 	movw	r3, #10825	; 0x2a49
   81f1c:	f2c0 0308 	movt	r3, #8
   81f20:	4798      	blx	r3
   81f22:	e016      	b.n	81f52 <UnityTestResultsBegin+0x92>
   81f24:	f04f 013a 	mov.w	r1, #58	; 0x3a
   81f28:	f642 2349 	movw	r3, #10825	; 0x2a49
   81f2c:	f2c0 0308 	movt	r3, #8
   81f30:	4798      	blx	r3
   81f32:	e00e      	b.n	81f52 <UnityTestResultsBegin+0x92>
   81f34:	6883      	ldr	r3, [r0, #8]
   81f36:	6818      	ldr	r0, [r3, #0]
   81f38:	f04f 023a 	mov.w	r2, #58	; 0x3a
   81f3c:	7002      	strb	r2, [r0, #0]
   81f3e:	f240 0110 	movw	r1, #16
   81f42:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81f46:	680b      	ldr	r3, [r1, #0]
   81f48:	6898      	ldr	r0, [r3, #8]
   81f4a:	6802      	ldr	r2, [r0, #0]
   81f4c:	f102 0201 	add.w	r2, r2, #1
   81f50:	6002      	str	r2, [r0, #0]
    UnityPrintNumber(line);
   81f52:	4628      	mov	r0, r5
   81f54:	f241 6209 	movw	r2, #5641	; 0x1609
   81f58:	f2c0 0208 	movt	r2, #8
   81f5c:	4790      	blx	r2
    UNITY_OUTPUT_CHAR(':');
   81f5e:	f240 0010 	movw	r0, #16
   81f62:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81f66:	6800      	ldr	r0, [r0, #0]
   81f68:	6881      	ldr	r1, [r0, #8]
   81f6a:	688b      	ldr	r3, [r1, #8]
   81f6c:	f103 32ff 	add.w	r2, r3, #4294967295
   81f70:	608a      	str	r2, [r1, #8]
   81f72:	2a00      	cmp	r2, #0
   81f74:	da26      	bge.n	81fc4 <UnityTestResultsBegin+0x104>
   81f76:	6882      	ldr	r2, [r0, #8]
   81f78:	6891      	ldr	r1, [r2, #8]
   81f7a:	6993      	ldr	r3, [r2, #24]
   81f7c:	4299      	cmp	r1, r3
   81f7e:	db19      	blt.n	81fb4 <UnityTestResultsBegin+0xf4>
   81f80:	6810      	ldr	r0, [r2, #0]
   81f82:	f04f 023a 	mov.w	r2, #58	; 0x3a
   81f86:	7002      	strb	r2, [r0, #0]
   81f88:	f240 0110 	movw	r1, #16
   81f8c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81f90:	6808      	ldr	r0, [r1, #0]
   81f92:	6882      	ldr	r2, [r0, #8]
   81f94:	6813      	ldr	r3, [r2, #0]
   81f96:	7819      	ldrb	r1, [r3, #0]
   81f98:	290a      	cmp	r1, #10
   81f9a:	d003      	beq.n	81fa4 <UnityTestResultsBegin+0xe4>
   81f9c:	f103 0301 	add.w	r3, r3, #1
   81fa0:	6013      	str	r3, [r2, #0]
   81fa2:	e01e      	b.n	81fe2 <UnityTestResultsBegin+0x122>
   81fa4:	f04f 010a 	mov.w	r1, #10
   81fa8:	f642 2349 	movw	r3, #10825	; 0x2a49
   81fac:	f2c0 0308 	movt	r3, #8
   81fb0:	4798      	blx	r3
   81fb2:	e016      	b.n	81fe2 <UnityTestResultsBegin+0x122>
   81fb4:	f04f 013a 	mov.w	r1, #58	; 0x3a
   81fb8:	f642 2349 	movw	r3, #10825	; 0x2a49
   81fbc:	f2c0 0308 	movt	r3, #8
   81fc0:	4798      	blx	r3
   81fc2:	e00e      	b.n	81fe2 <UnityTestResultsBegin+0x122>
   81fc4:	6880      	ldr	r0, [r0, #8]
   81fc6:	6801      	ldr	r1, [r0, #0]
   81fc8:	f04f 033a 	mov.w	r3, #58	; 0x3a
   81fcc:	700b      	strb	r3, [r1, #0]
   81fce:	f240 0210 	movw	r2, #16
   81fd2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81fd6:	6810      	ldr	r0, [r2, #0]
   81fd8:	6881      	ldr	r1, [r0, #8]
   81fda:	680b      	ldr	r3, [r1, #0]
   81fdc:	f103 0301 	add.w	r3, r3, #1
   81fe0:	600b      	str	r3, [r1, #0]
    UnityPrint(Unity.CurrentTestName);
   81fe2:	f640 00e0 	movw	r0, #2272	; 0x8e0
   81fe6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81fea:	6840      	ldr	r0, [r0, #4]
   81fec:	f641 22c1 	movw	r2, #6849	; 0x1ac1
   81ff0:	f2c0 0208 	movt	r2, #8
   81ff4:	4790      	blx	r2
    UNITY_OUTPUT_CHAR(':');
   81ff6:	f240 0110 	movw	r1, #16
   81ffa:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81ffe:	6808      	ldr	r0, [r1, #0]
   82000:	6882      	ldr	r2, [r0, #8]
   82002:	6893      	ldr	r3, [r2, #8]
   82004:	f103 31ff 	add.w	r1, r3, #4294967295
   82008:	6091      	str	r1, [r2, #8]
   8200a:	2900      	cmp	r1, #0
   8200c:	da26      	bge.n	8205c <UnityTestResultsBegin+0x19c>
   8200e:	6882      	ldr	r2, [r0, #8]
   82010:	6891      	ldr	r1, [r2, #8]
   82012:	6993      	ldr	r3, [r2, #24]
   82014:	4299      	cmp	r1, r3
   82016:	db19      	blt.n	8204c <UnityTestResultsBegin+0x18c>
   82018:	6810      	ldr	r0, [r2, #0]
   8201a:	f04f 023a 	mov.w	r2, #58	; 0x3a
   8201e:	7002      	strb	r2, [r0, #0]
   82020:	f240 0110 	movw	r1, #16
   82024:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82028:	6808      	ldr	r0, [r1, #0]
   8202a:	6882      	ldr	r2, [r0, #8]
   8202c:	6813      	ldr	r3, [r2, #0]
   8202e:	7819      	ldrb	r1, [r3, #0]
   82030:	290a      	cmp	r1, #10
   82032:	d003      	beq.n	8203c <UnityTestResultsBegin+0x17c>
   82034:	f103 0301 	add.w	r3, r3, #1
   82038:	6013      	str	r3, [r2, #0]
   8203a:	bd38      	pop	{r3, r4, r5, pc}
   8203c:	f04f 010a 	mov.w	r1, #10
   82040:	f642 2349 	movw	r3, #10825	; 0x2a49
   82044:	f2c0 0308 	movt	r3, #8
   82048:	4798      	blx	r3
   8204a:	bd38      	pop	{r3, r4, r5, pc}
   8204c:	f04f 013a 	mov.w	r1, #58	; 0x3a
   82050:	f642 2349 	movw	r3, #10825	; 0x2a49
   82054:	f2c0 0308 	movt	r3, #8
   82058:	4798      	blx	r3
   8205a:	bd38      	pop	{r3, r4, r5, pc}
   8205c:	6880      	ldr	r0, [r0, #8]
   8205e:	6803      	ldr	r3, [r0, #0]
   82060:	f04f 023a 	mov.w	r2, #58	; 0x3a
   82064:	701a      	strb	r2, [r3, #0]
   82066:	f240 0110 	movw	r1, #16
   8206a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8206e:	6808      	ldr	r0, [r1, #0]
   82070:	6883      	ldr	r3, [r0, #8]
   82072:	681a      	ldr	r2, [r3, #0]
   82074:	f102 0201 	add.w	r2, r2, #1
   82078:	601a      	str	r2, [r3, #0]
   8207a:	bd38      	pop	{r3, r4, r5, pc}

0008207c <UnityTestResultsFailBegin>:
}

//-----------------------------------------------
void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
   8207c:	b508      	push	{r3, lr}
   8207e:	4601      	mov	r1, r0
    UnityTestResultsBegin(Unity.TestFile, line);
   82080:	f640 03e0 	movw	r3, #2272	; 0x8e0
   82084:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82088:	6818      	ldr	r0, [r3, #0]
   8208a:	f641 62c1 	movw	r2, #7873	; 0x1ec1
   8208e:	f2c0 0208 	movt	r2, #8
   82092:	4790      	blx	r2
    UnityPrint("FAIL:");
   82094:	f643 1014 	movw	r0, #14612	; 0x3914
   82098:	f2c0 0008 	movt	r0, #8
   8209c:	f641 21c1 	movw	r1, #6849	; 0x1ac1
   820a0:	f2c0 0108 	movt	r1, #8
   820a4:	4788      	blx	r1
   820a6:	bd08      	pop	{r3, pc}

000820a8 <UnityConcludeTest>:
}

//-----------------------------------------------
void UnityConcludeTest(void)
{
   820a8:	b508      	push	{r3, lr}
    if (Unity.CurrentTestIgnored)
   820aa:	f640 03e0 	movw	r3, #2272	; 0x8e0
   820ae:	f2c2 0307 	movt	r3, #8199	; 0x2007
   820b2:	69d8      	ldr	r0, [r3, #28]
   820b4:	b140      	cbz	r0, 820c8 <UnityConcludeTest+0x20>
    {
        Unity.TestIgnores++;
   820b6:	f640 00e0 	movw	r0, #2272	; 0x8e0
   820ba:	f2c2 0007 	movt	r0, #8199	; 0x2007
   820be:	6942      	ldr	r2, [r0, #20]
   820c0:	f102 0201 	add.w	r2, r2, #1
   820c4:	6142      	str	r2, [r0, #20]
   820c6:	e065      	b.n	82194 <UnityConcludeTest+0xec>
    }
    else if (!Unity.CurrentTestFailed)
   820c8:	f640 01e0 	movw	r1, #2272	; 0x8e0
   820cc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   820d0:	698a      	ldr	r2, [r1, #24]
   820d2:	2a00      	cmp	r2, #0
   820d4:	d156      	bne.n	82184 <UnityConcludeTest+0xdc>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
   820d6:	f640 01e0 	movw	r1, #2272	; 0x8e0
   820da:	f2c2 0107 	movt	r1, #8199	; 0x2007
   820de:	6808      	ldr	r0, [r1, #0]
   820e0:	6889      	ldr	r1, [r1, #8]
   820e2:	f641 62c1 	movw	r2, #7873	; 0x1ec1
   820e6:	f2c0 0208 	movt	r2, #8
   820ea:	4790      	blx	r2
        UnityPrint("PASS");
   820ec:	f643 101c 	movw	r0, #14620	; 0x391c
   820f0:	f2c0 0008 	movt	r0, #8
   820f4:	f641 23c1 	movw	r3, #6849	; 0x1ac1
   820f8:	f2c0 0308 	movt	r3, #8
   820fc:	4798      	blx	r3
        UNITY_PRINT_EOL;
   820fe:	f240 0010 	movw	r0, #16
   82102:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82106:	6800      	ldr	r0, [r0, #0]
   82108:	6881      	ldr	r1, [r0, #8]
   8210a:	688a      	ldr	r2, [r1, #8]
   8210c:	f102 33ff 	add.w	r3, r2, #4294967295
   82110:	608b      	str	r3, [r1, #8]
   82112:	2b00      	cmp	r3, #0
   82114:	da26      	bge.n	82164 <UnityConcludeTest+0xbc>
   82116:	6882      	ldr	r2, [r0, #8]
   82118:	6891      	ldr	r1, [r2, #8]
   8211a:	6993      	ldr	r3, [r2, #24]
   8211c:	4299      	cmp	r1, r3
   8211e:	db19      	blt.n	82154 <UnityConcludeTest+0xac>
   82120:	6810      	ldr	r0, [r2, #0]
   82122:	f04f 020a 	mov.w	r2, #10
   82126:	7002      	strb	r2, [r0, #0]
   82128:	f240 0110 	movw	r1, #16
   8212c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82130:	6808      	ldr	r0, [r1, #0]
   82132:	6882      	ldr	r2, [r0, #8]
   82134:	6813      	ldr	r3, [r2, #0]
   82136:	7819      	ldrb	r1, [r3, #0]
   82138:	290a      	cmp	r1, #10
   8213a:	d003      	beq.n	82144 <UnityConcludeTest+0x9c>
   8213c:	f103 0301 	add.w	r3, r3, #1
   82140:	6013      	str	r3, [r2, #0]
   82142:	e027      	b.n	82194 <UnityConcludeTest+0xec>
   82144:	f04f 010a 	mov.w	r1, #10
   82148:	f642 2349 	movw	r3, #10825	; 0x2a49
   8214c:	f2c0 0308 	movt	r3, #8
   82150:	4798      	blx	r3
   82152:	e01f      	b.n	82194 <UnityConcludeTest+0xec>
   82154:	f04f 010a 	mov.w	r1, #10
   82158:	f642 2349 	movw	r3, #10825	; 0x2a49
   8215c:	f2c0 0308 	movt	r3, #8
   82160:	4798      	blx	r3
   82162:	e017      	b.n	82194 <UnityConcludeTest+0xec>
   82164:	6880      	ldr	r0, [r0, #8]
   82166:	6801      	ldr	r1, [r0, #0]
   82168:	f04f 020a 	mov.w	r2, #10
   8216c:	700a      	strb	r2, [r1, #0]
   8216e:	f240 0310 	movw	r3, #16
   82172:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82176:	6818      	ldr	r0, [r3, #0]
   82178:	6881      	ldr	r1, [r0, #8]
   8217a:	680a      	ldr	r2, [r1, #0]
   8217c:	f102 0201 	add.w	r2, r2, #1
   82180:	600a      	str	r2, [r1, #0]
   82182:	e007      	b.n	82194 <UnityConcludeTest+0xec>
    }
    else
    {
        Unity.TestFailures++;
   82184:	f640 03e0 	movw	r3, #2272	; 0x8e0
   82188:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8218c:	6918      	ldr	r0, [r3, #16]
   8218e:	f100 0001 	add.w	r0, r0, #1
   82192:	6118      	str	r0, [r3, #16]
    }

    Unity.CurrentTestFailed = 0;
   82194:	f640 01e0 	movw	r1, #2272	; 0x8e0
   82198:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8219c:	f04f 0300 	mov.w	r3, #0
   821a0:	618b      	str	r3, [r1, #24]
    Unity.CurrentTestIgnored = 0;
   821a2:	61cb      	str	r3, [r1, #28]
   821a4:	bd08      	pop	{r3, pc}
   821a6:	bf00      	nop

000821a8 <UnityAddMsgIfSpecified>:
}

//-----------------------------------------------
void UnityAddMsgIfSpecified(const char* msg)
{
   821a8:	b538      	push	{r3, r4, r5, lr}
    if (msg)
   821aa:	4605      	mov	r5, r0
   821ac:	b158      	cbz	r0, 821c6 <UnityAddMsgIfSpecified+0x1e>
    {
        UnityPrint(UnityStrSpacer);
   821ae:	f240 030c 	movw	r3, #12
   821b2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   821b6:	6818      	ldr	r0, [r3, #0]
   821b8:	f641 24c1 	movw	r4, #6849	; 0x1ac1
   821bc:	f2c0 0408 	movt	r4, #8
   821c0:	47a0      	blx	r4
        UnityPrint(msg);
   821c2:	4628      	mov	r0, r5
   821c4:	47a0      	blx	r4
   821c6:	bd38      	pop	{r3, r4, r5, pc}

000821c8 <UnityAssertBits>:
void UnityAssertBits(const _U_SINT mask,
                     const _U_SINT expected,
                     const _U_SINT actual,
                     const char* msg,
                     const UNITY_LINE_TYPE lineNumber)
{
   821c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   821cc:	4605      	mov	r5, r0
   821ce:	460f      	mov	r7, r1
   821d0:	4616      	mov	r6, r2
   821d2:	4698      	mov	r8, r3
    UNITY_SKIP_EXECUTION;
   821d4:	f640 04e0 	movw	r4, #2272	; 0x8e0
   821d8:	f2c2 0407 	movt	r4, #8199	; 0x2007
   821dc:	69a4      	ldr	r4, [r4, #24]
   821de:	2c00      	cmp	r4, #0
   821e0:	d15b      	bne.n	8229a <UnityAssertBits+0xd2>
   821e2:	f640 03e0 	movw	r3, #2272	; 0x8e0
   821e6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   821ea:	69da      	ldr	r2, [r3, #28]
   821ec:	2a00      	cmp	r2, #0
   821ee:	d154      	bne.n	8229a <UnityAssertBits+0xd2>

    if ((mask & expected) != (mask & actual))
   821f0:	ea86 0001 	eor.w	r0, r6, r1
   821f4:	4228      	tst	r0, r5
   821f6:	d050      	beq.n	8229a <UnityAssertBits+0xd2>
    {
        UnityTestResultsFailBegin(lineNumber);
   821f8:	9808      	ldr	r0, [sp, #32]
   821fa:	4929      	ldr	r1, [pc, #164]	; (822a0 <UnityAssertBits+0xd8>)
   821fc:	4788      	blx	r1
        UnityPrint(UnityStrExpected);
   821fe:	4c29      	ldr	r4, [pc, #164]	; (822a4 <UnityAssertBits+0xdc>)
   82200:	6820      	ldr	r0, [r4, #0]
   82202:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 822c8 <UnityAssertBits+0x100>
   82206:	47c8      	blx	r9
        UnityPrintMask(mask, expected);
   82208:	4628      	mov	r0, r5
   8220a:	4639      	mov	r1, r7
   8220c:	4f26      	ldr	r7, [pc, #152]	; (822a8 <UnityAssertBits+0xe0>)
   8220e:	47b8      	blx	r7
        UnityPrint(UnityStrWas);
   82210:	4b26      	ldr	r3, [pc, #152]	; (822ac <UnityAssertBits+0xe4>)
   82212:	6818      	ldr	r0, [r3, #0]
   82214:	47c8      	blx	r9
        UnityPrintMask(mask, actual);
   82216:	4628      	mov	r0, r5
   82218:	4631      	mov	r1, r6
   8221a:	47b8      	blx	r7
        UnityAddMsgIfSpecified(msg);
   8221c:	4640      	mov	r0, r8
   8221e:	4d24      	ldr	r5, [pc, #144]	; (822b0 <UnityAssertBits+0xe8>)
   82220:	47a8      	blx	r5
        UNITY_FAIL_AND_BAIL;
   82222:	4e24      	ldr	r6, [pc, #144]	; (822b4 <UnityAssertBits+0xec>)
   82224:	f04f 0201 	mov.w	r2, #1
   82228:	61b2      	str	r2, [r6, #24]
   8222a:	4823      	ldr	r0, [pc, #140]	; (822b8 <UnityAssertBits+0xf0>)
   8222c:	6800      	ldr	r0, [r0, #0]
   8222e:	6881      	ldr	r1, [r0, #8]
   82230:	688c      	ldr	r4, [r1, #8]
   82232:	f104 37ff 	add.w	r7, r4, #4294967295
   82236:	608f      	str	r7, [r1, #8]
   82238:	2f00      	cmp	r7, #0
   8223a:	da1d      	bge.n	82278 <UnityAssertBits+0xb0>
   8223c:	6882      	ldr	r2, [r0, #8]
   8223e:	6897      	ldr	r7, [r2, #8]
   82240:	6993      	ldr	r3, [r2, #24]
   82242:	429f      	cmp	r7, r3
   82244:	db13      	blt.n	8226e <UnityAssertBits+0xa6>
   82246:	6816      	ldr	r6, [r2, #0]
   82248:	f04f 020a 	mov.w	r2, #10
   8224c:	7032      	strb	r2, [r6, #0]
   8224e:	481a      	ldr	r0, [pc, #104]	; (822b8 <UnityAssertBits+0xf0>)
   82250:	6800      	ldr	r0, [r0, #0]
   82252:	6882      	ldr	r2, [r0, #8]
   82254:	6814      	ldr	r4, [r2, #0]
   82256:	7821      	ldrb	r1, [r4, #0]
   82258:	290a      	cmp	r1, #10
   8225a:	d003      	beq.n	82264 <UnityAssertBits+0x9c>
   8225c:	f104 0401 	add.w	r4, r4, #1
   82260:	6014      	str	r4, [r2, #0]
   82262:	e015      	b.n	82290 <UnityAssertBits+0xc8>
   82264:	f04f 010a 	mov.w	r1, #10
   82268:	4f14      	ldr	r7, [pc, #80]	; (822bc <UnityAssertBits+0xf4>)
   8226a:	47b8      	blx	r7
   8226c:	e010      	b.n	82290 <UnityAssertBits+0xc8>
   8226e:	f04f 010a 	mov.w	r1, #10
   82272:	4d12      	ldr	r5, [pc, #72]	; (822bc <UnityAssertBits+0xf4>)
   82274:	47a8      	blx	r5
   82276:	e00b      	b.n	82290 <UnityAssertBits+0xc8>
   82278:	6883      	ldr	r3, [r0, #8]
   8227a:	681d      	ldr	r5, [r3, #0]
   8227c:	f04f 060a 	mov.w	r6, #10
   82280:	702e      	strb	r6, [r5, #0]
   82282:	4a0d      	ldr	r2, [pc, #52]	; (822b8 <UnityAssertBits+0xf0>)
   82284:	6810      	ldr	r0, [r2, #0]
   82286:	6881      	ldr	r1, [r0, #8]
   82288:	680c      	ldr	r4, [r1, #0]
   8228a:	f104 0401 	add.w	r4, r4, #1
   8228e:	600c      	str	r4, [r1, #0]
   82290:	480b      	ldr	r0, [pc, #44]	; (822c0 <UnityAssertBits+0xf8>)
   82292:	f04f 0101 	mov.w	r1, #1
   82296:	4b0b      	ldr	r3, [pc, #44]	; (822c4 <UnityAssertBits+0xfc>)
   82298:	4798      	blx	r3
   8229a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8229e:	bf00      	nop
   822a0:	0008207d 	.word	0x0008207d
   822a4:	20070008 	.word	0x20070008
   822a8:	00081d45 	.word	0x00081d45
   822ac:	20070004 	.word	0x20070004
   822b0:	000821a9 	.word	0x000821a9
   822b4:	200708e0 	.word	0x200708e0
   822b8:	20070010 	.word	0x20070010
   822bc:	00082a49 	.word	0x00082a49
   822c0:	20070900 	.word	0x20070900
   822c4:	0008294d 	.word	0x0008294d
   822c8:	00081ac1 	.word	0x00081ac1

000822cc <UnityAssertEqualNumber>:
void UnityAssertEqualNumber(const _U_SINT expected,
                            const _U_SINT actual,
                            const char* msg,
                            const UNITY_LINE_TYPE lineNumber,
                            const UNITY_DISPLAY_STYLE_T style)
{
   822cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   822d0:	4606      	mov	r6, r0
   822d2:	460d      	mov	r5, r1
   822d4:	4690      	mov	r8, r2
   822d6:	f89d 7020 	ldrb.w	r7, [sp, #32]
    UNITY_SKIP_EXECUTION;
   822da:	f640 04e0 	movw	r4, #2272	; 0x8e0
   822de:	f2c2 0407 	movt	r4, #8199	; 0x2007
   822e2:	69a4      	ldr	r4, [r4, #24]
   822e4:	2c00      	cmp	r4, #0
   822e6:	d159      	bne.n	8239c <UnityAssertEqualNumber+0xd0>
   822e8:	f640 02e0 	movw	r2, #2272	; 0x8e0
   822ec:	f2c2 0207 	movt	r2, #8199	; 0x2007
   822f0:	69d4      	ldr	r4, [r2, #28]
   822f2:	2c00      	cmp	r4, #0
   822f4:	d152      	bne.n	8239c <UnityAssertEqualNumber+0xd0>

    if (expected != actual)
   822f6:	4288      	cmp	r0, r1
   822f8:	d050      	beq.n	8239c <UnityAssertEqualNumber+0xd0>
    {
        UnityTestResultsFailBegin(lineNumber);
   822fa:	4618      	mov	r0, r3
   822fc:	4b28      	ldr	r3, [pc, #160]	; (823a0 <UnityAssertEqualNumber+0xd4>)
   822fe:	4798      	blx	r3
        UnityPrint(UnityStrExpected);
   82300:	4828      	ldr	r0, [pc, #160]	; (823a4 <UnityAssertEqualNumber+0xd8>)
   82302:	6800      	ldr	r0, [r0, #0]
   82304:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 823c8 <UnityAssertEqualNumber+0xfc>
   82308:	47c8      	blx	r9
        UnityPrintNumberByStyle(expected, style);
   8230a:	4630      	mov	r0, r6
   8230c:	4639      	mov	r1, r7
   8230e:	4e26      	ldr	r6, [pc, #152]	; (823a8 <UnityAssertEqualNumber+0xdc>)
   82310:	47b0      	blx	r6
        UnityPrint(UnityStrWas);
   82312:	4926      	ldr	r1, [pc, #152]	; (823ac <UnityAssertEqualNumber+0xe0>)
   82314:	6808      	ldr	r0, [r1, #0]
   82316:	47c8      	blx	r9
        UnityPrintNumberByStyle(actual, style);
   82318:	4628      	mov	r0, r5
   8231a:	4639      	mov	r1, r7
   8231c:	47b0      	blx	r6
        UnityAddMsgIfSpecified(msg);
   8231e:	4640      	mov	r0, r8
   82320:	4d23      	ldr	r5, [pc, #140]	; (823b0 <UnityAssertEqualNumber+0xe4>)
   82322:	47a8      	blx	r5
        UNITY_FAIL_AND_BAIL;
   82324:	4f23      	ldr	r7, [pc, #140]	; (823b4 <UnityAssertEqualNumber+0xe8>)
   82326:	f04f 0401 	mov.w	r4, #1
   8232a:	61bc      	str	r4, [r7, #24]
   8232c:	4a22      	ldr	r2, [pc, #136]	; (823b8 <UnityAssertEqualNumber+0xec>)
   8232e:	6810      	ldr	r0, [r2, #0]
   82330:	6886      	ldr	r6, [r0, #8]
   82332:	68b3      	ldr	r3, [r6, #8]
   82334:	f103 31ff 	add.w	r1, r3, #4294967295
   82338:	60b1      	str	r1, [r6, #8]
   8233a:	2900      	cmp	r1, #0
   8233c:	da1d      	bge.n	8237a <UnityAssertEqualNumber+0xae>
   8233e:	6882      	ldr	r2, [r0, #8]
   82340:	6891      	ldr	r1, [r2, #8]
   82342:	6995      	ldr	r5, [r2, #24]
   82344:	42a9      	cmp	r1, r5
   82346:	db13      	blt.n	82370 <UnityAssertEqualNumber+0xa4>
   82348:	6810      	ldr	r0, [r2, #0]
   8234a:	f04f 040a 	mov.w	r4, #10
   8234e:	7004      	strb	r4, [r0, #0]
   82350:	4a19      	ldr	r2, [pc, #100]	; (823b8 <UnityAssertEqualNumber+0xec>)
   82352:	6810      	ldr	r0, [r2, #0]
   82354:	6882      	ldr	r2, [r0, #8]
   82356:	6816      	ldr	r6, [r2, #0]
   82358:	7833      	ldrb	r3, [r6, #0]
   8235a:	2b0a      	cmp	r3, #10
   8235c:	d003      	beq.n	82366 <UnityAssertEqualNumber+0x9a>
   8235e:	f106 0601 	add.w	r6, r6, #1
   82362:	6016      	str	r6, [r2, #0]
   82364:	e015      	b.n	82392 <UnityAssertEqualNumber+0xc6>
   82366:	f04f 010a 	mov.w	r1, #10
   8236a:	4d14      	ldr	r5, [pc, #80]	; (823bc <UnityAssertEqualNumber+0xf0>)
   8236c:	47a8      	blx	r5
   8236e:	e010      	b.n	82392 <UnityAssertEqualNumber+0xc6>
   82370:	f04f 010a 	mov.w	r1, #10
   82374:	4f11      	ldr	r7, [pc, #68]	; (823bc <UnityAssertEqualNumber+0xf0>)
   82376:	47b8      	blx	r7
   82378:	e00b      	b.n	82392 <UnityAssertEqualNumber+0xc6>
   8237a:	6880      	ldr	r0, [r0, #8]
   8237c:	6805      	ldr	r5, [r0, #0]
   8237e:	f04f 070a 	mov.w	r7, #10
   82382:	702f      	strb	r7, [r5, #0]
   82384:	4c0c      	ldr	r4, [pc, #48]	; (823b8 <UnityAssertEqualNumber+0xec>)
   82386:	6822      	ldr	r2, [r4, #0]
   82388:	6896      	ldr	r6, [r2, #8]
   8238a:	6833      	ldr	r3, [r6, #0]
   8238c:	f103 0301 	add.w	r3, r3, #1
   82390:	6033      	str	r3, [r6, #0]
   82392:	480b      	ldr	r0, [pc, #44]	; (823c0 <UnityAssertEqualNumber+0xf4>)
   82394:	f04f 0101 	mov.w	r1, #1
   82398:	4f0a      	ldr	r7, [pc, #40]	; (823c4 <UnityAssertEqualNumber+0xf8>)
   8239a:	47b8      	blx	r7
   8239c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   823a0:	0008207d 	.word	0x0008207d
   823a4:	20070008 	.word	0x20070008
   823a8:	00081a71 	.word	0x00081a71
   823ac:	20070004 	.word	0x20070004
   823b0:	000821a9 	.word	0x000821a9
   823b4:	200708e0 	.word	0x200708e0
   823b8:	20070010 	.word	0x20070010
   823bc:	00082a49 	.word	0x00082a49
   823c0:	20070900 	.word	0x20070900
   823c4:	0008294d 	.word	0x0008294d
   823c8:	00081ac1 	.word	0x00081ac1

000823cc <UnityFail>:
//-----------------------------------------------
// Control Functions
//-----------------------------------------------

void UnityFail(const char* msg, const UNITY_LINE_TYPE line)
{
   823cc:	b510      	push	{r4, lr}
   823ce:	4604      	mov	r4, r0
    UNITY_SKIP_EXECUTION;
   823d0:	f640 03e0 	movw	r3, #2272	; 0x8e0
   823d4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   823d8:	6998      	ldr	r0, [r3, #24]
   823da:	2800      	cmp	r0, #0
   823dc:	f040 80b8 	bne.w	82550 <UnityFail+0x184>
   823e0:	f640 02e0 	movw	r2, #2272	; 0x8e0
   823e4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   823e8:	69d3      	ldr	r3, [r2, #28]
   823ea:	2b00      	cmp	r3, #0
   823ec:	f040 80b0 	bne.w	82550 <UnityFail+0x184>

    UnityTestResultsBegin(Unity.TestFile, line);
   823f0:	4858      	ldr	r0, [pc, #352]	; (82554 <UnityFail+0x188>)
   823f2:	6800      	ldr	r0, [r0, #0]
   823f4:	4a58      	ldr	r2, [pc, #352]	; (82558 <UnityFail+0x18c>)
   823f6:	4790      	blx	r2
    UnityPrintFail();
   823f8:	4958      	ldr	r1, [pc, #352]	; (8255c <UnityFail+0x190>)
   823fa:	4788      	blx	r1
    if (msg != NULL)
   823fc:	2c00      	cmp	r4, #0
   823fe:	d06b      	beq.n	824d8 <UnityFail+0x10c>
    {
      UNITY_OUTPUT_CHAR(':');
   82400:	4b57      	ldr	r3, [pc, #348]	; (82560 <UnityFail+0x194>)
   82402:	6818      	ldr	r0, [r3, #0]
   82404:	6882      	ldr	r2, [r0, #8]
   82406:	6891      	ldr	r1, [r2, #8]
   82408:	f101 33ff 	add.w	r3, r1, #4294967295
   8240c:	6093      	str	r3, [r2, #8]
   8240e:	2b00      	cmp	r3, #0
   82410:	da1d      	bge.n	8244e <UnityFail+0x82>
   82412:	6882      	ldr	r2, [r0, #8]
   82414:	6891      	ldr	r1, [r2, #8]
   82416:	6993      	ldr	r3, [r2, #24]
   82418:	4299      	cmp	r1, r3
   8241a:	db13      	blt.n	82444 <UnityFail+0x78>
   8241c:	6810      	ldr	r0, [r2, #0]
   8241e:	f04f 023a 	mov.w	r2, #58	; 0x3a
   82422:	7002      	strb	r2, [r0, #0]
   82424:	494e      	ldr	r1, [pc, #312]	; (82560 <UnityFail+0x194>)
   82426:	6808      	ldr	r0, [r1, #0]
   82428:	6882      	ldr	r2, [r0, #8]
   8242a:	6813      	ldr	r3, [r2, #0]
   8242c:	7819      	ldrb	r1, [r3, #0]
   8242e:	290a      	cmp	r1, #10
   82430:	d003      	beq.n	8243a <UnityFail+0x6e>
   82432:	f103 0301 	add.w	r3, r3, #1
   82436:	6013      	str	r3, [r2, #0]
   82438:	e015      	b.n	82466 <UnityFail+0x9a>
   8243a:	f04f 010a 	mov.w	r1, #10
   8243e:	4b49      	ldr	r3, [pc, #292]	; (82564 <UnityFail+0x198>)
   82440:	4798      	blx	r3
   82442:	e010      	b.n	82466 <UnityFail+0x9a>
   82444:	f04f 013a 	mov.w	r1, #58	; 0x3a
   82448:	4b46      	ldr	r3, [pc, #280]	; (82564 <UnityFail+0x198>)
   8244a:	4798      	blx	r3
   8244c:	e00b      	b.n	82466 <UnityFail+0x9a>
   8244e:	6880      	ldr	r0, [r0, #8]
   82450:	6801      	ldr	r1, [r0, #0]
   82452:	f04f 023a 	mov.w	r2, #58	; 0x3a
   82456:	700a      	strb	r2, [r1, #0]
   82458:	4b41      	ldr	r3, [pc, #260]	; (82560 <UnityFail+0x194>)
   8245a:	6818      	ldr	r0, [r3, #0]
   8245c:	6881      	ldr	r1, [r0, #8]
   8245e:	680a      	ldr	r2, [r1, #0]
   82460:	f102 0201 	add.w	r2, r2, #1
   82464:	600a      	str	r2, [r1, #0]
      if (msg[0] != ' ')
   82466:	7820      	ldrb	r0, [r4, #0]
   82468:	2820      	cmp	r0, #32
   8246a:	d032      	beq.n	824d2 <UnityFail+0x106>
      {
        UNITY_OUTPUT_CHAR(' ');
   8246c:	4a3c      	ldr	r2, [pc, #240]	; (82560 <UnityFail+0x194>)
   8246e:	6810      	ldr	r0, [r2, #0]
   82470:	6881      	ldr	r1, [r0, #8]
   82472:	688b      	ldr	r3, [r1, #8]
   82474:	f103 32ff 	add.w	r2, r3, #4294967295
   82478:	608a      	str	r2, [r1, #8]
   8247a:	2a00      	cmp	r2, #0
   8247c:	da1d      	bge.n	824ba <UnityFail+0xee>
   8247e:	6882      	ldr	r2, [r0, #8]
   82480:	6891      	ldr	r1, [r2, #8]
   82482:	6993      	ldr	r3, [r2, #24]
   82484:	4299      	cmp	r1, r3
   82486:	db13      	blt.n	824b0 <UnityFail+0xe4>
   82488:	6810      	ldr	r0, [r2, #0]
   8248a:	f04f 0220 	mov.w	r2, #32
   8248e:	7002      	strb	r2, [r0, #0]
   82490:	4933      	ldr	r1, [pc, #204]	; (82560 <UnityFail+0x194>)
   82492:	6808      	ldr	r0, [r1, #0]
   82494:	6882      	ldr	r2, [r0, #8]
   82496:	6813      	ldr	r3, [r2, #0]
   82498:	7819      	ldrb	r1, [r3, #0]
   8249a:	290a      	cmp	r1, #10
   8249c:	d003      	beq.n	824a6 <UnityFail+0xda>
   8249e:	f103 0301 	add.w	r3, r3, #1
   824a2:	6013      	str	r3, [r2, #0]
   824a4:	e015      	b.n	824d2 <UnityFail+0x106>
   824a6:	f04f 010a 	mov.w	r1, #10
   824aa:	4b2e      	ldr	r3, [pc, #184]	; (82564 <UnityFail+0x198>)
   824ac:	4798      	blx	r3
   824ae:	e010      	b.n	824d2 <UnityFail+0x106>
   824b0:	f04f 0120 	mov.w	r1, #32
   824b4:	4b2b      	ldr	r3, [pc, #172]	; (82564 <UnityFail+0x198>)
   824b6:	4798      	blx	r3
   824b8:	e00b      	b.n	824d2 <UnityFail+0x106>
   824ba:	6880      	ldr	r0, [r0, #8]
   824bc:	6801      	ldr	r1, [r0, #0]
   824be:	f04f 0320 	mov.w	r3, #32
   824c2:	700b      	strb	r3, [r1, #0]
   824c4:	4a26      	ldr	r2, [pc, #152]	; (82560 <UnityFail+0x194>)
   824c6:	6810      	ldr	r0, [r2, #0]
   824c8:	6881      	ldr	r1, [r0, #8]
   824ca:	680b      	ldr	r3, [r1, #0]
   824cc:	f103 0301 	add.w	r3, r3, #1
   824d0:	600b      	str	r3, [r1, #0]
      }
      UnityPrint(msg);
   824d2:	4620      	mov	r0, r4
   824d4:	4c24      	ldr	r4, [pc, #144]	; (82568 <UnityFail+0x19c>)
   824d6:	47a0      	blx	r4
    }
    UNITY_FAIL_AND_BAIL;
   824d8:	481e      	ldr	r0, [pc, #120]	; (82554 <UnityFail+0x188>)
   824da:	f04f 0201 	mov.w	r2, #1
   824de:	6182      	str	r2, [r0, #24]
   824e0:	491f      	ldr	r1, [pc, #124]	; (82560 <UnityFail+0x194>)
   824e2:	6808      	ldr	r0, [r1, #0]
   824e4:	6884      	ldr	r4, [r0, #8]
   824e6:	68a3      	ldr	r3, [r4, #8]
   824e8:	f103 32ff 	add.w	r2, r3, #4294967295
   824ec:	60a2      	str	r2, [r4, #8]
   824ee:	2a00      	cmp	r2, #0
   824f0:	da1d      	bge.n	8252e <UnityFail+0x162>
   824f2:	6882      	ldr	r2, [r0, #8]
   824f4:	6894      	ldr	r4, [r2, #8]
   824f6:	6993      	ldr	r3, [r2, #24]
   824f8:	429c      	cmp	r4, r3
   824fa:	db13      	blt.n	82524 <UnityFail+0x158>
   824fc:	6810      	ldr	r0, [r2, #0]
   824fe:	f04f 020a 	mov.w	r2, #10
   82502:	7002      	strb	r2, [r0, #0]
   82504:	4916      	ldr	r1, [pc, #88]	; (82560 <UnityFail+0x194>)
   82506:	6808      	ldr	r0, [r1, #0]
   82508:	6882      	ldr	r2, [r0, #8]
   8250a:	6813      	ldr	r3, [r2, #0]
   8250c:	781c      	ldrb	r4, [r3, #0]
   8250e:	2c0a      	cmp	r4, #10
   82510:	d003      	beq.n	8251a <UnityFail+0x14e>
   82512:	f103 0301 	add.w	r3, r3, #1
   82516:	6013      	str	r3, [r2, #0]
   82518:	e015      	b.n	82546 <UnityFail+0x17a>
   8251a:	f04f 010a 	mov.w	r1, #10
   8251e:	4b11      	ldr	r3, [pc, #68]	; (82564 <UnityFail+0x198>)
   82520:	4798      	blx	r3
   82522:	e010      	b.n	82546 <UnityFail+0x17a>
   82524:	f04f 010a 	mov.w	r1, #10
   82528:	4c0e      	ldr	r4, [pc, #56]	; (82564 <UnityFail+0x198>)
   8252a:	47a0      	blx	r4
   8252c:	e00b      	b.n	82546 <UnityFail+0x17a>
   8252e:	6880      	ldr	r0, [r0, #8]
   82530:	6801      	ldr	r1, [r0, #0]
   82532:	f04f 040a 	mov.w	r4, #10
   82536:	700c      	strb	r4, [r1, #0]
   82538:	4b09      	ldr	r3, [pc, #36]	; (82560 <UnityFail+0x194>)
   8253a:	681a      	ldr	r2, [r3, #0]
   8253c:	6890      	ldr	r0, [r2, #8]
   8253e:	6801      	ldr	r1, [r0, #0]
   82540:	f101 0101 	add.w	r1, r1, #1
   82544:	6001      	str	r1, [r0, #0]
   82546:	4809      	ldr	r0, [pc, #36]	; (8256c <UnityFail+0x1a0>)
   82548:	f04f 0101 	mov.w	r1, #1
   8254c:	4a08      	ldr	r2, [pc, #32]	; (82570 <UnityFail+0x1a4>)
   8254e:	4790      	blx	r2
   82550:	bd10      	pop	{r4, pc}
   82552:	bf00      	nop
   82554:	200708e0 	.word	0x200708e0
   82558:	00081ec1 	.word	0x00081ec1
   8255c:	00081e91 	.word	0x00081e91
   82560:	20070010 	.word	0x20070010
   82564:	00082a49 	.word	0x00082a49
   82568:	00081ac1 	.word	0x00081ac1
   8256c:	20070900 	.word	0x20070900
   82570:	0008294d 	.word	0x0008294d

00082574 <UnityDefaultTestRun>:

//-----------------------------------------------
void setUp(void);
void tearDown(void);
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
   82574:	b500      	push	{lr}
   82576:	b083      	sub	sp, #12
   82578:	9001      	str	r0, [sp, #4]
    Unity.CurrentTestName = FuncName;
   8257a:	f640 00e0 	movw	r0, #2272	; 0x8e0
   8257e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82582:	6041      	str	r1, [r0, #4]
    Unity.CurrentTestLineNumber = FuncLineNum;
   82584:	6082      	str	r2, [r0, #8]
    Unity.NumberOfTests++;
   82586:	68c3      	ldr	r3, [r0, #12]
   82588:	f103 0301 	add.w	r3, r3, #1
   8258c:	60c3      	str	r3, [r0, #12]
    if (TEST_PROTECT())
   8258e:	f100 0020 	add.w	r0, r0, #32
   82592:	f642 1141 	movw	r1, #10561	; 0x2941
   82596:	f2c0 0108 	movt	r1, #8
   8259a:	4788      	blx	r1
   8259c:	b930      	cbnz	r0, 825ac <UnityDefaultTestRun+0x38>
    {
        setUp();
   8259e:	f241 204d 	movw	r0, #4685	; 0x124d
   825a2:	f2c0 0008 	movt	r0, #8
   825a6:	4780      	blx	r0
        Func();
   825a8:	9a01      	ldr	r2, [sp, #4]
   825aa:	4790      	blx	r2
    }
    if (TEST_PROTECT() && !(Unity.CurrentTestIgnored))
   825ac:	480c      	ldr	r0, [pc, #48]	; (825e0 <UnityDefaultTestRun+0x6c>)
   825ae:	f642 1341 	movw	r3, #10561	; 0x2941
   825b2:	f2c0 0308 	movt	r3, #8
   825b6:	4798      	blx	r3
   825b8:	b950      	cbnz	r0, 825d0 <UnityDefaultTestRun+0x5c>
   825ba:	f640 01e0 	movw	r1, #2272	; 0x8e0
   825be:	f2c2 0107 	movt	r1, #8199	; 0x2007
   825c2:	69c8      	ldr	r0, [r1, #28]
   825c4:	b920      	cbnz	r0, 825d0 <UnityDefaultTestRun+0x5c>
    {
        tearDown();
   825c6:	f241 2251 	movw	r2, #4689	; 0x1251
   825ca:	f2c0 0208 	movt	r2, #8
   825ce:	4790      	blx	r2
    }
    UnityConcludeTest();
   825d0:	f242 03a9 	movw	r3, #8361	; 0x20a9
   825d4:	f2c0 0308 	movt	r3, #8
   825d8:	4798      	blx	r3
}
   825da:	b003      	add	sp, #12
   825dc:	bd00      	pop	{pc}
   825de:	bf00      	nop
   825e0:	20070900 	.word	0x20070900

000825e4 <UnityBegin>:

//-----------------------------------------------
void UnityBegin(void)
{
    Unity.NumberOfTests = 0;
   825e4:	f640 03e0 	movw	r3, #2272	; 0x8e0
   825e8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   825ec:	f04f 0200 	mov.w	r2, #0
   825f0:	60da      	str	r2, [r3, #12]
    Unity.TestFailures = 0;
   825f2:	611a      	str	r2, [r3, #16]
    Unity.TestIgnores = 0;
   825f4:	615a      	str	r2, [r3, #20]
    Unity.CurrentTestFailed = 0;
   825f6:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   825f8:	61da      	str	r2, [r3, #28]
   825fa:	4770      	bx	lr

000825fc <UnityEnd>:
}

//-----------------------------------------------
int UnityEnd(void)
{
   825fc:	b570      	push	{r4, r5, r6, lr}
    UnityPrint("-----------------------");
   825fe:	f643 102c 	movw	r0, #14636	; 0x392c
   82602:	f2c0 0008 	movt	r0, #8
   82606:	f641 23c1 	movw	r3, #6849	; 0x1ac1
   8260a:	f2c0 0308 	movt	r3, #8
   8260e:	4798      	blx	r3
    UNITY_PRINT_EOL;
   82610:	f240 0010 	movw	r0, #16
   82614:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82618:	6800      	ldr	r0, [r0, #0]
   8261a:	6882      	ldr	r2, [r0, #8]
   8261c:	6891      	ldr	r1, [r2, #8]
   8261e:	f101 34ff 	add.w	r4, r1, #4294967295
   82622:	6094      	str	r4, [r2, #8]
   82624:	2c00      	cmp	r4, #0
   82626:	da26      	bge.n	82676 <UnityEnd+0x7a>
   82628:	6882      	ldr	r2, [r0, #8]
   8262a:	6895      	ldr	r5, [r2, #8]
   8262c:	6996      	ldr	r6, [r2, #24]
   8262e:	42b5      	cmp	r5, r6
   82630:	db19      	blt.n	82666 <UnityEnd+0x6a>
   82632:	6810      	ldr	r0, [r2, #0]
   82634:	f04f 020a 	mov.w	r2, #10
   82638:	7002      	strb	r2, [r0, #0]
   8263a:	f240 0110 	movw	r1, #16
   8263e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82642:	6808      	ldr	r0, [r1, #0]
   82644:	6882      	ldr	r2, [r0, #8]
   82646:	6814      	ldr	r4, [r2, #0]
   82648:	7825      	ldrb	r5, [r4, #0]
   8264a:	2d0a      	cmp	r5, #10
   8264c:	d003      	beq.n	82656 <UnityEnd+0x5a>
   8264e:	f104 0401 	add.w	r4, r4, #1
   82652:	6014      	str	r4, [r2, #0]
   82654:	e01e      	b.n	82694 <UnityEnd+0x98>
   82656:	f04f 010a 	mov.w	r1, #10
   8265a:	f642 2649 	movw	r6, #10825	; 0x2a49
   8265e:	f2c0 0608 	movt	r6, #8
   82662:	47b0      	blx	r6
   82664:	e016      	b.n	82694 <UnityEnd+0x98>
   82666:	f04f 010a 	mov.w	r1, #10
   8266a:	f642 2349 	movw	r3, #10825	; 0x2a49
   8266e:	f2c0 0308 	movt	r3, #8
   82672:	4798      	blx	r3
   82674:	e00e      	b.n	82694 <UnityEnd+0x98>
   82676:	6885      	ldr	r5, [r0, #8]
   82678:	682e      	ldr	r6, [r5, #0]
   8267a:	f04f 030a 	mov.w	r3, #10
   8267e:	7033      	strb	r3, [r6, #0]
   82680:	f240 0010 	movw	r0, #16
   82684:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82688:	6802      	ldr	r2, [r0, #0]
   8268a:	6891      	ldr	r1, [r2, #8]
   8268c:	680c      	ldr	r4, [r1, #0]
   8268e:	f104 0401 	add.w	r4, r4, #1
   82692:	600c      	str	r4, [r1, #0]
    UnityPrintNumber(Unity.NumberOfTests);
   82694:	f640 06e0 	movw	r6, #2272	; 0x8e0
   82698:	f2c2 0607 	movt	r6, #8199	; 0x2007
   8269c:	68f0      	ldr	r0, [r6, #12]
   8269e:	f241 6509 	movw	r5, #5641	; 0x1609
   826a2:	f2c0 0508 	movt	r5, #8
   826a6:	47a8      	blx	r5
    UnityPrint(" Tests ");
   826a8:	f643 1044 	movw	r0, #14660	; 0x3944
   826ac:	f2c0 0008 	movt	r0, #8
   826b0:	f641 24c1 	movw	r4, #6849	; 0x1ac1
   826b4:	f2c0 0408 	movt	r4, #8
   826b8:	47a0      	blx	r4
    UnityPrintNumber(Unity.TestFailures);
   826ba:	6930      	ldr	r0, [r6, #16]
   826bc:	47a8      	blx	r5
    UnityPrint(" Failures ");
   826be:	f643 104c 	movw	r0, #14668	; 0x394c
   826c2:	f2c0 0008 	movt	r0, #8
   826c6:	47a0      	blx	r4
    UnityPrintNumber(Unity.TestIgnores);
   826c8:	6970      	ldr	r0, [r6, #20]
   826ca:	47a8      	blx	r5
    UnityPrint(" Ignored");
   826cc:	f643 1058 	movw	r0, #14680	; 0x3958
   826d0:	f2c0 0008 	movt	r0, #8
   826d4:	47a0      	blx	r4
    UNITY_PRINT_EOL;
   826d6:	f240 0310 	movw	r3, #16
   826da:	f2c2 0307 	movt	r3, #8199	; 0x2007
   826de:	6818      	ldr	r0, [r3, #0]
   826e0:	6882      	ldr	r2, [r0, #8]
   826e2:	6891      	ldr	r1, [r2, #8]
   826e4:	f101 33ff 	add.w	r3, r1, #4294967295
   826e8:	6093      	str	r3, [r2, #8]
   826ea:	2b00      	cmp	r3, #0
   826ec:	da26      	bge.n	8273c <UnityEnd+0x140>
   826ee:	6882      	ldr	r2, [r0, #8]
   826f0:	6891      	ldr	r1, [r2, #8]
   826f2:	6993      	ldr	r3, [r2, #24]
   826f4:	4299      	cmp	r1, r3
   826f6:	db19      	blt.n	8272c <UnityEnd+0x130>
   826f8:	6810      	ldr	r0, [r2, #0]
   826fa:	f04f 020a 	mov.w	r2, #10
   826fe:	7002      	strb	r2, [r0, #0]
   82700:	f240 0110 	movw	r1, #16
   82704:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82708:	6808      	ldr	r0, [r1, #0]
   8270a:	6882      	ldr	r2, [r0, #8]
   8270c:	6813      	ldr	r3, [r2, #0]
   8270e:	7819      	ldrb	r1, [r3, #0]
   82710:	290a      	cmp	r1, #10
   82712:	d003      	beq.n	8271c <UnityEnd+0x120>
   82714:	f103 0301 	add.w	r3, r3, #1
   82718:	6013      	str	r3, [r2, #0]
   8271a:	e01e      	b.n	8275a <UnityEnd+0x15e>
   8271c:	f04f 010a 	mov.w	r1, #10
   82720:	f642 2349 	movw	r3, #10825	; 0x2a49
   82724:	f2c0 0308 	movt	r3, #8
   82728:	4798      	blx	r3
   8272a:	e016      	b.n	8275a <UnityEnd+0x15e>
   8272c:	f04f 010a 	mov.w	r1, #10
   82730:	f642 2349 	movw	r3, #10825	; 0x2a49
   82734:	f2c0 0308 	movt	r3, #8
   82738:	4798      	blx	r3
   8273a:	e00e      	b.n	8275a <UnityEnd+0x15e>
   8273c:	6880      	ldr	r0, [r0, #8]
   8273e:	6801      	ldr	r1, [r0, #0]
   82740:	f04f 020a 	mov.w	r2, #10
   82744:	700a      	strb	r2, [r1, #0]
   82746:	f240 0310 	movw	r3, #16
   8274a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8274e:	6818      	ldr	r0, [r3, #0]
   82750:	6881      	ldr	r1, [r0, #8]
   82752:	680a      	ldr	r2, [r1, #0]
   82754:	f102 0201 	add.w	r2, r2, #1
   82758:	600a      	str	r2, [r1, #0]
    if (Unity.TestFailures == 0U)
   8275a:	f640 00e0 	movw	r0, #2272	; 0x8e0
   8275e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82762:	6902      	ldr	r2, [r0, #16]
   82764:	b92a      	cbnz	r2, 82772 <UnityEnd+0x176>
    {
        UnityPrintOk();
   82766:	f641 63a9 	movw	r3, #7849	; 0x1ea9
   8276a:	f2c0 0308 	movt	r3, #8
   8276e:	4798      	blx	r3
   82770:	e004      	b.n	8277c <UnityEnd+0x180>
    }
    else
    {
        UnityPrintFail();
   82772:	f641 6191 	movw	r1, #7825	; 0x1e91
   82776:	f2c0 0108 	movt	r1, #8
   8277a:	4788      	blx	r1
    }
    UNITY_PRINT_EOL;
   8277c:	f240 0010 	movw	r0, #16
   82780:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82784:	6800      	ldr	r0, [r0, #0]
   82786:	6882      	ldr	r2, [r0, #8]
   82788:	6891      	ldr	r1, [r2, #8]
   8278a:	f101 33ff 	add.w	r3, r1, #4294967295
   8278e:	6093      	str	r3, [r2, #8]
   82790:	2b00      	cmp	r3, #0
   82792:	da26      	bge.n	827e2 <UnityEnd+0x1e6>
   82794:	6882      	ldr	r2, [r0, #8]
   82796:	6891      	ldr	r1, [r2, #8]
   82798:	6993      	ldr	r3, [r2, #24]
   8279a:	4299      	cmp	r1, r3
   8279c:	db19      	blt.n	827d2 <UnityEnd+0x1d6>
   8279e:	6810      	ldr	r0, [r2, #0]
   827a0:	f04f 020a 	mov.w	r2, #10
   827a4:	7002      	strb	r2, [r0, #0]
   827a6:	f240 0110 	movw	r1, #16
   827aa:	f2c2 0107 	movt	r1, #8199	; 0x2007
   827ae:	6808      	ldr	r0, [r1, #0]
   827b0:	6882      	ldr	r2, [r0, #8]
   827b2:	6813      	ldr	r3, [r2, #0]
   827b4:	7819      	ldrb	r1, [r3, #0]
   827b6:	290a      	cmp	r1, #10
   827b8:	d003      	beq.n	827c2 <UnityEnd+0x1c6>
   827ba:	f103 0301 	add.w	r3, r3, #1
   827be:	6013      	str	r3, [r2, #0]
   827c0:	e01e      	b.n	82800 <UnityEnd+0x204>
   827c2:	f04f 010a 	mov.w	r1, #10
   827c6:	f642 2349 	movw	r3, #10825	; 0x2a49
   827ca:	f2c0 0308 	movt	r3, #8
   827ce:	4798      	blx	r3
   827d0:	e016      	b.n	82800 <UnityEnd+0x204>
   827d2:	f04f 010a 	mov.w	r1, #10
   827d6:	f642 2349 	movw	r3, #10825	; 0x2a49
   827da:	f2c0 0308 	movt	r3, #8
   827de:	4798      	blx	r3
   827e0:	e00e      	b.n	82800 <UnityEnd+0x204>
   827e2:	6880      	ldr	r0, [r0, #8]
   827e4:	6801      	ldr	r1, [r0, #0]
   827e6:	f04f 020a 	mov.w	r2, #10
   827ea:	700a      	strb	r2, [r1, #0]
   827ec:	f240 0310 	movw	r3, #16
   827f0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   827f4:	6818      	ldr	r0, [r3, #0]
   827f6:	6881      	ldr	r1, [r0, #8]
   827f8:	680a      	ldr	r2, [r1, #0]
   827fa:	f102 0201 	add.w	r2, r2, #1
   827fe:	600a      	str	r2, [r1, #0]
    return Unity.TestFailures;
}
   82800:	f640 00e0 	movw	r0, #2272	; 0x8e0
   82804:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82808:	6900      	ldr	r0, [r0, #16]
   8280a:	bd70      	pop	{r4, r5, r6, pc}

0008280c <__register_exitproc>:
   8280c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82810:	4698      	mov	r8, r3
   82812:	4b23      	ldr	r3, [pc, #140]	; (828a0 <__register_exitproc+0x94>)
   82814:	4606      	mov	r6, r0
   82816:	681c      	ldr	r4, [r3, #0]
   82818:	460f      	mov	r7, r1
   8281a:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   8281e:	4691      	mov	r9, r2
   82820:	b918      	cbnz	r0, 8282a <__register_exitproc+0x1e>
   82822:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   82826:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   8282a:	6841      	ldr	r1, [r0, #4]
   8282c:	291f      	cmp	r1, #31
   8282e:	dd16      	ble.n	8285e <__register_exitproc+0x52>
   82830:	481c      	ldr	r0, [pc, #112]	; (828a4 <__register_exitproc+0x98>)
   82832:	b918      	cbnz	r0, 8283c <__register_exitproc+0x30>
   82834:	f04f 30ff 	mov.w	r0, #4294967295
   82838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8283c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   82840:	f000 fcea 	bl	83218 <malloc>
   82844:	2800      	cmp	r0, #0
   82846:	d0f5      	beq.n	82834 <__register_exitproc+0x28>
   82848:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   8284c:	2500      	movs	r5, #0
   8284e:	6045      	str	r5, [r0, #4]
   82850:	6002      	str	r2, [r0, #0]
   82852:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   82856:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   8285a:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   8285e:	b1b6      	cbz	r6, 8288e <__register_exitproc+0x82>
   82860:	6844      	ldr	r4, [r0, #4]
   82862:	2201      	movs	r2, #1
   82864:	fa02 f204 	lsl.w	r2, r2, r4
   82868:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   8286c:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   82870:	4311      	orrs	r1, r2
   82872:	2e02      	cmp	r6, #2
   82874:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
   82878:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   8287c:	461c      	mov	r4, r3
   8287e:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
   82882:	d104      	bne.n	8288e <__register_exitproc+0x82>
   82884:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   82888:	431a      	orrs	r2, r3
   8288a:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   8288e:	6841      	ldr	r1, [r0, #4]
   82890:	1c8b      	adds	r3, r1, #2
   82892:	1c4a      	adds	r2, r1, #1
   82894:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
   82898:	6042      	str	r2, [r0, #4]
   8289a:	2000      	movs	r0, #0
   8289c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   828a0:	00083a7c 	.word	0x00083a7c
   828a4:	00083219 	.word	0x00083219

000828a8 <__libc_fini_array>:
   828a8:	b570      	push	{r4, r5, r6, lr}
   828aa:	4b08      	ldr	r3, [pc, #32]	; (828cc <__libc_fini_array+0x24>)
   828ac:	4c08      	ldr	r4, [pc, #32]	; (828d0 <__libc_fini_array+0x28>)
   828ae:	2500      	movs	r5, #0
   828b0:	1ae0      	subs	r0, r4, r3
   828b2:	1084      	asrs	r4, r0, #2
   828b4:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   828b8:	3d04      	subs	r5, #4
   828ba:	b11c      	cbz	r4, 828c4 <__libc_fini_array+0x1c>
   828bc:	5972      	ldr	r2, [r6, r5]
   828be:	4790      	blx	r2
   828c0:	3c01      	subs	r4, #1
   828c2:	e7f9      	b.n	828b8 <__libc_fini_array+0x10>
   828c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   828c8:	f001 b8e6 	b.w	83a98 <_fini>
   828cc:	00083aa4 	.word	0x00083aa4
   828d0:	00083aa8 	.word	0x00083aa8

000828d4 <__libc_init_array>:
   828d4:	b538      	push	{r3, r4, r5, lr}
   828d6:	4d0e      	ldr	r5, [pc, #56]	; (82910 <__libc_init_array+0x3c>)
   828d8:	4b0e      	ldr	r3, [pc, #56]	; (82914 <__libc_init_array+0x40>)
   828da:	2400      	movs	r4, #0
   828dc:	1ae8      	subs	r0, r5, r3
   828de:	1085      	asrs	r5, r0, #2
   828e0:	42ac      	cmp	r4, r5
   828e2:	d005      	beq.n	828f0 <__libc_init_array+0x1c>
   828e4:	490b      	ldr	r1, [pc, #44]	; (82914 <__libc_init_array+0x40>)
   828e6:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   828ea:	4790      	blx	r2
   828ec:	3401      	adds	r4, #1
   828ee:	e7f7      	b.n	828e0 <__libc_init_array+0xc>
   828f0:	f001 f8c8 	bl	83a84 <_init>
   828f4:	4908      	ldr	r1, [pc, #32]	; (82918 <__libc_init_array+0x44>)
   828f6:	4a09      	ldr	r2, [pc, #36]	; (8291c <__libc_init_array+0x48>)
   828f8:	1a54      	subs	r4, r2, r1
   828fa:	10a5      	asrs	r5, r4, #2
   828fc:	2400      	movs	r4, #0
   828fe:	42ac      	cmp	r4, r5
   82900:	d005      	beq.n	8290e <__libc_init_array+0x3a>
   82902:	4b05      	ldr	r3, [pc, #20]	; (82918 <__libc_init_array+0x44>)
   82904:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   82908:	4780      	blx	r0
   8290a:	3401      	adds	r4, #1
   8290c:	e7f7      	b.n	828fe <__libc_init_array+0x2a>
   8290e:	bd38      	pop	{r3, r4, r5, pc}
   82910:	00083a90 	.word	0x00083a90
   82914:	00083a90 	.word	0x00083a90
   82918:	00083a90 	.word	0x00083a90
   8291c:	00083a98 	.word	0x00083a98

00082920 <memset>:
   82920:	1882      	adds	r2, r0, r2
   82922:	4603      	mov	r3, r0
   82924:	4293      	cmp	r3, r2
   82926:	d002      	beq.n	8292e <memset+0xe>
   82928:	f803 1b01 	strb.w	r1, [r3], #1
   8292c:	e7fa      	b.n	82924 <memset+0x4>
   8292e:	4770      	bx	lr

00082930 <setbuf>:
   82930:	2900      	cmp	r1, #0
   82932:	bf0c      	ite	eq
   82934:	2202      	moveq	r2, #2
   82936:	2200      	movne	r2, #0
   82938:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8293c:	f000 b80e 	b.w	8295c <setvbuf>

00082940 <setjmp>:
   82940:	46ec      	mov	ip, sp
   82942:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   82946:	f04f 0000 	mov.w	r0, #0
   8294a:	4770      	bx	lr

0008294c <longjmp>:
   8294c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   82950:	46e5      	mov	sp, ip
   82952:	0008      	movs	r0, r1
   82954:	bf08      	it	eq
   82956:	2001      	moveq	r0, #1
   82958:	4770      	bx	lr
   8295a:	bf00      	nop

0008295c <setvbuf>:
   8295c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82960:	461d      	mov	r5, r3
   82962:	4b37      	ldr	r3, [pc, #220]	; (82a40 <setvbuf+0xe4>)
   82964:	4604      	mov	r4, r0
   82966:	6818      	ldr	r0, [r3, #0]
   82968:	460e      	mov	r6, r1
   8296a:	4617      	mov	r7, r2
   8296c:	4698      	mov	r8, r3
   8296e:	b118      	cbz	r0, 82978 <setvbuf+0x1c>
   82970:	6b82      	ldr	r2, [r0, #56]	; 0x38
   82972:	b90a      	cbnz	r2, 82978 <setvbuf+0x1c>
   82974:	f000 fa20 	bl	82db8 <__sinit>
   82978:	2f02      	cmp	r7, #2
   8297a:	d85d      	bhi.n	82a38 <setvbuf+0xdc>
   8297c:	2d00      	cmp	r5, #0
   8297e:	db5b      	blt.n	82a38 <setvbuf+0xdc>
   82980:	4621      	mov	r1, r4
   82982:	f8d8 0000 	ldr.w	r0, [r8]
   82986:	f000 f925 	bl	82bd4 <_fflush_r>
   8298a:	89a1      	ldrh	r1, [r4, #12]
   8298c:	2000      	movs	r0, #0
   8298e:	f001 0380 	and.w	r3, r1, #128	; 0x80
   82992:	b21a      	sxth	r2, r3
   82994:	6060      	str	r0, [r4, #4]
   82996:	61a0      	str	r0, [r4, #24]
   82998:	b122      	cbz	r2, 829a4 <setvbuf+0x48>
   8299a:	4829      	ldr	r0, [pc, #164]	; (82a40 <setvbuf+0xe4>)
   8299c:	6921      	ldr	r1, [r4, #16]
   8299e:	6800      	ldr	r0, [r0, #0]
   829a0:	f000 fad4 	bl	82f4c <_free_r>
   829a4:	89a1      	ldrh	r1, [r4, #12]
   829a6:	2f02      	cmp	r7, #2
   829a8:	f021 0383 	bic.w	r3, r1, #131	; 0x83
   829ac:	81a3      	strh	r3, [r4, #12]
   829ae:	d012      	beq.n	829d6 <setvbuf+0x7a>
   829b0:	bb36      	cbnz	r6, 82a00 <setvbuf+0xa4>
   829b2:	2d00      	cmp	r5, #0
   829b4:	bf08      	it	eq
   829b6:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   829ba:	4628      	mov	r0, r5
   829bc:	f000 fc2c 	bl	83218 <malloc>
   829c0:	4606      	mov	r6, r0
   829c2:	b9c8      	cbnz	r0, 829f8 <setvbuf+0x9c>
   829c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
   829c8:	f000 fc26 	bl	83218 <malloc>
   829cc:	4606      	mov	r6, r0
   829ce:	b988      	cbnz	r0, 829f4 <setvbuf+0x98>
   829d0:	f04f 30ff 	mov.w	r0, #4294967295
   829d4:	e000      	b.n	829d8 <setvbuf+0x7c>
   829d6:	2000      	movs	r0, #0
   829d8:	89a1      	ldrh	r1, [r4, #12]
   829da:	2200      	movs	r2, #0
   829dc:	f041 0302 	orr.w	r3, r1, #2
   829e0:	81a3      	strh	r3, [r4, #12]
   829e2:	f104 0143 	add.w	r1, r4, #67	; 0x43
   829e6:	2301      	movs	r3, #1
   829e8:	60a2      	str	r2, [r4, #8]
   829ea:	6021      	str	r1, [r4, #0]
   829ec:	6121      	str	r1, [r4, #16]
   829ee:	6163      	str	r3, [r4, #20]
   829f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   829f4:	f44f 6580 	mov.w	r5, #1024	; 0x400
   829f8:	89a2      	ldrh	r2, [r4, #12]
   829fa:	f042 0080 	orr.w	r0, r2, #128	; 0x80
   829fe:	81a0      	strh	r0, [r4, #12]
   82a00:	2f01      	cmp	r7, #1
   82a02:	d105      	bne.n	82a10 <setvbuf+0xb4>
   82a04:	89a1      	ldrh	r1, [r4, #12]
   82a06:	426a      	negs	r2, r5
   82a08:	f041 0301 	orr.w	r3, r1, #1
   82a0c:	81a3      	strh	r3, [r4, #12]
   82a0e:	61a2      	str	r2, [r4, #24]
   82a10:	480b      	ldr	r0, [pc, #44]	; (82a40 <setvbuf+0xe4>)
   82a12:	89a2      	ldrh	r2, [r4, #12]
   82a14:	6801      	ldr	r1, [r0, #0]
   82a16:	4b0b      	ldr	r3, [pc, #44]	; (82a44 <setvbuf+0xe8>)
   82a18:	f002 0008 	and.w	r0, r2, #8
   82a1c:	b200      	sxth	r0, r0
   82a1e:	63cb      	str	r3, [r1, #60]	; 0x3c
   82a20:	6026      	str	r6, [r4, #0]
   82a22:	6126      	str	r6, [r4, #16]
   82a24:	6165      	str	r5, [r4, #20]
   82a26:	b148      	cbz	r0, 82a3c <setvbuf+0xe0>
   82a28:	f012 0f03 	tst.w	r2, #3
   82a2c:	bf18      	it	ne
   82a2e:	2500      	movne	r5, #0
   82a30:	60a5      	str	r5, [r4, #8]
   82a32:	2000      	movs	r0, #0
   82a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82a38:	f04f 30ff 	mov.w	r0, #4294967295
   82a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82a40:	20070010 	.word	0x20070010
   82a44:	00082d2d 	.word	0x00082d2d

00082a48 <__swbuf_r>:
   82a48:	b570      	push	{r4, r5, r6, lr}
   82a4a:	460d      	mov	r5, r1
   82a4c:	4614      	mov	r4, r2
   82a4e:	4606      	mov	r6, r0
   82a50:	b118      	cbz	r0, 82a5a <__swbuf_r+0x12>
   82a52:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82a54:	b90b      	cbnz	r3, 82a5a <__swbuf_r+0x12>
   82a56:	f000 f9af 	bl	82db8 <__sinit>
   82a5a:	89a1      	ldrh	r1, [r4, #12]
   82a5c:	69a0      	ldr	r0, [r4, #24]
   82a5e:	f001 0208 	and.w	r2, r1, #8
   82a62:	b213      	sxth	r3, r2
   82a64:	60a0      	str	r0, [r4, #8]
   82a66:	b10b      	cbz	r3, 82a6c <__swbuf_r+0x24>
   82a68:	6920      	ldr	r0, [r4, #16]
   82a6a:	b958      	cbnz	r0, 82a84 <__swbuf_r+0x3c>
   82a6c:	4630      	mov	r0, r6
   82a6e:	4621      	mov	r1, r4
   82a70:	f000 f844 	bl	82afc <__swsetup_r>
   82a74:	b130      	cbz	r0, 82a84 <__swbuf_r+0x3c>
   82a76:	89a5      	ldrh	r5, [r4, #12]
   82a78:	2009      	movs	r0, #9
   82a7a:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   82a7e:	81a1      	strh	r1, [r4, #12]
   82a80:	6030      	str	r0, [r6, #0]
   82a82:	e017      	b.n	82ab4 <__swbuf_r+0x6c>
   82a84:	89a1      	ldrh	r1, [r4, #12]
   82a86:	b2ed      	uxtb	r5, r5
   82a88:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
   82a8c:	b213      	sxth	r3, r2
   82a8e:	b933      	cbnz	r3, 82a9e <__swbuf_r+0x56>
   82a90:	f441 5000 	orr.w	r0, r1, #8192	; 0x2000
   82a94:	6e61      	ldr	r1, [r4, #100]	; 0x64
   82a96:	81a0      	strh	r0, [r4, #12]
   82a98:	f421 5200 	bic.w	r2, r1, #8192	; 0x2000
   82a9c:	6662      	str	r2, [r4, #100]	; 0x64
   82a9e:	6820      	ldr	r0, [r4, #0]
   82aa0:	6923      	ldr	r3, [r4, #16]
   82aa2:	6961      	ldr	r1, [r4, #20]
   82aa4:	1ac0      	subs	r0, r0, r3
   82aa6:	4288      	cmp	r0, r1
   82aa8:	db07      	blt.n	82aba <__swbuf_r+0x72>
   82aaa:	4630      	mov	r0, r6
   82aac:	4621      	mov	r1, r4
   82aae:	f000 f891 	bl	82bd4 <_fflush_r>
   82ab2:	b110      	cbz	r0, 82aba <__swbuf_r+0x72>
   82ab4:	f04f 35ff 	mov.w	r5, #4294967295
   82ab8:	e015      	b.n	82ae6 <__swbuf_r+0x9e>
   82aba:	68a2      	ldr	r2, [r4, #8]
   82abc:	6821      	ldr	r1, [r4, #0]
   82abe:	1e53      	subs	r3, r2, #1
   82ac0:	60a3      	str	r3, [r4, #8]
   82ac2:	f801 5b01 	strb.w	r5, [r1], #1
   82ac6:	6962      	ldr	r2, [r4, #20]
   82ac8:	3001      	adds	r0, #1
   82aca:	4290      	cmp	r0, r2
   82acc:	6021      	str	r1, [r4, #0]
   82ace:	d004      	beq.n	82ada <__swbuf_r+0x92>
   82ad0:	89a3      	ldrh	r3, [r4, #12]
   82ad2:	07db      	lsls	r3, r3, #31
   82ad4:	d507      	bpl.n	82ae6 <__swbuf_r+0x9e>
   82ad6:	2d0a      	cmp	r5, #10
   82ad8:	d105      	bne.n	82ae6 <__swbuf_r+0x9e>
   82ada:	4630      	mov	r0, r6
   82adc:	4621      	mov	r1, r4
   82ade:	f000 f879 	bl	82bd4 <_fflush_r>
   82ae2:	2800      	cmp	r0, #0
   82ae4:	d1e6      	bne.n	82ab4 <__swbuf_r+0x6c>
   82ae6:	4628      	mov	r0, r5
   82ae8:	bd70      	pop	{r4, r5, r6, pc}

00082aea <__swbuf>:
   82aea:	460a      	mov	r2, r1
   82aec:	4902      	ldr	r1, [pc, #8]	; (82af8 <__swbuf+0xe>)
   82aee:	4603      	mov	r3, r0
   82af0:	6808      	ldr	r0, [r1, #0]
   82af2:	4619      	mov	r1, r3
   82af4:	f7ff bfa8 	b.w	82a48 <__swbuf_r>
   82af8:	20070010 	.word	0x20070010

00082afc <__swsetup_r>:
   82afc:	b538      	push	{r3, r4, r5, lr}
   82afe:	4b2c      	ldr	r3, [pc, #176]	; (82bb0 <__swsetup_r+0xb4>)
   82b00:	4605      	mov	r5, r0
   82b02:	6818      	ldr	r0, [r3, #0]
   82b04:	460c      	mov	r4, r1
   82b06:	b118      	cbz	r0, 82b10 <__swsetup_r+0x14>
   82b08:	6b82      	ldr	r2, [r0, #56]	; 0x38
   82b0a:	b90a      	cbnz	r2, 82b10 <__swsetup_r+0x14>
   82b0c:	f000 f954 	bl	82db8 <__sinit>
   82b10:	89a0      	ldrh	r0, [r4, #12]
   82b12:	f000 0108 	and.w	r1, r0, #8
   82b16:	b20b      	sxth	r3, r1
   82b18:	bb0b      	cbnz	r3, 82b5e <__swsetup_r+0x62>
   82b1a:	f000 0210 	and.w	r2, r0, #16
   82b1e:	b211      	sxth	r1, r2
   82b20:	b911      	cbnz	r1, 82b28 <__swsetup_r+0x2c>
   82b22:	f04f 30ff 	mov.w	r0, #4294967295
   82b26:	bd38      	pop	{r3, r4, r5, pc}
   82b28:	f000 0004 	and.w	r0, r0, #4
   82b2c:	b203      	sxth	r3, r0
   82b2e:	b193      	cbz	r3, 82b56 <__swsetup_r+0x5a>
   82b30:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82b32:	b141      	cbz	r1, 82b46 <__swsetup_r+0x4a>
   82b34:	f104 0240 	add.w	r2, r4, #64	; 0x40
   82b38:	4291      	cmp	r1, r2
   82b3a:	d002      	beq.n	82b42 <__swsetup_r+0x46>
   82b3c:	4628      	mov	r0, r5
   82b3e:	f000 fa05 	bl	82f4c <_free_r>
   82b42:	2100      	movs	r1, #0
   82b44:	6321      	str	r1, [r4, #48]	; 0x30
   82b46:	89a0      	ldrh	r0, [r4, #12]
   82b48:	6921      	ldr	r1, [r4, #16]
   82b4a:	f020 0324 	bic.w	r3, r0, #36	; 0x24
   82b4e:	2200      	movs	r2, #0
   82b50:	81a3      	strh	r3, [r4, #12]
   82b52:	6062      	str	r2, [r4, #4]
   82b54:	6021      	str	r1, [r4, #0]
   82b56:	89a0      	ldrh	r0, [r4, #12]
   82b58:	f040 0308 	orr.w	r3, r0, #8
   82b5c:	81a3      	strh	r3, [r4, #12]
   82b5e:	6922      	ldr	r2, [r4, #16]
   82b60:	b94a      	cbnz	r2, 82b76 <__swsetup_r+0x7a>
   82b62:	89a1      	ldrh	r1, [r4, #12]
   82b64:	f401 7020 	and.w	r0, r1, #640	; 0x280
   82b68:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   82b6c:	d003      	beq.n	82b76 <__swsetup_r+0x7a>
   82b6e:	4628      	mov	r0, r5
   82b70:	4621      	mov	r1, r4
   82b72:	f000 fae5 	bl	83140 <__smakebuf_r>
   82b76:	89a3      	ldrh	r3, [r4, #12]
   82b78:	f013 0201 	ands.w	r2, r3, #1
   82b7c:	d005      	beq.n	82b8a <__swsetup_r+0x8e>
   82b7e:	6961      	ldr	r1, [r4, #20]
   82b80:	2200      	movs	r2, #0
   82b82:	4248      	negs	r0, r1
   82b84:	60a2      	str	r2, [r4, #8]
   82b86:	61a0      	str	r0, [r4, #24]
   82b88:	e007      	b.n	82b9a <__swsetup_r+0x9e>
   82b8a:	f003 0102 	and.w	r1, r3, #2
   82b8e:	b208      	sxth	r0, r1
   82b90:	b908      	cbnz	r0, 82b96 <__swsetup_r+0x9a>
   82b92:	6963      	ldr	r3, [r4, #20]
   82b94:	e000      	b.n	82b98 <__swsetup_r+0x9c>
   82b96:	4613      	mov	r3, r2
   82b98:	60a3      	str	r3, [r4, #8]
   82b9a:	6923      	ldr	r3, [r4, #16]
   82b9c:	b933      	cbnz	r3, 82bac <__swsetup_r+0xb0>
   82b9e:	89a2      	ldrh	r2, [r4, #12]
   82ba0:	f002 0180 	and.w	r1, r2, #128	; 0x80
   82ba4:	b208      	sxth	r0, r1
   82ba6:	2800      	cmp	r0, #0
   82ba8:	d1bb      	bne.n	82b22 <__swsetup_r+0x26>
   82baa:	bd38      	pop	{r3, r4, r5, pc}
   82bac:	2000      	movs	r0, #0
   82bae:	bd38      	pop	{r3, r4, r5, pc}
   82bb0:	20070010 	.word	0x20070010

00082bb4 <register_fini>:
   82bb4:	4b02      	ldr	r3, [pc, #8]	; (82bc0 <register_fini+0xc>)
   82bb6:	b113      	cbz	r3, 82bbe <register_fini+0xa>
   82bb8:	4802      	ldr	r0, [pc, #8]	; (82bc4 <register_fini+0x10>)
   82bba:	f000 b805 	b.w	82bc8 <atexit>
   82bbe:	4770      	bx	lr
   82bc0:	00000000 	.word	0x00000000
   82bc4:	000828a9 	.word	0x000828a9

00082bc8 <atexit>:
   82bc8:	4601      	mov	r1, r0
   82bca:	2000      	movs	r0, #0
   82bcc:	4602      	mov	r2, r0
   82bce:	4603      	mov	r3, r0
   82bd0:	f7ff be1c 	b.w	8280c <__register_exitproc>

00082bd4 <_fflush_r>:
   82bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82bd8:	460c      	mov	r4, r1
   82bda:	4605      	mov	r5, r0
   82bdc:	b118      	cbz	r0, 82be6 <_fflush_r+0x12>
   82bde:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82be0:	b90b      	cbnz	r3, 82be6 <_fflush_r+0x12>
   82be2:	f000 f8e9 	bl	82db8 <__sinit>
   82be6:	89a2      	ldrh	r2, [r4, #12]
   82be8:	b332      	cbz	r2, 82c38 <_fflush_r+0x64>
   82bea:	f002 0008 	and.w	r0, r2, #8
   82bee:	b201      	sxth	r1, r0
   82bf0:	2900      	cmp	r1, #0
   82bf2:	d162      	bne.n	82cba <_fflush_r+0xe6>
   82bf4:	6861      	ldr	r1, [r4, #4]
   82bf6:	f442 6000 	orr.w	r0, r2, #2048	; 0x800
   82bfa:	2900      	cmp	r1, #0
   82bfc:	81a0      	strh	r0, [r4, #12]
   82bfe:	dc02      	bgt.n	82c06 <_fflush_r+0x32>
   82c00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   82c02:	2b00      	cmp	r3, #0
   82c04:	dd18      	ble.n	82c38 <_fflush_r+0x64>
   82c06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   82c08:	b1b6      	cbz	r6, 82c38 <_fflush_r+0x64>
   82c0a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
   82c0e:	2000      	movs	r0, #0
   82c10:	b212      	sxth	r2, r2
   82c12:	682f      	ldr	r7, [r5, #0]
   82c14:	6028      	str	r0, [r5, #0]
   82c16:	b10a      	cbz	r2, 82c1c <_fflush_r+0x48>
   82c18:	6d22      	ldr	r2, [r4, #80]	; 0x50
   82c1a:	e010      	b.n	82c3e <_fflush_r+0x6a>
   82c1c:	2301      	movs	r3, #1
   82c1e:	4628      	mov	r0, r5
   82c20:	69e1      	ldr	r1, [r4, #28]
   82c22:	47b0      	blx	r6
   82c24:	4602      	mov	r2, r0
   82c26:	3001      	adds	r0, #1
   82c28:	d109      	bne.n	82c3e <_fflush_r+0x6a>
   82c2a:	6829      	ldr	r1, [r5, #0]
   82c2c:	b139      	cbz	r1, 82c3e <_fflush_r+0x6a>
   82c2e:	291d      	cmp	r1, #29
   82c30:	d001      	beq.n	82c36 <_fflush_r+0x62>
   82c32:	2916      	cmp	r1, #22
   82c34:	d14e      	bne.n	82cd4 <_fflush_r+0x100>
   82c36:	602f      	str	r7, [r5, #0]
   82c38:	2000      	movs	r0, #0
   82c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82c3e:	89a6      	ldrh	r6, [r4, #12]
   82c40:	f006 0104 	and.w	r1, r6, #4
   82c44:	b20b      	sxth	r3, r1
   82c46:	b12b      	cbz	r3, 82c54 <_fflush_r+0x80>
   82c48:	6860      	ldr	r0, [r4, #4]
   82c4a:	6b26      	ldr	r6, [r4, #48]	; 0x30
   82c4c:	1a12      	subs	r2, r2, r0
   82c4e:	b10e      	cbz	r6, 82c54 <_fflush_r+0x80>
   82c50:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   82c52:	1a52      	subs	r2, r2, r1
   82c54:	69e1      	ldr	r1, [r4, #28]
   82c56:	2300      	movs	r3, #0
   82c58:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   82c5a:	4628      	mov	r0, r5
   82c5c:	47b0      	blx	r6
   82c5e:	1c41      	adds	r1, r0, #1
   82c60:	d105      	bne.n	82c6e <_fflush_r+0x9a>
   82c62:	682a      	ldr	r2, [r5, #0]
   82c64:	b11a      	cbz	r2, 82c6e <_fflush_r+0x9a>
   82c66:	2a1d      	cmp	r2, #29
   82c68:	d001      	beq.n	82c6e <_fflush_r+0x9a>
   82c6a:	2a16      	cmp	r2, #22
   82c6c:	d11f      	bne.n	82cae <_fflush_r+0xda>
   82c6e:	89a3      	ldrh	r3, [r4, #12]
   82c70:	2100      	movs	r1, #0
   82c72:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
   82c76:	81a2      	strh	r2, [r4, #12]
   82c78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   82c7c:	6922      	ldr	r2, [r4, #16]
   82c7e:	6061      	str	r1, [r4, #4]
   82c80:	b219      	sxth	r1, r3
   82c82:	6022      	str	r2, [r4, #0]
   82c84:	b121      	cbz	r1, 82c90 <_fflush_r+0xbc>
   82c86:	1c42      	adds	r2, r0, #1
   82c88:	d101      	bne.n	82c8e <_fflush_r+0xba>
   82c8a:	682a      	ldr	r2, [r5, #0]
   82c8c:	b902      	cbnz	r2, 82c90 <_fflush_r+0xbc>
   82c8e:	6520      	str	r0, [r4, #80]	; 0x50
   82c90:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82c92:	602f      	str	r7, [r5, #0]
   82c94:	2900      	cmp	r1, #0
   82c96:	d0cf      	beq.n	82c38 <_fflush_r+0x64>
   82c98:	f104 0040 	add.w	r0, r4, #64	; 0x40
   82c9c:	4281      	cmp	r1, r0
   82c9e:	d002      	beq.n	82ca6 <_fflush_r+0xd2>
   82ca0:	4628      	mov	r0, r5
   82ca2:	f000 f953 	bl	82f4c <_free_r>
   82ca6:	2000      	movs	r0, #0
   82ca8:	6320      	str	r0, [r4, #48]	; 0x30
   82caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82cae:	89a3      	ldrh	r3, [r4, #12]
   82cb0:	f043 0140 	orr.w	r1, r3, #64	; 0x40
   82cb4:	81a1      	strh	r1, [r4, #12]
   82cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82cba:	6926      	ldr	r6, [r4, #16]
   82cbc:	2e00      	cmp	r6, #0
   82cbe:	d0bb      	beq.n	82c38 <_fflush_r+0x64>
   82cc0:	0792      	lsls	r2, r2, #30
   82cc2:	6823      	ldr	r3, [r4, #0]
   82cc4:	bf0c      	ite	eq
   82cc6:	6962      	ldreq	r2, [r4, #20]
   82cc8:	2200      	movne	r2, #0
   82cca:	ebc6 0803 	rsb	r8, r6, r3
   82cce:	6026      	str	r6, [r4, #0]
   82cd0:	60a2      	str	r2, [r4, #8]
   82cd2:	e012      	b.n	82cfa <_fflush_r+0x126>
   82cd4:	89a3      	ldrh	r3, [r4, #12]
   82cd6:	f043 0040 	orr.w	r0, r3, #64	; 0x40
   82cda:	81a0      	strh	r0, [r4, #12]
   82cdc:	f04f 30ff 	mov.w	r0, #4294967295
   82ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82ce4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82ce6:	4628      	mov	r0, r5
   82ce8:	69e1      	ldr	r1, [r4, #28]
   82cea:	4632      	mov	r2, r6
   82cec:	4643      	mov	r3, r8
   82cee:	47b8      	blx	r7
   82cf0:	2800      	cmp	r0, #0
   82cf2:	ddef      	ble.n	82cd4 <_fflush_r+0x100>
   82cf4:	1836      	adds	r6, r6, r0
   82cf6:	ebc0 0808 	rsb	r8, r0, r8
   82cfa:	f1b8 0f00 	cmp.w	r8, #0
   82cfe:	dcf1      	bgt.n	82ce4 <_fflush_r+0x110>
   82d00:	e79a      	b.n	82c38 <_fflush_r+0x64>

00082d02 <fflush>:
   82d02:	4601      	mov	r1, r0
   82d04:	b920      	cbnz	r0, 82d10 <fflush+0xe>
   82d06:	4804      	ldr	r0, [pc, #16]	; (82d18 <fflush+0x16>)
   82d08:	4904      	ldr	r1, [pc, #16]	; (82d1c <fflush+0x1a>)
   82d0a:	6800      	ldr	r0, [r0, #0]
   82d0c:	f000 b9f5 	b.w	830fa <_fwalk_reent>
   82d10:	4b03      	ldr	r3, [pc, #12]	; (82d20 <fflush+0x1e>)
   82d12:	6818      	ldr	r0, [r3, #0]
   82d14:	f7ff bf5e 	b.w	82bd4 <_fflush_r>
   82d18:	00083a7c 	.word	0x00083a7c
   82d1c:	00082bd5 	.word	0x00082bd5
   82d20:	20070010 	.word	0x20070010

00082d24 <__fp_lock>:
   82d24:	2000      	movs	r0, #0
   82d26:	4770      	bx	lr

00082d28 <__fp_unlock>:
   82d28:	2000      	movs	r0, #0
   82d2a:	4770      	bx	lr

00082d2c <_cleanup_r>:
   82d2c:	4901      	ldr	r1, [pc, #4]	; (82d34 <_cleanup_r+0x8>)
   82d2e:	f000 b9c3 	b.w	830b8 <_fwalk>
   82d32:	bf00      	nop
   82d34:	000837b9 	.word	0x000837b9

00082d38 <std.isra.0>:
   82d38:	2300      	movs	r3, #0
   82d3a:	b510      	push	{r4, lr}
   82d3c:	4604      	mov	r4, r0
   82d3e:	6003      	str	r3, [r0, #0]
   82d40:	6043      	str	r3, [r0, #4]
   82d42:	6083      	str	r3, [r0, #8]
   82d44:	8181      	strh	r1, [r0, #12]
   82d46:	6643      	str	r3, [r0, #100]	; 0x64
   82d48:	81c2      	strh	r2, [r0, #14]
   82d4a:	6103      	str	r3, [r0, #16]
   82d4c:	6143      	str	r3, [r0, #20]
   82d4e:	6183      	str	r3, [r0, #24]
   82d50:	4619      	mov	r1, r3
   82d52:	2208      	movs	r2, #8
   82d54:	f100 005c 	add.w	r0, r0, #92	; 0x5c
   82d58:	f7ff fde2 	bl	82920 <memset>
   82d5c:	4804      	ldr	r0, [pc, #16]	; (82d70 <std.isra.0+0x38>)
   82d5e:	4905      	ldr	r1, [pc, #20]	; (82d74 <std.isra.0+0x3c>)
   82d60:	4a05      	ldr	r2, [pc, #20]	; (82d78 <std.isra.0+0x40>)
   82d62:	4b06      	ldr	r3, [pc, #24]	; (82d7c <std.isra.0+0x44>)
   82d64:	61e4      	str	r4, [r4, #28]
   82d66:	6220      	str	r0, [r4, #32]
   82d68:	6261      	str	r1, [r4, #36]	; 0x24
   82d6a:	62a2      	str	r2, [r4, #40]	; 0x28
   82d6c:	62e3      	str	r3, [r4, #44]	; 0x2c
   82d6e:	bd10      	pop	{r4, pc}
   82d70:	00083661 	.word	0x00083661
   82d74:	00083687 	.word	0x00083687
   82d78:	000836c3 	.word	0x000836c3
   82d7c:	000836e7 	.word	0x000836e7

00082d80 <__sfmoreglue>:
   82d80:	b570      	push	{r4, r5, r6, lr}
   82d82:	2568      	movs	r5, #104	; 0x68
   82d84:	434d      	muls	r5, r1
   82d86:	460e      	mov	r6, r1
   82d88:	f105 010c 	add.w	r1, r5, #12
   82d8c:	f000 fa54 	bl	83238 <_malloc_r>
   82d90:	4604      	mov	r4, r0
   82d92:	b140      	cbz	r0, 82da6 <__sfmoreglue+0x26>
   82d94:	f100 000c 	add.w	r0, r0, #12
   82d98:	2100      	movs	r1, #0
   82d9a:	e884 0042 	stmia.w	r4, {r1, r6}
   82d9e:	60a0      	str	r0, [r4, #8]
   82da0:	462a      	mov	r2, r5
   82da2:	f7ff fdbd 	bl	82920 <memset>
   82da6:	4620      	mov	r0, r4
   82da8:	bd70      	pop	{r4, r5, r6, pc}

00082daa <_cleanup>:
   82daa:	4b02      	ldr	r3, [pc, #8]	; (82db4 <_cleanup+0xa>)
   82dac:	6818      	ldr	r0, [r3, #0]
   82dae:	f7ff bfbd 	b.w	82d2c <_cleanup_r>
   82db2:	bf00      	nop
   82db4:	00083a7c 	.word	0x00083a7c

00082db8 <__sinit>:
   82db8:	b538      	push	{r3, r4, r5, lr}
   82dba:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82dbc:	4604      	mov	r4, r0
   82dbe:	b9eb      	cbnz	r3, 82dfc <__sinit+0x44>
   82dc0:	4a0f      	ldr	r2, [pc, #60]	; (82e00 <__sinit+0x48>)
   82dc2:	2501      	movs	r5, #1
   82dc4:	f8c0 32e0 	str.w	r3, [r0, #736]	; 0x2e0
   82dc8:	63c2      	str	r2, [r0, #60]	; 0x3c
   82dca:	6385      	str	r5, [r0, #56]	; 0x38
   82dcc:	f504 713b 	add.w	r1, r4, #748	; 0x2ec
   82dd0:	2003      	movs	r0, #3
   82dd2:	461a      	mov	r2, r3
   82dd4:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   82dd8:	f8c4 12e8 	str.w	r1, [r4, #744]	; 0x2e8
   82ddc:	6860      	ldr	r0, [r4, #4]
   82dde:	2104      	movs	r1, #4
   82de0:	f7ff ffaa 	bl	82d38 <std.isra.0>
   82de4:	68a0      	ldr	r0, [r4, #8]
   82de6:	2109      	movs	r1, #9
   82de8:	462a      	mov	r2, r5
   82dea:	f7ff ffa5 	bl	82d38 <std.isra.0>
   82dee:	68e0      	ldr	r0, [r4, #12]
   82df0:	2112      	movs	r1, #18
   82df2:	2202      	movs	r2, #2
   82df4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82df8:	f7ff bf9e 	b.w	82d38 <std.isra.0>
   82dfc:	bd38      	pop	{r3, r4, r5, pc}
   82dfe:	bf00      	nop
   82e00:	00082d2d 	.word	0x00082d2d

00082e04 <__sfp>:
   82e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82e06:	4b1d      	ldr	r3, [pc, #116]	; (82e7c <__sfp+0x78>)
   82e08:	4607      	mov	r7, r0
   82e0a:	681e      	ldr	r6, [r3, #0]
   82e0c:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   82e0e:	b910      	cbnz	r0, 82e16 <__sfp+0x12>
   82e10:	4630      	mov	r0, r6
   82e12:	f7ff ffd1 	bl	82db8 <__sinit>
   82e16:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
   82e1a:	68b4      	ldr	r4, [r6, #8]
   82e1c:	6871      	ldr	r1, [r6, #4]
   82e1e:	3901      	subs	r1, #1
   82e20:	d404      	bmi.n	82e2c <__sfp+0x28>
   82e22:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   82e26:	b185      	cbz	r5, 82e4a <__sfp+0x46>
   82e28:	3468      	adds	r4, #104	; 0x68
   82e2a:	e7f8      	b.n	82e1e <__sfp+0x1a>
   82e2c:	6832      	ldr	r2, [r6, #0]
   82e2e:	b10a      	cbz	r2, 82e34 <__sfp+0x30>
   82e30:	6836      	ldr	r6, [r6, #0]
   82e32:	e7f2      	b.n	82e1a <__sfp+0x16>
   82e34:	4638      	mov	r0, r7
   82e36:	2104      	movs	r1, #4
   82e38:	f7ff ffa2 	bl	82d80 <__sfmoreglue>
   82e3c:	6030      	str	r0, [r6, #0]
   82e3e:	2800      	cmp	r0, #0
   82e40:	d1f6      	bne.n	82e30 <__sfp+0x2c>
   82e42:	240c      	movs	r4, #12
   82e44:	603c      	str	r4, [r7, #0]
   82e46:	4604      	mov	r4, r0
   82e48:	e015      	b.n	82e76 <__sfp+0x72>
   82e4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   82e4e:	2001      	movs	r0, #1
   82e50:	81a0      	strh	r0, [r4, #12]
   82e52:	81e3      	strh	r3, [r4, #14]
   82e54:	6665      	str	r5, [r4, #100]	; 0x64
   82e56:	6025      	str	r5, [r4, #0]
   82e58:	60a5      	str	r5, [r4, #8]
   82e5a:	6065      	str	r5, [r4, #4]
   82e5c:	6125      	str	r5, [r4, #16]
   82e5e:	6165      	str	r5, [r4, #20]
   82e60:	61a5      	str	r5, [r4, #24]
   82e62:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   82e66:	4629      	mov	r1, r5
   82e68:	2208      	movs	r2, #8
   82e6a:	f7ff fd59 	bl	82920 <memset>
   82e6e:	6325      	str	r5, [r4, #48]	; 0x30
   82e70:	6365      	str	r5, [r4, #52]	; 0x34
   82e72:	6465      	str	r5, [r4, #68]	; 0x44
   82e74:	64a5      	str	r5, [r4, #72]	; 0x48
   82e76:	4620      	mov	r0, r4
   82e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82e7a:	bf00      	nop
   82e7c:	00083a7c 	.word	0x00083a7c

00082e80 <__sfp_lock_acquire>:
   82e80:	4770      	bx	lr

00082e82 <__sfp_lock_release>:
   82e82:	4770      	bx	lr

00082e84 <__sinit_lock_acquire>:
   82e84:	4770      	bx	lr

00082e86 <__sinit_lock_release>:
   82e86:	4770      	bx	lr

00082e88 <__fp_lock_all>:
   82e88:	4b02      	ldr	r3, [pc, #8]	; (82e94 <__fp_lock_all+0xc>)
   82e8a:	4903      	ldr	r1, [pc, #12]	; (82e98 <__fp_lock_all+0x10>)
   82e8c:	6818      	ldr	r0, [r3, #0]
   82e8e:	f000 b913 	b.w	830b8 <_fwalk>
   82e92:	bf00      	nop
   82e94:	20070010 	.word	0x20070010
   82e98:	00082d25 	.word	0x00082d25

00082e9c <__fp_unlock_all>:
   82e9c:	4b02      	ldr	r3, [pc, #8]	; (82ea8 <__fp_unlock_all+0xc>)
   82e9e:	4903      	ldr	r1, [pc, #12]	; (82eac <__fp_unlock_all+0x10>)
   82ea0:	6818      	ldr	r0, [r3, #0]
   82ea2:	f000 b909 	b.w	830b8 <_fwalk>
   82ea6:	bf00      	nop
   82ea8:	20070010 	.word	0x20070010
   82eac:	00082d29 	.word	0x00082d29

00082eb0 <_malloc_trim_r>:
   82eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82eb2:	4d23      	ldr	r5, [pc, #140]	; (82f40 <_malloc_trim_r+0x90>)
   82eb4:	460e      	mov	r6, r1
   82eb6:	4604      	mov	r4, r0
   82eb8:	f000 fbc0 	bl	8363c <__malloc_lock>
   82ebc:	68ab      	ldr	r3, [r5, #8]
   82ebe:	685f      	ldr	r7, [r3, #4]
   82ec0:	f027 0703 	bic.w	r7, r7, #3
   82ec4:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
   82ec8:	1b81      	subs	r1, r0, r6
   82eca:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   82ece:	f022 060f 	bic.w	r6, r2, #15
   82ed2:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   82ed6:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   82eda:	da04      	bge.n	82ee6 <_malloc_trim_r+0x36>
   82edc:	4620      	mov	r0, r4
   82ede:	f000 fbae 	bl	8363e <__malloc_unlock>
   82ee2:	2000      	movs	r0, #0
   82ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82ee6:	2100      	movs	r1, #0
   82ee8:	4620      	mov	r0, r4
   82eea:	f000 fba9 	bl	83640 <_sbrk_r>
   82eee:	68ab      	ldr	r3, [r5, #8]
   82ef0:	19d9      	adds	r1, r3, r7
   82ef2:	4288      	cmp	r0, r1
   82ef4:	d1f2      	bne.n	82edc <_malloc_trim_r+0x2c>
   82ef6:	4271      	negs	r1, r6
   82ef8:	4620      	mov	r0, r4
   82efa:	f000 fba1 	bl	83640 <_sbrk_r>
   82efe:	3001      	adds	r0, #1
   82f00:	d110      	bne.n	82f24 <_malloc_trim_r+0x74>
   82f02:	2100      	movs	r1, #0
   82f04:	4620      	mov	r0, r4
   82f06:	f000 fb9b 	bl	83640 <_sbrk_r>
   82f0a:	68ab      	ldr	r3, [r5, #8]
   82f0c:	1ac2      	subs	r2, r0, r3
   82f0e:	2a0f      	cmp	r2, #15
   82f10:	dde4      	ble.n	82edc <_malloc_trim_r+0x2c>
   82f12:	490c      	ldr	r1, [pc, #48]	; (82f44 <_malloc_trim_r+0x94>)
   82f14:	f042 0201 	orr.w	r2, r2, #1
   82f18:	6809      	ldr	r1, [r1, #0]
   82f1a:	605a      	str	r2, [r3, #4]
   82f1c:	1a40      	subs	r0, r0, r1
   82f1e:	490a      	ldr	r1, [pc, #40]	; (82f48 <_malloc_trim_r+0x98>)
   82f20:	6008      	str	r0, [r1, #0]
   82f22:	e7db      	b.n	82edc <_malloc_trim_r+0x2c>
   82f24:	4b08      	ldr	r3, [pc, #32]	; (82f48 <_malloc_trim_r+0x98>)
   82f26:	68a8      	ldr	r0, [r5, #8]
   82f28:	681a      	ldr	r2, [r3, #0]
   82f2a:	1bbf      	subs	r7, r7, r6
   82f2c:	f047 0701 	orr.w	r7, r7, #1
   82f30:	6047      	str	r7, [r0, #4]
   82f32:	1b96      	subs	r6, r2, r6
   82f34:	4620      	mov	r0, r4
   82f36:	601e      	str	r6, [r3, #0]
   82f38:	f000 fb81 	bl	8363e <__malloc_unlock>
   82f3c:	2001      	movs	r0, #1
   82f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82f40:	20070440 	.word	0x20070440
   82f44:	20070848 	.word	0x20070848
   82f48:	20070960 	.word	0x20070960

00082f4c <_free_r>:
   82f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82f4e:	4606      	mov	r6, r0
   82f50:	460d      	mov	r5, r1
   82f52:	2900      	cmp	r1, #0
   82f54:	f000 80a6 	beq.w	830a4 <_free_r+0x158>
   82f58:	f000 fb70 	bl	8363c <__malloc_lock>
   82f5c:	f855 cc04 	ldr.w	ip, [r5, #-4]
   82f60:	4f51      	ldr	r7, [pc, #324]	; (830a8 <_free_r+0x15c>)
   82f62:	f1a5 0308 	sub.w	r3, r5, #8
   82f66:	f02c 0201 	bic.w	r2, ip, #1
   82f6a:	189c      	adds	r4, r3, r2
   82f6c:	68b9      	ldr	r1, [r7, #8]
   82f6e:	6860      	ldr	r0, [r4, #4]
   82f70:	428c      	cmp	r4, r1
   82f72:	f020 0003 	bic.w	r0, r0, #3
   82f76:	f00c 0101 	and.w	r1, ip, #1
   82f7a:	d11c      	bne.n	82fb6 <_free_r+0x6a>
   82f7c:	1882      	adds	r2, r0, r2
   82f7e:	b939      	cbnz	r1, 82f90 <_free_r+0x44>
   82f80:	f855 1c08 	ldr.w	r1, [r5, #-8]
   82f84:	1a5b      	subs	r3, r3, r1
   82f86:	6898      	ldr	r0, [r3, #8]
   82f88:	1852      	adds	r2, r2, r1
   82f8a:	68d9      	ldr	r1, [r3, #12]
   82f8c:	60c1      	str	r1, [r0, #12]
   82f8e:	6088      	str	r0, [r1, #8]
   82f90:	4845      	ldr	r0, [pc, #276]	; (830a8 <_free_r+0x15c>)
   82f92:	f042 0101 	orr.w	r1, r2, #1
   82f96:	6059      	str	r1, [r3, #4]
   82f98:	6083      	str	r3, [r0, #8]
   82f9a:	4b44      	ldr	r3, [pc, #272]	; (830ac <_free_r+0x160>)
   82f9c:	6819      	ldr	r1, [r3, #0]
   82f9e:	428a      	cmp	r2, r1
   82fa0:	d304      	bcc.n	82fac <_free_r+0x60>
   82fa2:	4a43      	ldr	r2, [pc, #268]	; (830b0 <_free_r+0x164>)
   82fa4:	4630      	mov	r0, r6
   82fa6:	6811      	ldr	r1, [r2, #0]
   82fa8:	f7ff ff82 	bl	82eb0 <_malloc_trim_r>
   82fac:	4630      	mov	r0, r6
   82fae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   82fb2:	f000 bb44 	b.w	8363e <__malloc_unlock>
   82fb6:	6060      	str	r0, [r4, #4]
   82fb8:	b959      	cbnz	r1, 82fd2 <_free_r+0x86>
   82fba:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82fbe:	3708      	adds	r7, #8
   82fc0:	1b5b      	subs	r3, r3, r5
   82fc2:	1952      	adds	r2, r2, r5
   82fc4:	689d      	ldr	r5, [r3, #8]
   82fc6:	42bd      	cmp	r5, r7
   82fc8:	d005      	beq.n	82fd6 <_free_r+0x8a>
   82fca:	68df      	ldr	r7, [r3, #12]
   82fcc:	60ef      	str	r7, [r5, #12]
   82fce:	60bd      	str	r5, [r7, #8]
   82fd0:	e002      	b.n	82fd8 <_free_r+0x8c>
   82fd2:	2100      	movs	r1, #0
   82fd4:	e000      	b.n	82fd8 <_free_r+0x8c>
   82fd6:	2101      	movs	r1, #1
   82fd8:	1825      	adds	r5, r4, r0
   82fda:	686d      	ldr	r5, [r5, #4]
   82fdc:	f015 0f01 	tst.w	r5, #1
   82fe0:	d10f      	bne.n	83002 <_free_r+0xb6>
   82fe2:	1812      	adds	r2, r2, r0
   82fe4:	b949      	cbnz	r1, 82ffa <_free_r+0xae>
   82fe6:	68a0      	ldr	r0, [r4, #8]
   82fe8:	4d32      	ldr	r5, [pc, #200]	; (830b4 <_free_r+0x168>)
   82fea:	42a8      	cmp	r0, r5
   82fec:	d105      	bne.n	82ffa <_free_r+0xae>
   82fee:	60eb      	str	r3, [r5, #12]
   82ff0:	60ab      	str	r3, [r5, #8]
   82ff2:	60d8      	str	r0, [r3, #12]
   82ff4:	6098      	str	r0, [r3, #8]
   82ff6:	2101      	movs	r1, #1
   82ff8:	e003      	b.n	83002 <_free_r+0xb6>
   82ffa:	68e0      	ldr	r0, [r4, #12]
   82ffc:	68a4      	ldr	r4, [r4, #8]
   82ffe:	60e0      	str	r0, [r4, #12]
   83000:	6084      	str	r4, [r0, #8]
   83002:	f042 0001 	orr.w	r0, r2, #1
   83006:	6058      	str	r0, [r3, #4]
   83008:	509a      	str	r2, [r3, r2]
   8300a:	2900      	cmp	r1, #0
   8300c:	d1ce      	bne.n	82fac <_free_r+0x60>
   8300e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   83012:	d20c      	bcs.n	8302e <_free_r+0xe2>
   83014:	08d2      	lsrs	r2, r2, #3
   83016:	1090      	asrs	r0, r2, #2
   83018:	2401      	movs	r4, #1
   8301a:	fa04 f400 	lsl.w	r4, r4, r0
   8301e:	4922      	ldr	r1, [pc, #136]	; (830a8 <_free_r+0x15c>)
   83020:	6848      	ldr	r0, [r1, #4]
   83022:	4320      	orrs	r0, r4
   83024:	6048      	str	r0, [r1, #4]
   83026:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
   8302a:	6881      	ldr	r1, [r0, #8]
   8302c:	e035      	b.n	8309a <_free_r+0x14e>
   8302e:	0a54      	lsrs	r4, r2, #9
   83030:	2c04      	cmp	r4, #4
   83032:	d802      	bhi.n	8303a <_free_r+0xee>
   83034:	0994      	lsrs	r4, r2, #6
   83036:	3438      	adds	r4, #56	; 0x38
   83038:	e016      	b.n	83068 <_free_r+0x11c>
   8303a:	2c14      	cmp	r4, #20
   8303c:	d801      	bhi.n	83042 <_free_r+0xf6>
   8303e:	345b      	adds	r4, #91	; 0x5b
   83040:	e012      	b.n	83068 <_free_r+0x11c>
   83042:	2c54      	cmp	r4, #84	; 0x54
   83044:	d802      	bhi.n	8304c <_free_r+0x100>
   83046:	0b14      	lsrs	r4, r2, #12
   83048:	346e      	adds	r4, #110	; 0x6e
   8304a:	e00d      	b.n	83068 <_free_r+0x11c>
   8304c:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
   83050:	d802      	bhi.n	83058 <_free_r+0x10c>
   83052:	0bd4      	lsrs	r4, r2, #15
   83054:	3477      	adds	r4, #119	; 0x77
   83056:	e007      	b.n	83068 <_free_r+0x11c>
   83058:	f240 5554 	movw	r5, #1364	; 0x554
   8305c:	42ac      	cmp	r4, r5
   8305e:	d802      	bhi.n	83066 <_free_r+0x11a>
   83060:	0c94      	lsrs	r4, r2, #18
   83062:	347c      	adds	r4, #124	; 0x7c
   83064:	e000      	b.n	83068 <_free_r+0x11c>
   83066:	247e      	movs	r4, #126	; 0x7e
   83068:	4d0f      	ldr	r5, [pc, #60]	; (830a8 <_free_r+0x15c>)
   8306a:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   8306e:	6881      	ldr	r1, [r0, #8]
   83070:	4281      	cmp	r1, r0
   83072:	d10c      	bne.n	8308e <_free_r+0x142>
   83074:	2201      	movs	r2, #1
   83076:	10a4      	asrs	r4, r4, #2
   83078:	fa02 f404 	lsl.w	r4, r2, r4
   8307c:	6868      	ldr	r0, [r5, #4]
   8307e:	ea44 0200 	orr.w	r2, r4, r0
   83082:	606a      	str	r2, [r5, #4]
   83084:	4608      	mov	r0, r1
   83086:	e008      	b.n	8309a <_free_r+0x14e>
   83088:	6889      	ldr	r1, [r1, #8]
   8308a:	4281      	cmp	r1, r0
   8308c:	d004      	beq.n	83098 <_free_r+0x14c>
   8308e:	684c      	ldr	r4, [r1, #4]
   83090:	f024 0403 	bic.w	r4, r4, #3
   83094:	42a2      	cmp	r2, r4
   83096:	d3f7      	bcc.n	83088 <_free_r+0x13c>
   83098:	68c8      	ldr	r0, [r1, #12]
   8309a:	60d8      	str	r0, [r3, #12]
   8309c:	6099      	str	r1, [r3, #8]
   8309e:	6083      	str	r3, [r0, #8]
   830a0:	60cb      	str	r3, [r1, #12]
   830a2:	e783      	b.n	82fac <_free_r+0x60>
   830a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   830a6:	bf00      	nop
   830a8:	20070440 	.word	0x20070440
   830ac:	2007084c 	.word	0x2007084c
   830b0:	2007095c 	.word	0x2007095c
   830b4:	20070448 	.word	0x20070448

000830b8 <_fwalk>:
   830b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   830bc:	4604      	mov	r4, r0
   830be:	4688      	mov	r8, r1
   830c0:	f7ff fede 	bl	82e80 <__sfp_lock_acquire>
   830c4:	f504 7438 	add.w	r4, r4, #736	; 0x2e0
   830c8:	2600      	movs	r6, #0
   830ca:	b18c      	cbz	r4, 830f0 <_fwalk+0x38>
   830cc:	68a5      	ldr	r5, [r4, #8]
   830ce:	6867      	ldr	r7, [r4, #4]
   830d0:	3f01      	subs	r7, #1
   830d2:	d40b      	bmi.n	830ec <_fwalk+0x34>
   830d4:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   830d8:	b133      	cbz	r3, 830e8 <_fwalk+0x30>
   830da:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
   830de:	1c43      	adds	r3, r0, #1
   830e0:	d002      	beq.n	830e8 <_fwalk+0x30>
   830e2:	4628      	mov	r0, r5
   830e4:	47c0      	blx	r8
   830e6:	4306      	orrs	r6, r0
   830e8:	3568      	adds	r5, #104	; 0x68
   830ea:	e7f1      	b.n	830d0 <_fwalk+0x18>
   830ec:	6824      	ldr	r4, [r4, #0]
   830ee:	e7ec      	b.n	830ca <_fwalk+0x12>
   830f0:	f7ff fec7 	bl	82e82 <__sfp_lock_release>
   830f4:	4630      	mov	r0, r6
   830f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000830fa <_fwalk_reent>:
   830fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   830fe:	4680      	mov	r8, r0
   83100:	4689      	mov	r9, r1
   83102:	f7ff febd 	bl	82e80 <__sfp_lock_acquire>
   83106:	f508 7438 	add.w	r4, r8, #736	; 0x2e0
   8310a:	2600      	movs	r6, #0
   8310c:	b194      	cbz	r4, 83134 <_fwalk_reent+0x3a>
   8310e:	68a5      	ldr	r5, [r4, #8]
   83110:	6867      	ldr	r7, [r4, #4]
   83112:	3f01      	subs	r7, #1
   83114:	d40c      	bmi.n	83130 <_fwalk_reent+0x36>
   83116:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8311a:	b13b      	cbz	r3, 8312c <_fwalk_reent+0x32>
   8311c:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
   83120:	1c43      	adds	r3, r0, #1
   83122:	d003      	beq.n	8312c <_fwalk_reent+0x32>
   83124:	4640      	mov	r0, r8
   83126:	4629      	mov	r1, r5
   83128:	47c8      	blx	r9
   8312a:	4306      	orrs	r6, r0
   8312c:	3568      	adds	r5, #104	; 0x68
   8312e:	e7f0      	b.n	83112 <_fwalk_reent+0x18>
   83130:	6824      	ldr	r4, [r4, #0]
   83132:	e7eb      	b.n	8310c <_fwalk_reent+0x12>
   83134:	f7ff fea5 	bl	82e82 <__sfp_lock_release>
   83138:	4630      	mov	r0, r6
   8313a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

00083140 <__smakebuf_r>:
   83140:	b5f0      	push	{r4, r5, r6, r7, lr}
   83142:	898b      	ldrh	r3, [r1, #12]
   83144:	460c      	mov	r4, r1
   83146:	f003 0102 	and.w	r1, r3, #2
   8314a:	b20a      	sxth	r2, r1
   8314c:	b091      	sub	sp, #68	; 0x44
   8314e:	4606      	mov	r6, r0
   83150:	2a00      	cmp	r2, #0
   83152:	d13f      	bne.n	831d4 <__smakebuf_r+0x94>
   83154:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83158:	2900      	cmp	r1, #0
   8315a:	da0d      	bge.n	83178 <__smakebuf_r+0x38>
   8315c:	89a7      	ldrh	r7, [r4, #12]
   8315e:	f007 0280 	and.w	r2, r7, #128	; 0x80
   83162:	f447 6300 	orr.w	r3, r7, #2048	; 0x800
   83166:	b210      	sxth	r0, r2
   83168:	2800      	cmp	r0, #0
   8316a:	bf0c      	ite	eq
   8316c:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   83170:	2540      	movne	r5, #64	; 0x40
   83172:	81a3      	strh	r3, [r4, #12]
   83174:	2700      	movs	r7, #0
   83176:	e020      	b.n	831ba <__smakebuf_r+0x7a>
   83178:	aa01      	add	r2, sp, #4
   8317a:	f000 fb25 	bl	837c8 <_fstat_r>
   8317e:	2800      	cmp	r0, #0
   83180:	dbec      	blt.n	8315c <__smakebuf_r+0x1c>
   83182:	9802      	ldr	r0, [sp, #8]
   83184:	f400 4570 	and.w	r5, r0, #61440	; 0xf000
   83188:	f5b5 5300 	subs.w	r3, r5, #8192	; 0x2000
   8318c:	425f      	negs	r7, r3
   8318e:	415f      	adcs	r7, r3
   83190:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   83194:	d10b      	bne.n	831ae <__smakebuf_r+0x6e>
   83196:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   83198:	4a1d      	ldr	r2, [pc, #116]	; (83210 <__smakebuf_r+0xd0>)
   8319a:	4291      	cmp	r1, r2
   8319c:	d107      	bne.n	831ae <__smakebuf_r+0x6e>
   8319e:	89a3      	ldrh	r3, [r4, #12]
   831a0:	f44f 6580 	mov.w	r5, #1024	; 0x400
   831a4:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
   831a8:	81a1      	strh	r1, [r4, #12]
   831aa:	64e5      	str	r5, [r4, #76]	; 0x4c
   831ac:	e005      	b.n	831ba <__smakebuf_r+0x7a>
   831ae:	89a0      	ldrh	r0, [r4, #12]
   831b0:	f440 6500 	orr.w	r5, r0, #2048	; 0x800
   831b4:	81a5      	strh	r5, [r4, #12]
   831b6:	f44f 6580 	mov.w	r5, #1024	; 0x400
   831ba:	4630      	mov	r0, r6
   831bc:	4629      	mov	r1, r5
   831be:	f000 f83b 	bl	83238 <_malloc_r>
   831c2:	b970      	cbnz	r0, 831e2 <__smakebuf_r+0xa2>
   831c4:	89a3      	ldrh	r3, [r4, #12]
   831c6:	f403 7200 	and.w	r2, r3, #512	; 0x200
   831ca:	b210      	sxth	r0, r2
   831cc:	b9e8      	cbnz	r0, 8320a <__smakebuf_r+0xca>
   831ce:	f043 0102 	orr.w	r1, r3, #2
   831d2:	81a1      	strh	r1, [r4, #12]
   831d4:	f104 0343 	add.w	r3, r4, #67	; 0x43
   831d8:	2201      	movs	r2, #1
   831da:	6023      	str	r3, [r4, #0]
   831dc:	6123      	str	r3, [r4, #16]
   831de:	6162      	str	r2, [r4, #20]
   831e0:	e013      	b.n	8320a <__smakebuf_r+0xca>
   831e2:	89a2      	ldrh	r2, [r4, #12]
   831e4:	490b      	ldr	r1, [pc, #44]	; (83214 <__smakebuf_r+0xd4>)
   831e6:	f042 0380 	orr.w	r3, r2, #128	; 0x80
   831ea:	63f1      	str	r1, [r6, #60]	; 0x3c
   831ec:	81a3      	strh	r3, [r4, #12]
   831ee:	6020      	str	r0, [r4, #0]
   831f0:	6120      	str	r0, [r4, #16]
   831f2:	6165      	str	r5, [r4, #20]
   831f4:	b14f      	cbz	r7, 8320a <__smakebuf_r+0xca>
   831f6:	4630      	mov	r0, r6
   831f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   831fc:	f000 faf6 	bl	837ec <_isatty_r>
   83200:	b118      	cbz	r0, 8320a <__smakebuf_r+0xca>
   83202:	89a0      	ldrh	r0, [r4, #12]
   83204:	f040 0101 	orr.w	r1, r0, #1
   83208:	81a1      	strh	r1, [r4, #12]
   8320a:	b011      	add	sp, #68	; 0x44
   8320c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8320e:	bf00      	nop
   83210:	000836c3 	.word	0x000836c3
   83214:	00082d2d 	.word	0x00082d2d

00083218 <malloc>:
   83218:	4b02      	ldr	r3, [pc, #8]	; (83224 <malloc+0xc>)
   8321a:	4601      	mov	r1, r0
   8321c:	6818      	ldr	r0, [r3, #0]
   8321e:	f000 b80b 	b.w	83238 <_malloc_r>
   83222:	bf00      	nop
   83224:	20070010 	.word	0x20070010

00083228 <free>:
   83228:	4b02      	ldr	r3, [pc, #8]	; (83234 <free+0xc>)
   8322a:	4601      	mov	r1, r0
   8322c:	6818      	ldr	r0, [r3, #0]
   8322e:	f7ff be8d 	b.w	82f4c <_free_r>
   83232:	bf00      	nop
   83234:	20070010 	.word	0x20070010

00083238 <_malloc_r>:
   83238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8323c:	f101 040b 	add.w	r4, r1, #11
   83240:	2c16      	cmp	r4, #22
   83242:	4606      	mov	r6, r0
   83244:	d903      	bls.n	8324e <_malloc_r+0x16>
   83246:	f034 0407 	bics.w	r4, r4, #7
   8324a:	d501      	bpl.n	83250 <_malloc_r+0x18>
   8324c:	e002      	b.n	83254 <_malloc_r+0x1c>
   8324e:	2410      	movs	r4, #16
   83250:	428c      	cmp	r4, r1
   83252:	d202      	bcs.n	8325a <_malloc_r+0x22>
   83254:	250c      	movs	r5, #12
   83256:	6035      	str	r5, [r6, #0]
   83258:	e1d9      	b.n	8360e <_malloc_r+0x3d6>
   8325a:	4630      	mov	r0, r6
   8325c:	f000 f9ee 	bl	8363c <__malloc_lock>
   83260:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   83264:	d214      	bcs.n	83290 <_malloc_r+0x58>
   83266:	4da0      	ldr	r5, [pc, #640]	; (834e8 <_malloc_r+0x2b0>)
   83268:	08e1      	lsrs	r1, r4, #3
   8326a:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
   8326e:	68c5      	ldr	r5, [r0, #12]
   83270:	4285      	cmp	r5, r0
   83272:	d105      	bne.n	83280 <_malloc_r+0x48>
   83274:	f105 0308 	add.w	r3, r5, #8
   83278:	696d      	ldr	r5, [r5, #20]
   8327a:	1c8a      	adds	r2, r1, #2
   8327c:	429d      	cmp	r5, r3
   8327e:	d044      	beq.n	8330a <_malloc_r+0xd2>
   83280:	68e8      	ldr	r0, [r5, #12]
   83282:	68a9      	ldr	r1, [r5, #8]
   83284:	686a      	ldr	r2, [r5, #4]
   83286:	60c8      	str	r0, [r1, #12]
   83288:	f022 0303 	bic.w	r3, r2, #3
   8328c:	6081      	str	r1, [r0, #8]
   8328e:	e059      	b.n	83344 <_malloc_r+0x10c>
   83290:	0a62      	lsrs	r2, r4, #9
   83292:	d101      	bne.n	83298 <_malloc_r+0x60>
   83294:	08e2      	lsrs	r2, r4, #3
   83296:	e01b      	b.n	832d0 <_malloc_r+0x98>
   83298:	2a04      	cmp	r2, #4
   8329a:	d802      	bhi.n	832a2 <_malloc_r+0x6a>
   8329c:	09a2      	lsrs	r2, r4, #6
   8329e:	3238      	adds	r2, #56	; 0x38
   832a0:	e016      	b.n	832d0 <_malloc_r+0x98>
   832a2:	2a14      	cmp	r2, #20
   832a4:	d801      	bhi.n	832aa <_malloc_r+0x72>
   832a6:	325b      	adds	r2, #91	; 0x5b
   832a8:	e012      	b.n	832d0 <_malloc_r+0x98>
   832aa:	2a54      	cmp	r2, #84	; 0x54
   832ac:	d802      	bhi.n	832b4 <_malloc_r+0x7c>
   832ae:	0b22      	lsrs	r2, r4, #12
   832b0:	326e      	adds	r2, #110	; 0x6e
   832b2:	e00d      	b.n	832d0 <_malloc_r+0x98>
   832b4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   832b8:	d802      	bhi.n	832c0 <_malloc_r+0x88>
   832ba:	0be2      	lsrs	r2, r4, #15
   832bc:	3277      	adds	r2, #119	; 0x77
   832be:	e007      	b.n	832d0 <_malloc_r+0x98>
   832c0:	f240 5354 	movw	r3, #1364	; 0x554
   832c4:	429a      	cmp	r2, r3
   832c6:	d802      	bhi.n	832ce <_malloc_r+0x96>
   832c8:	0ca2      	lsrs	r2, r4, #18
   832ca:	327c      	adds	r2, #124	; 0x7c
   832cc:	e000      	b.n	832d0 <_malloc_r+0x98>
   832ce:	227e      	movs	r2, #126	; 0x7e
   832d0:	4885      	ldr	r0, [pc, #532]	; (834e8 <_malloc_r+0x2b0>)
   832d2:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
   832d6:	68dd      	ldr	r5, [r3, #12]
   832d8:	429d      	cmp	r5, r3
   832da:	d015      	beq.n	83308 <_malloc_r+0xd0>
   832dc:	6869      	ldr	r1, [r5, #4]
   832de:	f021 0103 	bic.w	r1, r1, #3
   832e2:	1b08      	subs	r0, r1, r4
   832e4:	280f      	cmp	r0, #15
   832e6:	dd01      	ble.n	832ec <_malloc_r+0xb4>
   832e8:	3a01      	subs	r2, #1
   832ea:	e00d      	b.n	83308 <_malloc_r+0xd0>
   832ec:	2800      	cmp	r0, #0
   832ee:	db09      	blt.n	83304 <_malloc_r+0xcc>
   832f0:	68eb      	ldr	r3, [r5, #12]
   832f2:	68aa      	ldr	r2, [r5, #8]
   832f4:	60d3      	str	r3, [r2, #12]
   832f6:	609a      	str	r2, [r3, #8]
   832f8:	186b      	adds	r3, r5, r1
   832fa:	685a      	ldr	r2, [r3, #4]
   832fc:	f042 0001 	orr.w	r0, r2, #1
   83300:	6058      	str	r0, [r3, #4]
   83302:	e190      	b.n	83626 <_malloc_r+0x3ee>
   83304:	68ed      	ldr	r5, [r5, #12]
   83306:	e7e7      	b.n	832d8 <_malloc_r+0xa0>
   83308:	3201      	adds	r2, #1
   8330a:	4977      	ldr	r1, [pc, #476]	; (834e8 <_malloc_r+0x2b0>)
   8330c:	690d      	ldr	r5, [r1, #16]
   8330e:	f101 0708 	add.w	r7, r1, #8
   83312:	42bd      	cmp	r5, r7
   83314:	d068      	beq.n	833e8 <_malloc_r+0x1b0>
   83316:	6868      	ldr	r0, [r5, #4]
   83318:	f020 0303 	bic.w	r3, r0, #3
   8331c:	1b18      	subs	r0, r3, r4
   8331e:	280f      	cmp	r0, #15
   83320:	dd0c      	ble.n	8333c <_malloc_r+0x104>
   83322:	192b      	adds	r3, r5, r4
   83324:	614b      	str	r3, [r1, #20]
   83326:	610b      	str	r3, [r1, #16]
   83328:	f044 0401 	orr.w	r4, r4, #1
   8332c:	f040 0101 	orr.w	r1, r0, #1
   83330:	606c      	str	r4, [r5, #4]
   83332:	60df      	str	r7, [r3, #12]
   83334:	609f      	str	r7, [r3, #8]
   83336:	6059      	str	r1, [r3, #4]
   83338:	5018      	str	r0, [r3, r0]
   8333a:	e174      	b.n	83626 <_malloc_r+0x3ee>
   8333c:	2800      	cmp	r0, #0
   8333e:	614f      	str	r7, [r1, #20]
   83340:	610f      	str	r7, [r1, #16]
   83342:	db01      	blt.n	83348 <_malloc_r+0x110>
   83344:	18eb      	adds	r3, r5, r3
   83346:	e7d8      	b.n	832fa <_malloc_r+0xc2>
   83348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8334c:	d20f      	bcs.n	8336e <_malloc_r+0x136>
   8334e:	08db      	lsrs	r3, r3, #3
   83350:	1098      	asrs	r0, r3, #2
   83352:	2701      	movs	r7, #1
   83354:	fa07 f700 	lsl.w	r7, r7, r0
   83358:	6848      	ldr	r0, [r1, #4]
   8335a:	4307      	orrs	r7, r0
   8335c:	604f      	str	r7, [r1, #4]
   8335e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   83362:	688b      	ldr	r3, [r1, #8]
   83364:	60e9      	str	r1, [r5, #12]
   83366:	60ab      	str	r3, [r5, #8]
   83368:	60dd      	str	r5, [r3, #12]
   8336a:	608d      	str	r5, [r1, #8]
   8336c:	e03c      	b.n	833e8 <_malloc_r+0x1b0>
   8336e:	0a58      	lsrs	r0, r3, #9
   83370:	2804      	cmp	r0, #4
   83372:	d802      	bhi.n	8337a <_malloc_r+0x142>
   83374:	0998      	lsrs	r0, r3, #6
   83376:	3038      	adds	r0, #56	; 0x38
   83378:	e016      	b.n	833a8 <_malloc_r+0x170>
   8337a:	2814      	cmp	r0, #20
   8337c:	d801      	bhi.n	83382 <_malloc_r+0x14a>
   8337e:	305b      	adds	r0, #91	; 0x5b
   83380:	e012      	b.n	833a8 <_malloc_r+0x170>
   83382:	2854      	cmp	r0, #84	; 0x54
   83384:	d802      	bhi.n	8338c <_malloc_r+0x154>
   83386:	0b18      	lsrs	r0, r3, #12
   83388:	306e      	adds	r0, #110	; 0x6e
   8338a:	e00d      	b.n	833a8 <_malloc_r+0x170>
   8338c:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   83390:	d802      	bhi.n	83398 <_malloc_r+0x160>
   83392:	0bd8      	lsrs	r0, r3, #15
   83394:	3077      	adds	r0, #119	; 0x77
   83396:	e007      	b.n	833a8 <_malloc_r+0x170>
   83398:	f240 5754 	movw	r7, #1364	; 0x554
   8339c:	42b8      	cmp	r0, r7
   8339e:	d802      	bhi.n	833a6 <_malloc_r+0x16e>
   833a0:	0c98      	lsrs	r0, r3, #18
   833a2:	307c      	adds	r0, #124	; 0x7c
   833a4:	e000      	b.n	833a8 <_malloc_r+0x170>
   833a6:	207e      	movs	r0, #126	; 0x7e
   833a8:	f8df e13c 	ldr.w	lr, [pc, #316]	; 834e8 <_malloc_r+0x2b0>
   833ac:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
   833b0:	68b9      	ldr	r1, [r7, #8]
   833b2:	42b9      	cmp	r1, r7
   833b4:	d10e      	bne.n	833d4 <_malloc_r+0x19c>
   833b6:	1087      	asrs	r7, r0, #2
   833b8:	2301      	movs	r3, #1
   833ba:	fa03 f007 	lsl.w	r0, r3, r7
   833be:	f8de 7004 	ldr.w	r7, [lr, #4]
   833c2:	ea40 0307 	orr.w	r3, r0, r7
   833c6:	f8ce 3004 	str.w	r3, [lr, #4]
   833ca:	4608      	mov	r0, r1
   833cc:	e008      	b.n	833e0 <_malloc_r+0x1a8>
   833ce:	6889      	ldr	r1, [r1, #8]
   833d0:	42b9      	cmp	r1, r7
   833d2:	d004      	beq.n	833de <_malloc_r+0x1a6>
   833d4:	6848      	ldr	r0, [r1, #4]
   833d6:	f020 0003 	bic.w	r0, r0, #3
   833da:	4283      	cmp	r3, r0
   833dc:	d3f7      	bcc.n	833ce <_malloc_r+0x196>
   833de:	68c8      	ldr	r0, [r1, #12]
   833e0:	60e8      	str	r0, [r5, #12]
   833e2:	60a9      	str	r1, [r5, #8]
   833e4:	60cd      	str	r5, [r1, #12]
   833e6:	6085      	str	r5, [r0, #8]
   833e8:	1095      	asrs	r5, r2, #2
   833ea:	2001      	movs	r0, #1
   833ec:	fa00 f305 	lsl.w	r3, r0, r5
   833f0:	4f3d      	ldr	r7, [pc, #244]	; (834e8 <_malloc_r+0x2b0>)
   833f2:	6879      	ldr	r1, [r7, #4]
   833f4:	428b      	cmp	r3, r1
   833f6:	d85d      	bhi.n	834b4 <_malloc_r+0x27c>
   833f8:	420b      	tst	r3, r1
   833fa:	d105      	bne.n	83408 <_malloc_r+0x1d0>
   833fc:	f022 0203 	bic.w	r2, r2, #3
   83400:	005b      	lsls	r3, r3, #1
   83402:	3204      	adds	r2, #4
   83404:	420b      	tst	r3, r1
   83406:	d0fb      	beq.n	83400 <_malloc_r+0x1c8>
   83408:	4d37      	ldr	r5, [pc, #220]	; (834e8 <_malloc_r+0x2b0>)
   8340a:	4610      	mov	r0, r2
   8340c:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
   83410:	4677      	mov	r7, lr
   83412:	68fd      	ldr	r5, [r7, #12]
   83414:	42bd      	cmp	r5, r7
   83416:	d02d      	beq.n	83474 <_malloc_r+0x23c>
   83418:	6869      	ldr	r1, [r5, #4]
   8341a:	f021 0c03 	bic.w	ip, r1, #3
   8341e:	ebc4 010c 	rsb	r1, r4, ip
   83422:	290f      	cmp	r1, #15
   83424:	dd13      	ble.n	8344e <_malloc_r+0x216>
   83426:	192b      	adds	r3, r5, r4
   83428:	f044 0401 	orr.w	r4, r4, #1
   8342c:	68ea      	ldr	r2, [r5, #12]
   8342e:	606c      	str	r4, [r5, #4]
   83430:	f855 0f08 	ldr.w	r0, [r5, #8]!
   83434:	5059      	str	r1, [r3, r1]
   83436:	60c2      	str	r2, [r0, #12]
   83438:	6090      	str	r0, [r2, #8]
   8343a:	4a2b      	ldr	r2, [pc, #172]	; (834e8 <_malloc_r+0x2b0>)
   8343c:	f041 0001 	orr.w	r0, r1, #1
   83440:	6153      	str	r3, [r2, #20]
   83442:	6113      	str	r3, [r2, #16]
   83444:	3208      	adds	r2, #8
   83446:	60da      	str	r2, [r3, #12]
   83448:	609a      	str	r2, [r3, #8]
   8344a:	6058      	str	r0, [r3, #4]
   8344c:	e00c      	b.n	83468 <_malloc_r+0x230>
   8344e:	2900      	cmp	r1, #0
   83450:	db0e      	blt.n	83470 <_malloc_r+0x238>
   83452:	eb05 000c 	add.w	r0, r5, ip
   83456:	6842      	ldr	r2, [r0, #4]
   83458:	68e9      	ldr	r1, [r5, #12]
   8345a:	f042 0301 	orr.w	r3, r2, #1
   8345e:	6043      	str	r3, [r0, #4]
   83460:	f855 0f08 	ldr.w	r0, [r5, #8]!
   83464:	60c1      	str	r1, [r0, #12]
   83466:	6088      	str	r0, [r1, #8]
   83468:	4630      	mov	r0, r6
   8346a:	f000 f8e8 	bl	8363e <__malloc_unlock>
   8346e:	e0de      	b.n	8362e <_malloc_r+0x3f6>
   83470:	68ed      	ldr	r5, [r5, #12]
   83472:	e7cf      	b.n	83414 <_malloc_r+0x1dc>
   83474:	3001      	adds	r0, #1
   83476:	0781      	lsls	r1, r0, #30
   83478:	f105 0708 	add.w	r7, r5, #8
   8347c:	d1c9      	bne.n	83412 <_malloc_r+0x1da>
   8347e:	4671      	mov	r1, lr
   83480:	0795      	lsls	r5, r2, #30
   83482:	d105      	bne.n	83490 <_malloc_r+0x258>
   83484:	4a18      	ldr	r2, [pc, #96]	; (834e8 <_malloc_r+0x2b0>)
   83486:	6855      	ldr	r5, [r2, #4]
   83488:	ea25 0503 	bic.w	r5, r5, r3
   8348c:	6055      	str	r5, [r2, #4]
   8348e:	e005      	b.n	8349c <_malloc_r+0x264>
   83490:	f1a1 0708 	sub.w	r7, r1, #8
   83494:	6809      	ldr	r1, [r1, #0]
   83496:	3a01      	subs	r2, #1
   83498:	42b9      	cmp	r1, r7
   8349a:	d0f1      	beq.n	83480 <_malloc_r+0x248>
   8349c:	4f12      	ldr	r7, [pc, #72]	; (834e8 <_malloc_r+0x2b0>)
   8349e:	005b      	lsls	r3, r3, #1
   834a0:	687f      	ldr	r7, [r7, #4]
   834a2:	42bb      	cmp	r3, r7
   834a4:	d806      	bhi.n	834b4 <_malloc_r+0x27c>
   834a6:	b12b      	cbz	r3, 834b4 <_malloc_r+0x27c>
   834a8:	4602      	mov	r2, r0
   834aa:	423b      	tst	r3, r7
   834ac:	d1ac      	bne.n	83408 <_malloc_r+0x1d0>
   834ae:	3204      	adds	r2, #4
   834b0:	005b      	lsls	r3, r3, #1
   834b2:	e7fa      	b.n	834aa <_malloc_r+0x272>
   834b4:	4b0c      	ldr	r3, [pc, #48]	; (834e8 <_malloc_r+0x2b0>)
   834b6:	689f      	ldr	r7, [r3, #8]
   834b8:	4619      	mov	r1, r3
   834ba:	6878      	ldr	r0, [r7, #4]
   834bc:	f020 0903 	bic.w	r9, r0, #3
   834c0:	45a1      	cmp	r9, r4
   834c2:	d304      	bcc.n	834ce <_malloc_r+0x296>
   834c4:	ebc4 0009 	rsb	r0, r4, r9
   834c8:	280f      	cmp	r0, #15
   834ca:	f300 80a2 	bgt.w	83612 <_malloc_r+0x3da>
   834ce:	4a07      	ldr	r2, [pc, #28]	; (834ec <_malloc_r+0x2b4>)
   834d0:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
   834d4:	6815      	ldr	r5, [r2, #0]
   834d6:	3301      	adds	r3, #1
   834d8:	eb07 0a09 	add.w	sl, r7, r9
   834dc:	eb04 0805 	add.w	r8, r4, r5
   834e0:	d106      	bne.n	834f0 <_malloc_r+0x2b8>
   834e2:	f108 0810 	add.w	r8, r8, #16
   834e6:	e00b      	b.n	83500 <_malloc_r+0x2c8>
   834e8:	20070440 	.word	0x20070440
   834ec:	2007095c 	.word	0x2007095c
   834f0:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
   834f4:	f100 010f 	add.w	r1, r0, #15
   834f8:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   834fc:	f022 080f 	bic.w	r8, r2, #15
   83500:	4630      	mov	r0, r6
   83502:	4641      	mov	r1, r8
   83504:	f000 f89c 	bl	83640 <_sbrk_r>
   83508:	1c42      	adds	r2, r0, #1
   8350a:	4605      	mov	r5, r0
   8350c:	d071      	beq.n	835f2 <_malloc_r+0x3ba>
   8350e:	4550      	cmp	r0, sl
   83510:	d202      	bcs.n	83518 <_malloc_r+0x2e0>
   83512:	4b48      	ldr	r3, [pc, #288]	; (83634 <_malloc_r+0x3fc>)
   83514:	429f      	cmp	r7, r3
   83516:	d16c      	bne.n	835f2 <_malloc_r+0x3ba>
   83518:	4847      	ldr	r0, [pc, #284]	; (83638 <_malloc_r+0x400>)
   8351a:	4555      	cmp	r5, sl
   8351c:	6841      	ldr	r1, [r0, #4]
   8351e:	4a45      	ldr	r2, [pc, #276]	; (83634 <_malloc_r+0x3fc>)
   83520:	eb08 0301 	add.w	r3, r8, r1
   83524:	6043      	str	r3, [r0, #4]
   83526:	d107      	bne.n	83538 <_malloc_r+0x300>
   83528:	0529      	lsls	r1, r5, #20
   8352a:	d105      	bne.n	83538 <_malloc_r+0x300>
   8352c:	6895      	ldr	r5, [r2, #8]
   8352e:	44c8      	add	r8, r9
   83530:	f048 0001 	orr.w	r0, r8, #1
   83534:	6068      	str	r0, [r5, #4]
   83536:	e051      	b.n	835dc <_malloc_r+0x3a4>
   83538:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
   8353c:	1c42      	adds	r2, r0, #1
   8353e:	d103      	bne.n	83548 <_malloc_r+0x310>
   83540:	4a3c      	ldr	r2, [pc, #240]	; (83634 <_malloc_r+0x3fc>)
   83542:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
   83546:	e005      	b.n	83554 <_malloc_r+0x31c>
   83548:	ebca 0a05 	rsb	sl, sl, r5
   8354c:	eb03 010a 	add.w	r1, r3, sl
   83550:	4b39      	ldr	r3, [pc, #228]	; (83638 <_malloc_r+0x400>)
   83552:	6059      	str	r1, [r3, #4]
   83554:	f015 0007 	ands.w	r0, r5, #7
   83558:	bf1c      	itt	ne
   8355a:	f1c0 0008 	rsbne	r0, r0, #8
   8355e:	182d      	addne	r5, r5, r0
   83560:	eb05 0c08 	add.w	ip, r5, r8
   83564:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
   83568:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
   8356c:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
   83570:	4641      	mov	r1, r8
   83572:	4630      	mov	r0, r6
   83574:	f000 f864 	bl	83640 <_sbrk_r>
   83578:	4a2f      	ldr	r2, [pc, #188]	; (83638 <_malloc_r+0x400>)
   8357a:	1c43      	adds	r3, r0, #1
   8357c:	6853      	ldr	r3, [r2, #4]
   8357e:	bf08      	it	eq
   83580:	f04f 0800 	moveq.w	r8, #0
   83584:	eb08 0103 	add.w	r1, r8, r3
   83588:	bf08      	it	eq
   8358a:	4628      	moveq	r0, r5
   8358c:	6051      	str	r1, [r2, #4]
   8358e:	1b40      	subs	r0, r0, r5
   83590:	4a28      	ldr	r2, [pc, #160]	; (83634 <_malloc_r+0x3fc>)
   83592:	eb00 0308 	add.w	r3, r0, r8
   83596:	f043 0101 	orr.w	r1, r3, #1
   8359a:	4297      	cmp	r7, r2
   8359c:	6095      	str	r5, [r2, #8]
   8359e:	6069      	str	r1, [r5, #4]
   835a0:	d01c      	beq.n	835dc <_malloc_r+0x3a4>
   835a2:	f1b9 0f0f 	cmp.w	r9, #15
   835a6:	d802      	bhi.n	835ae <_malloc_r+0x376>
   835a8:	2201      	movs	r2, #1
   835aa:	606a      	str	r2, [r5, #4]
   835ac:	e021      	b.n	835f2 <_malloc_r+0x3ba>
   835ae:	687d      	ldr	r5, [r7, #4]
   835b0:	f1a9 090c 	sub.w	r9, r9, #12
   835b4:	f029 0907 	bic.w	r9, r9, #7
   835b8:	f005 0201 	and.w	r2, r5, #1
   835bc:	2105      	movs	r1, #5
   835be:	eb07 0309 	add.w	r3, r7, r9
   835c2:	ea49 0002 	orr.w	r0, r9, r2
   835c6:	f1b9 0f0f 	cmp.w	r9, #15
   835ca:	6078      	str	r0, [r7, #4]
   835cc:	6059      	str	r1, [r3, #4]
   835ce:	6099      	str	r1, [r3, #8]
   835d0:	d904      	bls.n	835dc <_malloc_r+0x3a4>
   835d2:	4630      	mov	r0, r6
   835d4:	f107 0108 	add.w	r1, r7, #8
   835d8:	f7ff fcb8 	bl	82f4c <_free_r>
   835dc:	4a16      	ldr	r2, [pc, #88]	; (83638 <_malloc_r+0x400>)
   835de:	6853      	ldr	r3, [r2, #4]
   835e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   835e2:	6b15      	ldr	r5, [r2, #48]	; 0x30
   835e4:	428b      	cmp	r3, r1
   835e6:	bf88      	it	hi
   835e8:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   835ea:	42ab      	cmp	r3, r5
   835ec:	bf84      	itt	hi
   835ee:	4d12      	ldrhi	r5, [pc, #72]	; (83638 <_malloc_r+0x400>)
   835f0:	632b      	strhi	r3, [r5, #48]	; 0x30
   835f2:	4810      	ldr	r0, [pc, #64]	; (83634 <_malloc_r+0x3fc>)
   835f4:	6882      	ldr	r2, [r0, #8]
   835f6:	6853      	ldr	r3, [r2, #4]
   835f8:	f023 0103 	bic.w	r1, r3, #3
   835fc:	42a1      	cmp	r1, r4
   835fe:	ebc4 0001 	rsb	r0, r4, r1
   83602:	d301      	bcc.n	83608 <_malloc_r+0x3d0>
   83604:	280f      	cmp	r0, #15
   83606:	dc04      	bgt.n	83612 <_malloc_r+0x3da>
   83608:	4630      	mov	r0, r6
   8360a:	f000 f818 	bl	8363e <__malloc_unlock>
   8360e:	2500      	movs	r5, #0
   83610:	e00d      	b.n	8362e <_malloc_r+0x3f6>
   83612:	4a08      	ldr	r2, [pc, #32]	; (83634 <_malloc_r+0x3fc>)
   83614:	f044 0301 	orr.w	r3, r4, #1
   83618:	6895      	ldr	r5, [r2, #8]
   8361a:	f040 0101 	orr.w	r1, r0, #1
   8361e:	192c      	adds	r4, r5, r4
   83620:	606b      	str	r3, [r5, #4]
   83622:	6094      	str	r4, [r2, #8]
   83624:	6061      	str	r1, [r4, #4]
   83626:	4630      	mov	r0, r6
   83628:	f000 f809 	bl	8363e <__malloc_unlock>
   8362c:	3508      	adds	r5, #8
   8362e:	4628      	mov	r0, r5
   83630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83634:	20070440 	.word	0x20070440
   83638:	2007095c 	.word	0x2007095c

0008363c <__malloc_lock>:
   8363c:	4770      	bx	lr

0008363e <__malloc_unlock>:
   8363e:	4770      	bx	lr

00083640 <_sbrk_r>:
   83640:	b538      	push	{r3, r4, r5, lr}
   83642:	4c06      	ldr	r4, [pc, #24]	; (8365c <_sbrk_r+0x1c>)
   83644:	2300      	movs	r3, #0
   83646:	4605      	mov	r5, r0
   83648:	4608      	mov	r0, r1
   8364a:	6023      	str	r3, [r4, #0]
   8364c:	f7fd fd78 	bl	81140 <_sbrk>
   83650:	1c43      	adds	r3, r0, #1
   83652:	d102      	bne.n	8365a <_sbrk_r+0x1a>
   83654:	6821      	ldr	r1, [r4, #0]
   83656:	b101      	cbz	r1, 8365a <_sbrk_r+0x1a>
   83658:	6029      	str	r1, [r5, #0]
   8365a:	bd38      	pop	{r3, r4, r5, pc}
   8365c:	2007099c 	.word	0x2007099c

00083660 <__sread>:
   83660:	b510      	push	{r4, lr}
   83662:	460c      	mov	r4, r1
   83664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83668:	f000 f8e2 	bl	83830 <_read_r>
   8366c:	2800      	cmp	r0, #0
   8366e:	db03      	blt.n	83678 <__sread+0x18>
   83670:	6d22      	ldr	r2, [r4, #80]	; 0x50
   83672:	1813      	adds	r3, r2, r0
   83674:	6523      	str	r3, [r4, #80]	; 0x50
   83676:	bd10      	pop	{r4, pc}
   83678:	89a3      	ldrh	r3, [r4, #12]
   8367a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
   8367e:	81a1      	strh	r1, [r4, #12]
   83680:	bd10      	pop	{r4, pc}

00083682 <__seofread>:
   83682:	2000      	movs	r0, #0
   83684:	4770      	bx	lr

00083686 <__swrite>:
   83686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8368a:	461d      	mov	r5, r3
   8368c:	898b      	ldrh	r3, [r1, #12]
   8368e:	460c      	mov	r4, r1
   83690:	f403 7180 	and.w	r1, r3, #256	; 0x100
   83694:	4616      	mov	r6, r2
   83696:	b20a      	sxth	r2, r1
   83698:	4607      	mov	r7, r0
   8369a:	b12a      	cbz	r2, 836a8 <__swrite+0x22>
   8369c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   836a0:	2200      	movs	r2, #0
   836a2:	2302      	movs	r3, #2
   836a4:	f000 f8b2 	bl	8380c <_lseek_r>
   836a8:	89a0      	ldrh	r0, [r4, #12]
   836aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   836ae:	f420 5380 	bic.w	r3, r0, #4096	; 0x1000
   836b2:	81a3      	strh	r3, [r4, #12]
   836b4:	4638      	mov	r0, r7
   836b6:	4632      	mov	r2, r6
   836b8:	462b      	mov	r3, r5
   836ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   836be:	f000 b817 	b.w	836f0 <_write_r>

000836c2 <__sseek>:
   836c2:	b510      	push	{r4, lr}
   836c4:	460c      	mov	r4, r1
   836c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   836ca:	f000 f89f 	bl	8380c <_lseek_r>
   836ce:	1c43      	adds	r3, r0, #1
   836d0:	89a3      	ldrh	r3, [r4, #12]
   836d2:	d103      	bne.n	836dc <__sseek+0x1a>
   836d4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
   836d8:	81a2      	strh	r2, [r4, #12]
   836da:	bd10      	pop	{r4, pc}
   836dc:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
   836e0:	81a1      	strh	r1, [r4, #12]
   836e2:	6520      	str	r0, [r4, #80]	; 0x50
   836e4:	bd10      	pop	{r4, pc}

000836e6 <__sclose>:
   836e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   836ea:	f000 b813 	b.w	83714 <_close_r>
	...

000836f0 <_write_r>:
   836f0:	b538      	push	{r3, r4, r5, lr}
   836f2:	4c07      	ldr	r4, [pc, #28]	; (83710 <_write_r+0x20>)
   836f4:	4605      	mov	r5, r0
   836f6:	2000      	movs	r0, #0
   836f8:	6020      	str	r0, [r4, #0]
   836fa:	4608      	mov	r0, r1
   836fc:	4611      	mov	r1, r2
   836fe:	461a      	mov	r2, r3
   83700:	f7fc ffa4 	bl	8064c <_write>
   83704:	1c43      	adds	r3, r0, #1
   83706:	d102      	bne.n	8370e <_write_r+0x1e>
   83708:	6823      	ldr	r3, [r4, #0]
   8370a:	b103      	cbz	r3, 8370e <_write_r+0x1e>
   8370c:	602b      	str	r3, [r5, #0]
   8370e:	bd38      	pop	{r3, r4, r5, pc}
   83710:	2007099c 	.word	0x2007099c

00083714 <_close_r>:
   83714:	b538      	push	{r3, r4, r5, lr}
   83716:	4c06      	ldr	r4, [pc, #24]	; (83730 <_close_r+0x1c>)
   83718:	2300      	movs	r3, #0
   8371a:	4605      	mov	r5, r0
   8371c:	4608      	mov	r0, r1
   8371e:	6023      	str	r3, [r4, #0]
   83720:	f7fd fd26 	bl	81170 <_close>
   83724:	1c43      	adds	r3, r0, #1
   83726:	d102      	bne.n	8372e <_close_r+0x1a>
   83728:	6821      	ldr	r1, [r4, #0]
   8372a:	b101      	cbz	r1, 8372e <_close_r+0x1a>
   8372c:	6029      	str	r1, [r5, #0]
   8372e:	bd38      	pop	{r3, r4, r5, pc}
   83730:	2007099c 	.word	0x2007099c

00083734 <_fclose_r>:
   83734:	b570      	push	{r4, r5, r6, lr}
   83736:	4605      	mov	r5, r0
   83738:	460c      	mov	r4, r1
   8373a:	2900      	cmp	r1, #0
   8373c:	d039      	beq.n	837b2 <_fclose_r+0x7e>
   8373e:	f7ff fb9f 	bl	82e80 <__sfp_lock_acquire>
   83742:	b125      	cbz	r5, 8374e <_fclose_r+0x1a>
   83744:	6bab      	ldr	r3, [r5, #56]	; 0x38
   83746:	b913      	cbnz	r3, 8374e <_fclose_r+0x1a>
   83748:	4628      	mov	r0, r5
   8374a:	f7ff fb35 	bl	82db8 <__sinit>
   8374e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   83752:	b35e      	cbz	r6, 837ac <_fclose_r+0x78>
   83754:	4628      	mov	r0, r5
   83756:	4621      	mov	r1, r4
   83758:	f7ff fa3c 	bl	82bd4 <_fflush_r>
   8375c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   8375e:	4606      	mov	r6, r0
   83760:	b13a      	cbz	r2, 83772 <_fclose_r+0x3e>
   83762:	4628      	mov	r0, r5
   83764:	69e1      	ldr	r1, [r4, #28]
   83766:	4790      	blx	r2
   83768:	ea36 0620 	bics.w	r6, r6, r0, asr #32
   8376c:	bf28      	it	cs
   8376e:	f04f 36ff 	movcs.w	r6, #4294967295
   83772:	89a0      	ldrh	r0, [r4, #12]
   83774:	f000 0180 	and.w	r1, r0, #128	; 0x80
   83778:	b20b      	sxth	r3, r1
   8377a:	b11b      	cbz	r3, 83784 <_fclose_r+0x50>
   8377c:	4628      	mov	r0, r5
   8377e:	6921      	ldr	r1, [r4, #16]
   83780:	f7ff fbe4 	bl	82f4c <_free_r>
   83784:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83786:	b141      	cbz	r1, 8379a <_fclose_r+0x66>
   83788:	f104 0240 	add.w	r2, r4, #64	; 0x40
   8378c:	4291      	cmp	r1, r2
   8378e:	d002      	beq.n	83796 <_fclose_r+0x62>
   83790:	4628      	mov	r0, r5
   83792:	f7ff fbdb 	bl	82f4c <_free_r>
   83796:	2000      	movs	r0, #0
   83798:	6320      	str	r0, [r4, #48]	; 0x30
   8379a:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8379c:	b121      	cbz	r1, 837a8 <_fclose_r+0x74>
   8379e:	4628      	mov	r0, r5
   837a0:	f7ff fbd4 	bl	82f4c <_free_r>
   837a4:	2100      	movs	r1, #0
   837a6:	6461      	str	r1, [r4, #68]	; 0x44
   837a8:	2300      	movs	r3, #0
   837aa:	81a3      	strh	r3, [r4, #12]
   837ac:	f7ff fb69 	bl	82e82 <__sfp_lock_release>
   837b0:	e000      	b.n	837b4 <_fclose_r+0x80>
   837b2:	460e      	mov	r6, r1
   837b4:	4630      	mov	r0, r6
   837b6:	bd70      	pop	{r4, r5, r6, pc}

000837b8 <fclose>:
   837b8:	4b02      	ldr	r3, [pc, #8]	; (837c4 <fclose+0xc>)
   837ba:	4601      	mov	r1, r0
   837bc:	6818      	ldr	r0, [r3, #0]
   837be:	f7ff bfb9 	b.w	83734 <_fclose_r>
   837c2:	bf00      	nop
   837c4:	20070010 	.word	0x20070010

000837c8 <_fstat_r>:
   837c8:	b538      	push	{r3, r4, r5, lr}
   837ca:	4c07      	ldr	r4, [pc, #28]	; (837e8 <_fstat_r+0x20>)
   837cc:	2300      	movs	r3, #0
   837ce:	4605      	mov	r5, r0
   837d0:	4608      	mov	r0, r1
   837d2:	4611      	mov	r1, r2
   837d4:	6023      	str	r3, [r4, #0]
   837d6:	f7fd fccf 	bl	81178 <_fstat>
   837da:	1c43      	adds	r3, r0, #1
   837dc:	d102      	bne.n	837e4 <_fstat_r+0x1c>
   837de:	6821      	ldr	r1, [r4, #0]
   837e0:	b101      	cbz	r1, 837e4 <_fstat_r+0x1c>
   837e2:	6029      	str	r1, [r5, #0]
   837e4:	bd38      	pop	{r3, r4, r5, pc}
   837e6:	bf00      	nop
   837e8:	2007099c 	.word	0x2007099c

000837ec <_isatty_r>:
   837ec:	b538      	push	{r3, r4, r5, lr}
   837ee:	4c06      	ldr	r4, [pc, #24]	; (83808 <_isatty_r+0x1c>)
   837f0:	2300      	movs	r3, #0
   837f2:	4605      	mov	r5, r0
   837f4:	4608      	mov	r0, r1
   837f6:	6023      	str	r3, [r4, #0]
   837f8:	f7fd fcc4 	bl	81184 <_isatty>
   837fc:	1c43      	adds	r3, r0, #1
   837fe:	d102      	bne.n	83806 <_isatty_r+0x1a>
   83800:	6821      	ldr	r1, [r4, #0]
   83802:	b101      	cbz	r1, 83806 <_isatty_r+0x1a>
   83804:	6029      	str	r1, [r5, #0]
   83806:	bd38      	pop	{r3, r4, r5, pc}
   83808:	2007099c 	.word	0x2007099c

0008380c <_lseek_r>:
   8380c:	b538      	push	{r3, r4, r5, lr}
   8380e:	4c07      	ldr	r4, [pc, #28]	; (8382c <_lseek_r+0x20>)
   83810:	4605      	mov	r5, r0
   83812:	2000      	movs	r0, #0
   83814:	6020      	str	r0, [r4, #0]
   83816:	4608      	mov	r0, r1
   83818:	4611      	mov	r1, r2
   8381a:	461a      	mov	r2, r3
   8381c:	f7fd fcb6 	bl	8118c <_lseek>
   83820:	1c43      	adds	r3, r0, #1
   83822:	d102      	bne.n	8382a <_lseek_r+0x1e>
   83824:	6823      	ldr	r3, [r4, #0]
   83826:	b103      	cbz	r3, 8382a <_lseek_r+0x1e>
   83828:	602b      	str	r3, [r5, #0]
   8382a:	bd38      	pop	{r3, r4, r5, pc}
   8382c:	2007099c 	.word	0x2007099c

00083830 <_read_r>:
   83830:	b538      	push	{r3, r4, r5, lr}
   83832:	4c07      	ldr	r4, [pc, #28]	; (83850 <_read_r+0x20>)
   83834:	4605      	mov	r5, r0
   83836:	2000      	movs	r0, #0
   83838:	6020      	str	r0, [r4, #0]
   8383a:	4608      	mov	r0, r1
   8383c:	4611      	mov	r1, r2
   8383e:	461a      	mov	r2, r3
   83840:	f7fc fec0 	bl	805c4 <_read>
   83844:	1c43      	adds	r3, r0, #1
   83846:	d102      	bne.n	8384e <_read_r+0x1e>
   83848:	6823      	ldr	r3, [r4, #0]
   8384a:	b103      	cbz	r3, 8384e <_read_r+0x1e>
   8384c:	602b      	str	r3, [r5, #0]
   8384e:	bd38      	pop	{r3, r4, r5, pc}
   83850:	2007099c 	.word	0x2007099c
   83854:	0c040800 	.word	0x0c040800
   83858:	0e060a02 	.word	0x0e060a02
   8385c:	0d050901 	.word	0x0d050901
   83860:	0f070b03 	.word	0x0f070b03
   83864:	00000007 	.word	0x00000007
   83868:	00000006 	.word	0x00000006
   8386c:	00000005 	.word	0x00000005
   83870:	00000004 	.word	0x00000004
   83874:	00000003 	.word	0x00000003
   83878:	00000002 	.word	0x00000002
   8387c:	00000001 	.word	0x00000001
   83880:	00000000 	.word	0x00000000
   83884:	0000000a 	.word	0x0000000a
   83888:	0000000b 	.word	0x0000000b
   8388c:	0000000c 	.word	0x0000000c
   83890:	0000000d 	.word	0x0000000d
   83894:	70784520 	.word	0x70784520
   83898:	65746365 	.word	0x65746365
   8389c:	52542064 	.word	0x52542064
   838a0:	57204555 	.word	0x57204555
   838a4:	46207361 	.word	0x46207361
   838a8:	45534c41 	.word	0x45534c41
   838ac:	00000000 	.word	0x00000000
   838b0:	74736574 	.word	0x74736574
   838b4:	7365742f 	.word	0x7365742f
   838b8:	41796d74 	.word	0x41796d74
   838bc:	632e4344 	.word	0x632e4344
   838c0:	00000000 	.word	0x00000000
   838c4:	74736574 	.word	0x74736574
   838c8:	4344415f 	.word	0x4344415f
   838cc:	65766e6f 	.word	0x65766e6f
   838d0:	72657472 	.word	0x72657472
   838d4:	6e497349 	.word	0x6e497349
   838d8:	61697469 	.word	0x61697469
   838dc:	6573696c 	.word	0x6573696c
   838e0:	726f4364 	.word	0x726f4364
   838e4:	74636572 	.word	0x74636572
   838e8:	0000796c 	.word	0x0000796c
   838ec:	74736574 	.word	0x74736574
   838f0:	6568435f 	.word	0x6568435f
   838f4:	66496b63 	.word	0x66496b63
   838f8:	756c6156 	.word	0x756c6156
   838fc:	4e734965 	.word	0x4e734965
   83900:	655a746f 	.word	0x655a746f
   83904:	00006f72 	.word	0x00006f72
   83908:	4c494146 	.word	0x4c494146
   8390c:	00000000 	.word	0x00000000
   83910:	00004b4f 	.word	0x00004b4f
   83914:	4c494146 	.word	0x4c494146
   83918:	0000003a 	.word	0x0000003a
   8391c:	53534150 	.word	0x53534150
   83920:	00000000 	.word	0x00000000
   83924:	4f4e4749 	.word	0x4f4e4749
   83928:	00004552 	.word	0x00004552
   8392c:	2d2d2d2d 	.word	0x2d2d2d2d
   83930:	2d2d2d2d 	.word	0x2d2d2d2d
   83934:	2d2d2d2d 	.word	0x2d2d2d2d
   83938:	2d2d2d2d 	.word	0x2d2d2d2d
   8393c:	2d2d2d2d 	.word	0x2d2d2d2d
   83940:	002d2d2d 	.word	0x002d2d2d
   83944:	73655420 	.word	0x73655420
   83948:	00207374 	.word	0x00207374
   8394c:	69614620 	.word	0x69614620
   83950:	6572756c 	.word	0x6572756c
   83954:	00002073 	.word	0x00002073
   83958:	6e674920 	.word	0x6e674920
   8395c:	6465726f 	.word	0x6465726f
   83960:	00000000 	.word	0x00000000
   83964:	004e614e 	.word	0x004e614e
   83968:	6167654e 	.word	0x6167654e
   8396c:	65766974 	.word	0x65766974
   83970:	666e4920 	.word	0x666e4920
   83974:	74696e69 	.word	0x74696e69
   83978:	00000079 	.word	0x00000079
   8397c:	69666e49 	.word	0x69666e49
   83980:	7974696e 	.word	0x7974696e
   83984:	00000000 	.word	0x00000000
   83988:	74634120 	.word	0x74634120
   8398c:	206c6175 	.word	0x206c6175
   83990:	6e696f70 	.word	0x6e696f70
   83994:	20726574 	.word	0x20726574
   83998:	20736177 	.word	0x20736177
   8399c:	4c4c554e 	.word	0x4c4c554e
   839a0:	00000000 	.word	0x00000000
   839a4:	70784520 	.word	0x70784520
   839a8:	65746365 	.word	0x65746365
   839ac:	6f702064 	.word	0x6f702064
   839b0:	65746e69 	.word	0x65746e69
   839b4:	6f742072 	.word	0x6f742072
   839b8:	20656220 	.word	0x20656220
   839bc:	4c4c554e 	.word	0x4c4c554e
   839c0:	00000000 	.word	0x00000000
   839c4:	756f5920 	.word	0x756f5920
   839c8:	6b734120 	.word	0x6b734120
   839cc:	4d206465 	.word	0x4d206465
   839d0:	6f542065 	.word	0x6f542065
   839d4:	6d6f4320 	.word	0x6d6f4320
   839d8:	65726170 	.word	0x65726170
   839dc:	746f4e20 	.word	0x746f4e20
   839e0:	676e6968 	.word	0x676e6968
   839e4:	6857202c 	.word	0x6857202c
   839e8:	20686369 	.word	0x20686369
   839ec:	20736157 	.word	0x20736157
   839f0:	6e696f50 	.word	0x6e696f50
   839f4:	73656c74 	.word	0x73656c74
   839f8:	00002e73 	.word	0x00002e73
   839fc:	6c615620 	.word	0x6c615620
   83a00:	20736575 	.word	0x20736575
   83a04:	20746f4e 	.word	0x20746f4e
   83a08:	68746957 	.word	0x68746957
   83a0c:	44206e69 	.word	0x44206e69
   83a10:	61746c65 	.word	0x61746c65
   83a14:	00000020 	.word	0x00000020
   83a18:	6d654d20 	.word	0x6d654d20
   83a1c:	2079726f 	.word	0x2079726f
   83a20:	6d73694d 	.word	0x6d73694d
   83a24:	68637461 	.word	0x68637461
   83a28:	0000002e 	.word	0x0000002e
   83a2c:	74794220 	.word	0x74794220
   83a30:	00002065 	.word	0x00002065
   83a34:	656c4520 	.word	0x656c4520
   83a38:	746e656d 	.word	0x746e656d
   83a3c:	00000020 	.word	0x00000020
   83a40:	206f5420 	.word	0x206f5420
   83a44:	00000000 	.word	0x00000000
   83a48:	73615720 	.word	0x73615720
   83a4c:	00000020 	.word	0x00000020
   83a50:	70784520 	.word	0x70784520
   83a54:	65746365 	.word	0x65746365
   83a58:	00002064 	.word	0x00002064
   83a5c:	0000202e 	.word	0x0000202e

00083a60 <UnitySizeMask>:
   83a60:	000000ff 0000ffff 0000ffff ffffffff     ................
   83a70:	ffffffff ffffffff ffffffff              ............

00083a7c <_global_impure_ptr>:
   83a7c:	20070018 00000043                       ... C...

00083a84 <_init>:
   83a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83a86:	bf00      	nop
   83a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83a8a:	bc08      	pop	{r3}
   83a8c:	469e      	mov	lr, r3
   83a8e:	4770      	bx	lr

00083a90 <__init_array_start>:
   83a90:	00082bb5 	.word	0x00082bb5

00083a94 <__frame_dummy_init_array_entry>:
   83a94:	0008016d                                m...

00083a98 <_fini>:
   83a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83a9a:	bf00      	nop
   83a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83a9e:	bc08      	pop	{r3}
   83aa0:	469e      	mov	lr, r3
   83aa2:	4770      	bx	lr

00083aa4 <__fini_array_start>:
   83aa4:	00080145 	.word	0x00080145
